
Learning-DAC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a6c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004bf4  08004bf4  00014bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c3c  08004c3c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c3c  08004c3c  00014c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c44  08004c44  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c44  08004c44  00014c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c48  08004c48  00014c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004c4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000000c  08004c58  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08004c58  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fcf3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ea8  00000000  00000000  0002fd2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00031bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  00032928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027ea5  00000000  00000000  000335c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f07e  00000000  00000000  0005b465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc61e  00000000  00000000  0006a4e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00166b01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003800  00000000  00000000  00166b54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004bdc 	.word	0x08004bdc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004bdc 	.word	0x08004bdc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t value_adc=0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	607b      	str	r3, [r7, #4]
	uint32_t value_dac=0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fb4f 	bl	8000b7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f82b 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f953 	bl	800078c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e6:	f000 f921 	bl	800072c <MX_USART2_UART_Init>
  MX_DAC1_Init();
 80004ea:	f000 f8ed 	bl	80006c8 <MX_DAC1_Init>
  MX_ADC1_Init();
 80004ee:	f000 f875 	bl	80005dc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  // Start DAC
  HAL_DAC_Start(&hdac1,DAC_CHANNEL_1);
 80004f2:	2100      	movs	r1, #0
 80004f4:	480e      	ldr	r0, [pc, #56]	; (8000530 <main+0x64>)
 80004f6:	f002 f820 	bl	800253a <HAL_DAC_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80004fa:	217f      	movs	r1, #127	; 0x7f
 80004fc:	480d      	ldr	r0, [pc, #52]	; (8000534 <main+0x68>)
 80004fe:	f001 fe05 	bl	800210c <HAL_ADCEx_Calibration_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Start ADC Conversion
	  HAL_ADC_Start(&hadc1);
 8000502:	480c      	ldr	r0, [pc, #48]	; (8000534 <main+0x68>)
 8000504:	f000 ff3a 	bl	800137c <HAL_ADC_Start>
	 // Poll ADC1 Perihperal & TimeOut = 1mSec
	  HAL_ADC_PollForConversion(&hadc1, 1);
 8000508:	2101      	movs	r1, #1
 800050a:	480a      	ldr	r0, [pc, #40]	; (8000534 <main+0x68>)
 800050c:	f000 fff0 	bl	80014f0 <HAL_ADC_PollForConversion>
	 // Read The ADC Conversion Result
	  value_adc = HAL_ADC_GetValue(&hadc1);
 8000510:	4808      	ldr	r0, [pc, #32]	; (8000534 <main+0x68>)
 8000512:	f001 f8c5 	bl	80016a0 <HAL_ADC_GetValue>
 8000516:	6078      	str	r0, [r7, #4]
	  // Map the ADC Conversion To DAC out
	  value_dac = value_adc;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	603b      	str	r3, [r7, #0]
	  // Set the DAC out
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value_dac);
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	2200      	movs	r2, #0
 8000520:	2100      	movs	r1, #0
 8000522:	4803      	ldr	r0, [pc, #12]	; (8000530 <main+0x64>)
 8000524:	f002 f856 	bl	80025d4 <HAL_DAC_SetValue>
	  // Wait 1 ms
	  HAL_Delay(1);
 8000528:	2001      	movs	r0, #1
 800052a:	f000 fba3 	bl	8000c74 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 800052e:	e7e8      	b.n	8000502 <main+0x36>
 8000530:	2000008c 	.word	0x2000008c
 8000534:	20000028 	.word	0x20000028

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b096      	sub	sp, #88	; 0x58
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0314 	add.w	r3, r7, #20
 8000542:	2244      	movs	r2, #68	; 0x44
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f004 fb40 	bl	8004bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	463b      	mov	r3, r7
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800055a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800055e:	f002 fb49 	bl	8002bf4 <HAL_PWREx_ControlVoltageScaling>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000568:	f000 f976 	bl	8000858 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056c:	2302      	movs	r3, #2
 800056e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000570:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000574:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000576:	2310      	movs	r3, #16
 8000578:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057a:	2302      	movs	r3, #2
 800057c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800057e:	2302      	movs	r3, #2
 8000580:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000582:	2301      	movs	r3, #1
 8000584:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000586:	230a      	movs	r3, #10
 8000588:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800058a:	2307      	movs	r3, #7
 800058c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800058e:	2302      	movs	r3, #2
 8000590:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000592:	2302      	movs	r3, #2
 8000594:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	4618      	mov	r0, r3
 800059c:	f002 fb80 	bl	8002ca0 <HAL_RCC_OscConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005a6:	f000 f957 	bl	8000858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005aa:	230f      	movs	r3, #15
 80005ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ae:	2303      	movs	r3, #3
 80005b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005be:	463b      	mov	r3, r7
 80005c0:	2104      	movs	r1, #4
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 ff48 	bl	8003458 <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ce:	f000 f943 	bl	8000858 <Error_Handler>
  }
}
 80005d2:	bf00      	nop
 80005d4:	3758      	adds	r7, #88	; 0x58
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	; 0x28
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]
 80005fc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005fe:	4b2f      	ldr	r3, [pc, #188]	; (80006bc <MX_ADC1_Init+0xe0>)
 8000600:	4a2f      	ldr	r2, [pc, #188]	; (80006c0 <MX_ADC1_Init+0xe4>)
 8000602:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000604:	4b2d      	ldr	r3, [pc, #180]	; (80006bc <MX_ADC1_Init+0xe0>)
 8000606:	2200      	movs	r2, #0
 8000608:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060a:	4b2c      	ldr	r3, [pc, #176]	; (80006bc <MX_ADC1_Init+0xe0>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000610:	4b2a      	ldr	r3, [pc, #168]	; (80006bc <MX_ADC1_Init+0xe0>)
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000616:	4b29      	ldr	r3, [pc, #164]	; (80006bc <MX_ADC1_Init+0xe0>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800061c:	4b27      	ldr	r3, [pc, #156]	; (80006bc <MX_ADC1_Init+0xe0>)
 800061e:	2204      	movs	r2, #4
 8000620:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000622:	4b26      	ldr	r3, [pc, #152]	; (80006bc <MX_ADC1_Init+0xe0>)
 8000624:	2200      	movs	r2, #0
 8000626:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000628:	4b24      	ldr	r3, [pc, #144]	; (80006bc <MX_ADC1_Init+0xe0>)
 800062a:	2200      	movs	r2, #0
 800062c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800062e:	4b23      	ldr	r3, [pc, #140]	; (80006bc <MX_ADC1_Init+0xe0>)
 8000630:	2201      	movs	r2, #1
 8000632:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000634:	4b21      	ldr	r3, [pc, #132]	; (80006bc <MX_ADC1_Init+0xe0>)
 8000636:	2200      	movs	r2, #0
 8000638:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800063c:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <MX_ADC1_Init+0xe0>)
 800063e:	2200      	movs	r2, #0
 8000640:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000642:	4b1e      	ldr	r3, [pc, #120]	; (80006bc <MX_ADC1_Init+0xe0>)
 8000644:	2200      	movs	r2, #0
 8000646:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000648:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <MX_ADC1_Init+0xe0>)
 800064a:	2200      	movs	r2, #0
 800064c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000650:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <MX_ADC1_Init+0xe0>)
 8000652:	2200      	movs	r2, #0
 8000654:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000656:	4b19      	ldr	r3, [pc, #100]	; (80006bc <MX_ADC1_Init+0xe0>)
 8000658:	2200      	movs	r2, #0
 800065a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800065e:	4817      	ldr	r0, [pc, #92]	; (80006bc <MX_ADC1_Init+0xe0>)
 8000660:	f000 fd36 	bl	80010d0 <HAL_ADC_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800066a:	f000 f8f5 	bl	8000858 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	4619      	mov	r1, r3
 8000678:	4810      	ldr	r0, [pc, #64]	; (80006bc <MX_ADC1_Init+0xe0>)
 800067a:	f001 fda7 	bl	80021cc <HAL_ADCEx_MultiModeConfigChannel>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000684:	f000 f8e8 	bl	8000858 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000688:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_ADC1_Init+0xe8>)
 800068a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800068c:	2306      	movs	r3, #6
 800068e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000694:	237f      	movs	r3, #127	; 0x7f
 8000696:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000698:	2304      	movs	r3, #4
 800069a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	4619      	mov	r1, r3
 80006a4:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_ADC1_Init+0xe0>)
 80006a6:	f001 f809 	bl	80016bc <HAL_ADC_ConfigChannel>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80006b0:	f000 f8d2 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	3728      	adds	r7, #40	; 0x28
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000028 	.word	0x20000028
 80006c0:	50040000 	.word	0x50040000
 80006c4:	14f00020 	.word	0x14f00020

080006c8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	; 0x28
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	2224      	movs	r2, #36	; 0x24
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f004 fa79 	bl	8004bcc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80006da:	4b12      	ldr	r3, [pc, #72]	; (8000724 <MX_DAC1_Init+0x5c>)
 80006dc:	4a12      	ldr	r2, [pc, #72]	; (8000728 <MX_DAC1_Init+0x60>)
 80006de:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80006e0:	4810      	ldr	r0, [pc, #64]	; (8000724 <MX_DAC1_Init+0x5c>)
 80006e2:	f001 ff08 	bl	80024f6 <HAL_DAC_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80006ec:	f000 f8b4 	bl	8000858 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2200      	movs	r2, #0
 8000708:	4619      	mov	r1, r3
 800070a:	4806      	ldr	r0, [pc, #24]	; (8000724 <MX_DAC1_Init+0x5c>)
 800070c:	f001 ff87 	bl	800261e <HAL_DAC_ConfigChannel>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000716:	f000 f89f 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	3728      	adds	r7, #40	; 0x28
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	2000008c 	.word	0x2000008c
 8000728:	40007400 	.word	0x40007400

0800072c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_USART2_UART_Init+0x58>)
 8000732:	4a15      	ldr	r2, [pc, #84]	; (8000788 <MX_USART2_UART_Init+0x5c>)
 8000734:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000736:	4b13      	ldr	r3, [pc, #76]	; (8000784 <MX_USART2_UART_Init+0x58>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_USART2_UART_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_USART2_UART_Init+0x58>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_USART2_UART_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_USART2_UART_Init+0x58>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_USART2_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_USART2_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MX_USART2_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_USART2_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_USART2_UART_Init+0x58>)
 8000770:	f003 fd52 	bl	8004218 <HAL_UART_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800077a:	f000 f86d 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200000a0 	.word	0x200000a0
 8000788:	40004400 	.word	0x40004400

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	; 0x28
 8000790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a2:	4b2b      	ldr	r3, [pc, #172]	; (8000850 <MX_GPIO_Init+0xc4>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	4a2a      	ldr	r2, [pc, #168]	; (8000850 <MX_GPIO_Init+0xc4>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ae:	4b28      	ldr	r3, [pc, #160]	; (8000850 <MX_GPIO_Init+0xc4>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ba:	4b25      	ldr	r3, [pc, #148]	; (8000850 <MX_GPIO_Init+0xc4>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	4a24      	ldr	r2, [pc, #144]	; (8000850 <MX_GPIO_Init+0xc4>)
 80007c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c6:	4b22      	ldr	r3, [pc, #136]	; (8000850 <MX_GPIO_Init+0xc4>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <MX_GPIO_Init+0xc4>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	4a1e      	ldr	r2, [pc, #120]	; (8000850 <MX_GPIO_Init+0xc4>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007de:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <MX_GPIO_Init+0xc4>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	4b19      	ldr	r3, [pc, #100]	; (8000850 <MX_GPIO_Init+0xc4>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	4a18      	ldr	r2, [pc, #96]	; (8000850 <MX_GPIO_Init+0xc4>)
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f6:	4b16      	ldr	r3, [pc, #88]	; (8000850 <MX_GPIO_Init+0xc4>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	f003 0302 	and.w	r3, r3, #2
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2120      	movs	r1, #32
 8000806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080a:	f002 f9cd 	bl	8002ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800080e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000814:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4619      	mov	r1, r3
 8000824:	480b      	ldr	r0, [pc, #44]	; (8000854 <MX_GPIO_Init+0xc8>)
 8000826:	f002 f815 	bl	8002854 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800082a:	2320      	movs	r3, #32
 800082c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4619      	mov	r1, r3
 8000840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000844:	f002 f806 	bl	8002854 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000848:	bf00      	nop
 800084a:	3728      	adds	r7, #40	; 0x28
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40021000 	.word	0x40021000
 8000854:	48000800 	.word	0x48000800

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	e7fe      	b.n	8000860 <Error_Handler+0x8>
	...

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <HAL_MspInit+0x44>)
 800086c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800086e:	4a0e      	ldr	r2, [pc, #56]	; (80008a8 <HAL_MspInit+0x44>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6613      	str	r3, [r2, #96]	; 0x60
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <HAL_MspInit+0x44>)
 8000878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <HAL_MspInit+0x44>)
 8000884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000886:	4a08      	ldr	r2, [pc, #32]	; (80008a8 <HAL_MspInit+0x44>)
 8000888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088c:	6593      	str	r3, [r2, #88]	; 0x58
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <HAL_MspInit+0x44>)
 8000890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	40021000 	.word	0x40021000

080008ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b0ac      	sub	sp, #176	; 0xb0
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2288      	movs	r2, #136	; 0x88
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f004 f97d 	bl	8004bcc <memset>
  if(hadc->Instance==ADC1)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a27      	ldr	r2, [pc, #156]	; (8000974 <HAL_ADC_MspInit+0xc8>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d147      	bne.n	800096c <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008e0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80008e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80008ea:	2302      	movs	r3, #2
 80008ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80008ee:	2301      	movs	r3, #1
 80008f0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80008f2:	2308      	movs	r3, #8
 80008f4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80008f6:	2307      	movs	r3, #7
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80008fa:	2302      	movs	r3, #2
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80008fe:	2302      	movs	r3, #2
 8000900:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000902:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000906:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4618      	mov	r0, r3
 800090e:	f002 ffc7 	bl	80038a0 <HAL_RCCEx_PeriphCLKConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000918:	f7ff ff9e 	bl	8000858 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800091c:	4b16      	ldr	r3, [pc, #88]	; (8000978 <HAL_ADC_MspInit+0xcc>)
 800091e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000920:	4a15      	ldr	r2, [pc, #84]	; (8000978 <HAL_ADC_MspInit+0xcc>)
 8000922:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000926:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <HAL_ADC_MspInit+0xcc>)
 800092a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000934:	4b10      	ldr	r3, [pc, #64]	; (8000978 <HAL_ADC_MspInit+0xcc>)
 8000936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000938:	4a0f      	ldr	r2, [pc, #60]	; (8000978 <HAL_ADC_MspInit+0xcc>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000940:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <HAL_ADC_MspInit+0xcc>)
 8000942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000944:	f003 0301 	and.w	r3, r3, #1
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800094c:	2301      	movs	r3, #1
 800094e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000952:	230b      	movs	r3, #11
 8000954:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000962:	4619      	mov	r1, r3
 8000964:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000968:	f001 ff74 	bl	8002854 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800096c:	bf00      	nop
 800096e:	37b0      	adds	r7, #176	; 0xb0
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	50040000 	.word	0x50040000
 8000978:	40021000 	.word	0x40021000

0800097c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	; 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a15      	ldr	r2, [pc, #84]	; (80009f0 <HAL_DAC_MspInit+0x74>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d124      	bne.n	80009e8 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <HAL_DAC_MspInit+0x78>)
 80009a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a2:	4a14      	ldr	r2, [pc, #80]	; (80009f4 <HAL_DAC_MspInit+0x78>)
 80009a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80009a8:	6593      	str	r3, [r2, #88]	; 0x58
 80009aa:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <HAL_DAC_MspInit+0x78>)
 80009ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <HAL_DAC_MspInit+0x78>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	4a0e      	ldr	r2, [pc, #56]	; (80009f4 <HAL_DAC_MspInit+0x78>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <HAL_DAC_MspInit+0x78>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009ce:	2310      	movs	r3, #16
 80009d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009d2:	2303      	movs	r3, #3
 80009d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	4619      	mov	r1, r3
 80009e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e4:	f001 ff36 	bl	8002854 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80009e8:	bf00      	nop
 80009ea:	3728      	adds	r7, #40	; 0x28
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40007400 	.word	0x40007400
 80009f4:	40021000 	.word	0x40021000

080009f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b0ac      	sub	sp, #176	; 0xb0
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	2288      	movs	r2, #136	; 0x88
 8000a16:	2100      	movs	r1, #0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f004 f8d7 	bl	8004bcc <memset>
  if(huart->Instance==USART2)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a21      	ldr	r2, [pc, #132]	; (8000aa8 <HAL_UART_MspInit+0xb0>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d13b      	bne.n	8000aa0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4618      	mov	r0, r3
 8000a36:	f002 ff33 	bl	80038a0 <HAL_RCCEx_PeriphCLKConfig>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a40:	f7ff ff0a 	bl	8000858 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a44:	4b19      	ldr	r3, [pc, #100]	; (8000aac <HAL_UART_MspInit+0xb4>)
 8000a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a48:	4a18      	ldr	r2, [pc, #96]	; (8000aac <HAL_UART_MspInit+0xb4>)
 8000a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a4e:	6593      	str	r3, [r2, #88]	; 0x58
 8000a50:	4b16      	ldr	r3, [pc, #88]	; (8000aac <HAL_UART_MspInit+0xb4>)
 8000a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5c:	4b13      	ldr	r3, [pc, #76]	; (8000aac <HAL_UART_MspInit+0xb4>)
 8000a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a60:	4a12      	ldr	r2, [pc, #72]	; (8000aac <HAL_UART_MspInit+0xb4>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a68:	4b10      	ldr	r3, [pc, #64]	; (8000aac <HAL_UART_MspInit+0xb4>)
 8000a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a74:	230c      	movs	r3, #12
 8000a76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a86:	2303      	movs	r3, #3
 8000a88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a8c:	2307      	movs	r3, #7
 8000a8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a92:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a96:	4619      	mov	r1, r3
 8000a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9c:	f001 feda 	bl	8002854 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aa0:	bf00      	nop
 8000aa2:	37b0      	adds	r7, #176	; 0xb0
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40004400 	.word	0x40004400
 8000aac:	40021000 	.word	0x40021000

08000ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <NMI_Handler+0x4>

08000ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <HardFault_Handler+0x4>

08000abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <MemManage_Handler+0x4>

08000ac2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <BusFault_Handler+0x4>

08000ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <UsageFault_Handler+0x4>

08000ace <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000afc:	f000 f89a 	bl	8000c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <SystemInit+0x20>)
 8000b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b0e:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <SystemInit+0x20>)
 8000b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b60 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b2c:	f7ff ffea 	bl	8000b04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b30:	480c      	ldr	r0, [pc, #48]	; (8000b64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b32:	490d      	ldr	r1, [pc, #52]	; (8000b68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b34:	4a0d      	ldr	r2, [pc, #52]	; (8000b6c <LoopForever+0xe>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b38:	e002      	b.n	8000b40 <LoopCopyDataInit>

08000b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3e:	3304      	adds	r3, #4

08000b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b44:	d3f9      	bcc.n	8000b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b46:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b48:	4c0a      	ldr	r4, [pc, #40]	; (8000b74 <LoopForever+0x16>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b4c:	e001      	b.n	8000b52 <LoopFillZerobss>

08000b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b50:	3204      	adds	r2, #4

08000b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b54:	d3fb      	bcc.n	8000b4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b56:	f004 f815 	bl	8004b84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b5a:	f7ff fcb7 	bl	80004cc <main>

08000b5e <LoopForever>:

LoopForever:
    b LoopForever
 8000b5e:	e7fe      	b.n	8000b5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b60:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b68:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b6c:	08004c4c 	.word	0x08004c4c
  ldr r2, =_sbss
 8000b70:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b74:	20000128 	.word	0x20000128

08000b78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b78:	e7fe      	b.n	8000b78 <ADC1_2_IRQHandler>
	...

08000b7c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b82:	2300      	movs	r3, #0
 8000b84:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b86:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <HAL_Init+0x3c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a0b      	ldr	r2, [pc, #44]	; (8000bb8 <HAL_Init+0x3c>)
 8000b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b90:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b92:	2003      	movs	r0, #3
 8000b94:	f001 fc7c 	bl	8002490 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f000 f80f 	bl	8000bbc <HAL_InitTick>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d002      	beq.n	8000baa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	71fb      	strb	r3, [r7, #7]
 8000ba8:	e001      	b.n	8000bae <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000baa:	f7ff fe5b 	bl	8000864 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bae:	79fb      	ldrb	r3, [r7, #7]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40022000 	.word	0x40022000

08000bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bc8:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <HAL_InitTick+0x6c>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d023      	beq.n	8000c18 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bd0:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <HAL_InitTick+0x70>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <HAL_InitTick+0x6c>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be6:	4618      	mov	r0, r3
 8000be8:	f001 fc79 	bl	80024de <HAL_SYSTICK_Config>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d10f      	bne.n	8000c12 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2b0f      	cmp	r3, #15
 8000bf6:	d809      	bhi.n	8000c0c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	f001 fc51 	bl	80024a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c04:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <HAL_InitTick+0x74>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6013      	str	r3, [r2, #0]
 8000c0a:	e007      	b.n	8000c1c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	73fb      	strb	r3, [r7, #15]
 8000c10:	e004      	b.n	8000c1c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	73fb      	strb	r3, [r7, #15]
 8000c16:	e001      	b.n	8000c1c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000008 	.word	0x20000008
 8000c2c:	20000000 	.word	0x20000000
 8000c30:	20000004 	.word	0x20000004

08000c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_IncTick+0x20>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_IncTick+0x24>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <HAL_IncTick+0x24>)
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000008 	.word	0x20000008
 8000c58:	20000124 	.word	0x20000124

08000c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <HAL_GetTick+0x14>)
 8000c62:	681b      	ldr	r3, [r3, #0]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	20000124 	.word	0x20000124

08000c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c7c:	f7ff ffee 	bl	8000c5c <HAL_GetTick>
 8000c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c8c:	d005      	beq.n	8000c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <HAL_Delay+0x44>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4413      	add	r3, r2
 8000c98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c9a:	bf00      	nop
 8000c9c:	f7ff ffde 	bl	8000c5c <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d8f7      	bhi.n	8000c9c <HAL_Delay+0x28>
  {
  }
}
 8000cac:	bf00      	nop
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000008 	.word	0x20000008

08000cbc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	431a      	orrs	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
 8000cea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	431a      	orrs	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b087      	sub	sp, #28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
 8000d30:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	3360      	adds	r3, #96	; 0x60
 8000d36:	461a      	mov	r2, r3
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	4413      	add	r3, r2
 8000d3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <LL_ADC_SetOffset+0x44>)
 8000d46:	4013      	ands	r3, r2
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000d4e:	683a      	ldr	r2, [r7, #0]
 8000d50:	430a      	orrs	r2, r1
 8000d52:	4313      	orrs	r3, r2
 8000d54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000d5c:	bf00      	nop
 8000d5e:	371c      	adds	r7, #28
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	03fff000 	.word	0x03fff000

08000d6c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3360      	adds	r3, #96	; 0x60
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	4413      	add	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b087      	sub	sp, #28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	3360      	adds	r3, #96	; 0x60
 8000da8:	461a      	mov	r2, r3
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	4413      	add	r3, r2
 8000db0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	431a      	orrs	r2, r3
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000dc2:	bf00      	nop
 8000dc4:	371c      	adds	r7, #28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d101      	bne.n	8000de6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000de2:	2301      	movs	r3, #1
 8000de4:	e000      	b.n	8000de8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000de6:	2300      	movs	r3, #0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b087      	sub	sp, #28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	3330      	adds	r3, #48	; 0x30
 8000e04:	461a      	mov	r2, r3
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	f003 030c 	and.w	r3, r3, #12
 8000e10:	4413      	add	r3, r2
 8000e12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	f003 031f 	and.w	r3, r3, #31
 8000e1e:	211f      	movs	r1, #31
 8000e20:	fa01 f303 	lsl.w	r3, r1, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	401a      	ands	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	0e9b      	lsrs	r3, r3, #26
 8000e2c:	f003 011f 	and.w	r1, r3, #31
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	f003 031f 	and.w	r3, r3, #31
 8000e36:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3a:	431a      	orrs	r2, r3
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e40:	bf00      	nop
 8000e42:	371c      	adds	r7, #28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b087      	sub	sp, #28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	3314      	adds	r3, #20
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	0e5b      	lsrs	r3, r3, #25
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	f003 0304 	and.w	r3, r3, #4
 8000e68:	4413      	add	r3, r2
 8000e6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	0d1b      	lsrs	r3, r3, #20
 8000e74:	f003 031f 	and.w	r3, r3, #31
 8000e78:	2107      	movs	r1, #7
 8000e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	401a      	ands	r2, r3
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	0d1b      	lsrs	r3, r3, #20
 8000e86:	f003 031f 	and.w	r3, r3, #31
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e90:	431a      	orrs	r2, r3
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000e96:	bf00      	nop
 8000e98:	371c      	adds	r7, #28
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
	...

08000ea4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f003 0318 	and.w	r3, r3, #24
 8000ec6:	4908      	ldr	r1, [pc, #32]	; (8000ee8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000ec8:	40d9      	lsrs	r1, r3
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	400b      	ands	r3, r1
 8000ece:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ed2:	431a      	orrs	r2, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000eda:	bf00      	nop
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	0007ffff 	.word	0x0007ffff

08000eec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	f003 031f 	and.w	r3, r3, #31
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000f34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	6093      	str	r3, [r2, #8]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f5c:	d101      	bne.n	8000f62 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e000      	b.n	8000f64 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f62:	2300      	movs	r3, #0
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000f80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000fac:	d101      	bne.n	8000fb2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e000      	b.n	8000fb4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000fd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fd4:	f043 0201 	orr.w	r2, r3, #1
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000ff8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ffc:	f043 0202 	orr.w	r2, r3, #2
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	2b01      	cmp	r3, #1
 8001022:	d101      	bne.n	8001028 <LL_ADC_IsEnabled+0x18>
 8001024:	2301      	movs	r3, #1
 8001026:	e000      	b.n	800102a <LL_ADC_IsEnabled+0x1a>
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001036:	b480      	push	{r7}
 8001038:	b083      	sub	sp, #12
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	2b02      	cmp	r3, #2
 8001048:	d101      	bne.n	800104e <LL_ADC_IsDisableOngoing+0x18>
 800104a:	2301      	movs	r3, #1
 800104c:	e000      	b.n	8001050 <LL_ADC_IsDisableOngoing+0x1a>
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800106c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001070:	f043 0204 	orr.w	r2, r3, #4
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	f003 0304 	and.w	r3, r3, #4
 8001094:	2b04      	cmp	r3, #4
 8001096:	d101      	bne.n	800109c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001098:	2301      	movs	r3, #1
 800109a:	e000      	b.n	800109e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f003 0308 	and.w	r3, r3, #8
 80010ba:	2b08      	cmp	r3, #8
 80010bc:	d101      	bne.n	80010c2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b089      	sub	sp, #36	; 0x24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010d8:	2300      	movs	r3, #0
 80010da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80010dc:	2300      	movs	r3, #0
 80010de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d101      	bne.n	80010ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e136      	b.n	8001358 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d109      	bne.n	800110c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff fbd7 	bl	80008ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff19 	bl	8000f48 <LL_ADC_IsDeepPowerDownEnabled>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d004      	beq.n	8001126 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff feff 	bl	8000f24 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff ff34 	bl	8000f98 <LL_ADC_IsInternalRegulatorEnabled>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d115      	bne.n	8001162 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ff18 	bl	8000f70 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001140:	4b87      	ldr	r3, [pc, #540]	; (8001360 <HAL_ADC_Init+0x290>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	099b      	lsrs	r3, r3, #6
 8001146:	4a87      	ldr	r2, [pc, #540]	; (8001364 <HAL_ADC_Init+0x294>)
 8001148:	fba2 2303 	umull	r2, r3, r2, r3
 800114c:	099b      	lsrs	r3, r3, #6
 800114e:	3301      	adds	r3, #1
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001154:	e002      	b.n	800115c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	3b01      	subs	r3, #1
 800115a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1f9      	bne.n	8001156 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff16 	bl	8000f98 <LL_ADC_IsInternalRegulatorEnabled>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d10d      	bne.n	800118e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001176:	f043 0210 	orr.w	r2, r3, #16
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001182:	f043 0201 	orr.w	r2, r3, #1
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff ff76 	bl	8001084 <LL_ADC_REG_IsConversionOngoing>
 8001198:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800119e:	f003 0310 	and.w	r3, r3, #16
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f040 80cf 	bne.w	8001346 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f040 80cb 	bne.w	8001346 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011b4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80011b8:	f043 0202 	orr.w	r2, r3, #2
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff23 	bl	8001010 <LL_ADC_IsEnabled>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d115      	bne.n	80011fc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80011d0:	4865      	ldr	r0, [pc, #404]	; (8001368 <HAL_ADC_Init+0x298>)
 80011d2:	f7ff ff1d 	bl	8001010 <LL_ADC_IsEnabled>
 80011d6:	4604      	mov	r4, r0
 80011d8:	4864      	ldr	r0, [pc, #400]	; (800136c <HAL_ADC_Init+0x29c>)
 80011da:	f7ff ff19 	bl	8001010 <LL_ADC_IsEnabled>
 80011de:	4603      	mov	r3, r0
 80011e0:	431c      	orrs	r4, r3
 80011e2:	4863      	ldr	r0, [pc, #396]	; (8001370 <HAL_ADC_Init+0x2a0>)
 80011e4:	f7ff ff14 	bl	8001010 <LL_ADC_IsEnabled>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4323      	orrs	r3, r4
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d105      	bne.n	80011fc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	4619      	mov	r1, r3
 80011f6:	485f      	ldr	r0, [pc, #380]	; (8001374 <HAL_ADC_Init+0x2a4>)
 80011f8:	f7ff fd60 	bl	8000cbc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	7e5b      	ldrb	r3, [r3, #25]
 8001200:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001206:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800120c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001212:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f893 3020 	ldrb.w	r3, [r3, #32]
 800121a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d106      	bne.n	8001238 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122e:	3b01      	subs	r3, #1
 8001230:	045b      	lsls	r3, r3, #17
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123c:	2b00      	cmp	r3, #0
 800123e:	d009      	beq.n	8001254 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001244:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4313      	orrs	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	68da      	ldr	r2, [r3, #12]
 800125a:	4b47      	ldr	r3, [pc, #284]	; (8001378 <HAL_ADC_Init+0x2a8>)
 800125c:	4013      	ands	r3, r2
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	6812      	ldr	r2, [r2, #0]
 8001262:	69b9      	ldr	r1, [r7, #24]
 8001264:	430b      	orrs	r3, r1
 8001266:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff09 	bl	8001084 <LL_ADC_REG_IsConversionOngoing>
 8001272:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff16 	bl	80010aa <LL_ADC_INJ_IsConversionOngoing>
 800127e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d13d      	bne.n	8001302 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d13a      	bne.n	8001302 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001290:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001298:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012a8:	f023 0302 	bic.w	r3, r3, #2
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	6812      	ldr	r2, [r2, #0]
 80012b0:	69b9      	ldr	r1, [r7, #24]
 80012b2:	430b      	orrs	r3, r1
 80012b4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d118      	bne.n	80012f2 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	691b      	ldr	r3, [r3, #16]
 80012c6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80012ca:	f023 0304 	bic.w	r3, r3, #4
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80012d6:	4311      	orrs	r1, r2
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80012dc:	4311      	orrs	r1, r2
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80012e2:	430a      	orrs	r2, r1
 80012e4:	431a      	orrs	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f042 0201 	orr.w	r2, r2, #1
 80012ee:	611a      	str	r2, [r3, #16]
 80012f0:	e007      	b.n	8001302 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	691a      	ldr	r2, [r3, #16]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f022 0201 	bic.w	r2, r2, #1
 8001300:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d10c      	bne.n	8001324 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	f023 010f 	bic.w	r1, r3, #15
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	69db      	ldr	r3, [r3, #28]
 8001318:	1e5a      	subs	r2, r3, #1
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	430a      	orrs	r2, r1
 8001320:	631a      	str	r2, [r3, #48]	; 0x30
 8001322:	e007      	b.n	8001334 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f022 020f 	bic.w	r2, r2, #15
 8001332:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001338:	f023 0303 	bic.w	r3, r3, #3
 800133c:	f043 0201 	orr.w	r2, r3, #1
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	655a      	str	r2, [r3, #84]	; 0x54
 8001344:	e007      	b.n	8001356 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800134a:	f043 0210 	orr.w	r2, r3, #16
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001356:	7ffb      	ldrb	r3, [r7, #31]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3724      	adds	r7, #36	; 0x24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd90      	pop	{r4, r7, pc}
 8001360:	20000000 	.word	0x20000000
 8001364:	053e2d63 	.word	0x053e2d63
 8001368:	50040000 	.word	0x50040000
 800136c:	50040100 	.word	0x50040100
 8001370:	50040200 	.word	0x50040200
 8001374:	50040300 	.word	0x50040300
 8001378:	fff0c007 	.word	0xfff0c007

0800137c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001384:	4857      	ldr	r0, [pc, #348]	; (80014e4 <HAL_ADC_Start+0x168>)
 8001386:	f7ff fdb1 	bl	8000eec <LL_ADC_GetMultimode>
 800138a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fe77 	bl	8001084 <LL_ADC_REG_IsConversionOngoing>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	f040 809c 	bne.w	80014d6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d101      	bne.n	80013ac <HAL_ADC_Start+0x30>
 80013a8:	2302      	movs	r3, #2
 80013aa:	e097      	b.n	80014dc <HAL_ADC_Start+0x160>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2201      	movs	r2, #1
 80013b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f000 fd71 	bl	8001e9c <ADC_Enable>
 80013ba:	4603      	mov	r3, r0
 80013bc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80013be:	7dfb      	ldrb	r3, [r7, #23]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f040 8083 	bne.w	80014cc <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80013ce:	f023 0301 	bic.w	r3, r3, #1
 80013d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a42      	ldr	r2, [pc, #264]	; (80014e8 <HAL_ADC_Start+0x16c>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d002      	beq.n	80013ea <HAL_ADC_Start+0x6e>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	e000      	b.n	80013ec <HAL_ADC_Start+0x70>
 80013ea:	4b40      	ldr	r3, [pc, #256]	; (80014ec <HAL_ADC_Start+0x170>)
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	6812      	ldr	r2, [r2, #0]
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d002      	beq.n	80013fa <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d105      	bne.n	8001406 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800140a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800140e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001412:	d106      	bne.n	8001422 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001418:	f023 0206 	bic.w	r2, r3, #6
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	659a      	str	r2, [r3, #88]	; 0x58
 8001420:	e002      	b.n	8001428 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	221c      	movs	r2, #28
 800142e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a2a      	ldr	r2, [pc, #168]	; (80014e8 <HAL_ADC_Start+0x16c>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d002      	beq.n	8001448 <HAL_ADC_Start+0xcc>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	e000      	b.n	800144a <HAL_ADC_Start+0xce>
 8001448:	4b28      	ldr	r3, [pc, #160]	; (80014ec <HAL_ADC_Start+0x170>)
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	6812      	ldr	r2, [r2, #0]
 800144e:	4293      	cmp	r3, r2
 8001450:	d008      	beq.n	8001464 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d005      	beq.n	8001464 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	2b05      	cmp	r3, #5
 800145c:	d002      	beq.n	8001464 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	2b09      	cmp	r3, #9
 8001462:	d114      	bne.n	800148e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d007      	beq.n	8001482 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001476:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800147a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fde8 	bl	800105c <LL_ADC_REG_StartConversion>
 800148c:	e025      	b.n	80014da <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001492:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a12      	ldr	r2, [pc, #72]	; (80014e8 <HAL_ADC_Start+0x16c>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d002      	beq.n	80014aa <HAL_ADC_Start+0x12e>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	e000      	b.n	80014ac <HAL_ADC_Start+0x130>
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <HAL_ADC_Start+0x170>)
 80014ac:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d00f      	beq.n	80014da <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	655a      	str	r2, [r3, #84]	; 0x54
 80014ca:	e006      	b.n	80014da <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80014d4:	e001      	b.n	80014da <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80014d6:	2302      	movs	r3, #2
 80014d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80014da:	7dfb      	ldrb	r3, [r7, #23]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	50040300 	.word	0x50040300
 80014e8:	50040100 	.word	0x50040100
 80014ec:	50040000 	.word	0x50040000

080014f0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80014fa:	4866      	ldr	r0, [pc, #408]	; (8001694 <HAL_ADC_PollForConversion+0x1a4>)
 80014fc:	f7ff fcf6 	bl	8000eec <LL_ADC_GetMultimode>
 8001500:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	2b08      	cmp	r3, #8
 8001508:	d102      	bne.n	8001510 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800150a:	2308      	movs	r3, #8
 800150c:	61fb      	str	r3, [r7, #28]
 800150e:	e02a      	b.n	8001566 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d005      	beq.n	8001522 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	2b05      	cmp	r3, #5
 800151a:	d002      	beq.n	8001522 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	2b09      	cmp	r3, #9
 8001520:	d111      	bne.n	8001546 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	2b00      	cmp	r3, #0
 800152e:	d007      	beq.n	8001540 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001534:	f043 0220 	orr.w	r2, r3, #32
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e0a4      	b.n	800168a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001540:	2304      	movs	r3, #4
 8001542:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001544:	e00f      	b.n	8001566 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001546:	4853      	ldr	r0, [pc, #332]	; (8001694 <HAL_ADC_PollForConversion+0x1a4>)
 8001548:	f7ff fcde 	bl	8000f08 <LL_ADC_GetMultiDMATransfer>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d007      	beq.n	8001562 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001556:	f043 0220 	orr.w	r2, r3, #32
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e093      	b.n	800168a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001562:	2304      	movs	r3, #4
 8001564:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001566:	f7ff fb79 	bl	8000c5c <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800156c:	e021      	b.n	80015b2 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001574:	d01d      	beq.n	80015b2 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001576:	f7ff fb71 	bl	8000c5c <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	d302      	bcc.n	800158c <HAL_ADC_PollForConversion+0x9c>
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d112      	bne.n	80015b2 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	4013      	ands	r3, r2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10b      	bne.n	80015b2 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800159e:	f043 0204 	orr.w	r2, r3, #4
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e06b      	b.n	800168a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	4013      	ands	r3, r2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0d6      	beq.n	800156e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fbfc 	bl	8000dce <LL_ADC_REG_IsTriggerSourceSWStart>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d01c      	beq.n	8001616 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	7e5b      	ldrb	r3, [r3, #25]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d118      	bne.n	8001616 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	2b08      	cmp	r3, #8
 80015f0:	d111      	bne.n	8001616 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001602:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d105      	bne.n	8001616 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160e:	f043 0201 	orr.w	r2, r3, #1
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a1f      	ldr	r2, [pc, #124]	; (8001698 <HAL_ADC_PollForConversion+0x1a8>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d002      	beq.n	8001626 <HAL_ADC_PollForConversion+0x136>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	e000      	b.n	8001628 <HAL_ADC_PollForConversion+0x138>
 8001626:	4b1d      	ldr	r3, [pc, #116]	; (800169c <HAL_ADC_PollForConversion+0x1ac>)
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	6812      	ldr	r2, [r2, #0]
 800162c:	4293      	cmp	r3, r2
 800162e:	d008      	beq.n	8001642 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d005      	beq.n	8001642 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	2b05      	cmp	r3, #5
 800163a:	d002      	beq.n	8001642 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	2b09      	cmp	r3, #9
 8001640:	d104      	bne.n	800164c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	61bb      	str	r3, [r7, #24]
 800164a:	e00c      	b.n	8001666 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a11      	ldr	r2, [pc, #68]	; (8001698 <HAL_ADC_PollForConversion+0x1a8>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d002      	beq.n	800165c <HAL_ADC_PollForConversion+0x16c>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	e000      	b.n	800165e <HAL_ADC_PollForConversion+0x16e>
 800165c:	4b0f      	ldr	r3, [pc, #60]	; (800169c <HAL_ADC_PollForConversion+0x1ac>)
 800165e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	2b08      	cmp	r3, #8
 800166a:	d104      	bne.n	8001676 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2208      	movs	r2, #8
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	e008      	b.n	8001688 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d103      	bne.n	8001688 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	220c      	movs	r2, #12
 8001686:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3720      	adds	r7, #32
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	50040300 	.word	0x50040300
 8001698:	50040100 	.word	0x50040100
 800169c:	50040000 	.word	0x50040000

080016a0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
	...

080016bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b0b6      	sub	sp, #216	; 0xd8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d101      	bne.n	80016de <HAL_ADC_ConfigChannel+0x22>
 80016da:	2302      	movs	r3, #2
 80016dc:	e3c7      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x7b2>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fcca 	bl	8001084 <LL_ADC_REG_IsConversionOngoing>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f040 83a8 	bne.w	8001e48 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b05      	cmp	r3, #5
 80016fe:	d824      	bhi.n	800174a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	3b02      	subs	r3, #2
 8001706:	2b03      	cmp	r3, #3
 8001708:	d81b      	bhi.n	8001742 <HAL_ADC_ConfigChannel+0x86>
 800170a:	a201      	add	r2, pc, #4	; (adr r2, 8001710 <HAL_ADC_ConfigChannel+0x54>)
 800170c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001710:	08001721 	.word	0x08001721
 8001714:	08001729 	.word	0x08001729
 8001718:	08001731 	.word	0x08001731
 800171c:	08001739 	.word	0x08001739
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	220c      	movs	r2, #12
 8001724:	605a      	str	r2, [r3, #4]
          break;
 8001726:	e011      	b.n	800174c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	2212      	movs	r2, #18
 800172c:	605a      	str	r2, [r3, #4]
          break;
 800172e:	e00d      	b.n	800174c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	2218      	movs	r2, #24
 8001734:	605a      	str	r2, [r3, #4]
          break;
 8001736:	e009      	b.n	800174c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800173e:	605a      	str	r2, [r3, #4]
          break;
 8001740:	e004      	b.n	800174c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	2206      	movs	r2, #6
 8001746:	605a      	str	r2, [r3, #4]
          break;
 8001748:	e000      	b.n	800174c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800174a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6818      	ldr	r0, [r3, #0]
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	6859      	ldr	r1, [r3, #4]
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	f7ff fb4b 	bl	8000df4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fc8e 	bl	8001084 <LL_ADC_REG_IsConversionOngoing>
 8001768:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fc9a 	bl	80010aa <LL_ADC_INJ_IsConversionOngoing>
 8001776:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800177a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800177e:	2b00      	cmp	r3, #0
 8001780:	f040 81a6 	bne.w	8001ad0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001784:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001788:	2b00      	cmp	r3, #0
 800178a:	f040 81a1 	bne.w	8001ad0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6818      	ldr	r0, [r3, #0]
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	6819      	ldr	r1, [r3, #0]
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	461a      	mov	r2, r3
 800179c:	f7ff fb56 	bl	8000e4c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	695a      	ldr	r2, [r3, #20]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	08db      	lsrs	r3, r3, #3
 80017ac:	f003 0303 	and.w	r3, r3, #3
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	2b04      	cmp	r3, #4
 80017c0:	d00a      	beq.n	80017d8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6818      	ldr	r0, [r3, #0]
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	6919      	ldr	r1, [r3, #16]
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80017d2:	f7ff faa7 	bl	8000d24 <LL_ADC_SetOffset>
 80017d6:	e17b      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2100      	movs	r1, #0
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fac4 	bl	8000d6c <LL_ADC_GetOffsetChannel>
 80017e4:	4603      	mov	r3, r0
 80017e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10a      	bne.n	8001804 <HAL_ADC_ConfigChannel+0x148>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2100      	movs	r1, #0
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fab9 	bl	8000d6c <LL_ADC_GetOffsetChannel>
 80017fa:	4603      	mov	r3, r0
 80017fc:	0e9b      	lsrs	r3, r3, #26
 80017fe:	f003 021f 	and.w	r2, r3, #31
 8001802:	e01e      	b.n	8001842 <HAL_ADC_ConfigChannel+0x186>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2100      	movs	r1, #0
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff faae 	bl	8000d6c <LL_ADC_GetOffsetChannel>
 8001810:	4603      	mov	r3, r0
 8001812:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001816:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800181a:	fa93 f3a3 	rbit	r3, r3
 800181e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001822:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001826:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800182a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001832:	2320      	movs	r3, #32
 8001834:	e004      	b.n	8001840 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001836:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800183a:	fab3 f383 	clz	r3, r3
 800183e:	b2db      	uxtb	r3, r3
 8001840:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800184a:	2b00      	cmp	r3, #0
 800184c:	d105      	bne.n	800185a <HAL_ADC_ConfigChannel+0x19e>
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	0e9b      	lsrs	r3, r3, #26
 8001854:	f003 031f 	and.w	r3, r3, #31
 8001858:	e018      	b.n	800188c <HAL_ADC_ConfigChannel+0x1d0>
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001862:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001866:	fa93 f3a3 	rbit	r3, r3
 800186a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800186e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001872:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001876:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800187e:	2320      	movs	r3, #32
 8001880:	e004      	b.n	800188c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001882:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001886:	fab3 f383 	clz	r3, r3
 800188a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800188c:	429a      	cmp	r2, r3
 800188e:	d106      	bne.n	800189e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2200      	movs	r2, #0
 8001896:	2100      	movs	r1, #0
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff fa7d 	bl	8000d98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2101      	movs	r1, #1
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fa61 	bl	8000d6c <LL_ADC_GetOffsetChannel>
 80018aa:	4603      	mov	r3, r0
 80018ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d10a      	bne.n	80018ca <HAL_ADC_ConfigChannel+0x20e>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2101      	movs	r1, #1
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fa56 	bl	8000d6c <LL_ADC_GetOffsetChannel>
 80018c0:	4603      	mov	r3, r0
 80018c2:	0e9b      	lsrs	r3, r3, #26
 80018c4:	f003 021f 	and.w	r2, r3, #31
 80018c8:	e01e      	b.n	8001908 <HAL_ADC_ConfigChannel+0x24c>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2101      	movs	r1, #1
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fa4b 	bl	8000d6c <LL_ADC_GetOffsetChannel>
 80018d6:	4603      	mov	r3, r0
 80018d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80018e0:	fa93 f3a3 	rbit	r3, r3
 80018e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80018e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80018ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80018f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80018f8:	2320      	movs	r3, #32
 80018fa:	e004      	b.n	8001906 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80018fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001900:	fab3 f383 	clz	r3, r3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001910:	2b00      	cmp	r3, #0
 8001912:	d105      	bne.n	8001920 <HAL_ADC_ConfigChannel+0x264>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	0e9b      	lsrs	r3, r3, #26
 800191a:	f003 031f 	and.w	r3, r3, #31
 800191e:	e018      	b.n	8001952 <HAL_ADC_ConfigChannel+0x296>
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001928:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800192c:	fa93 f3a3 	rbit	r3, r3
 8001930:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001934:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001938:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800193c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001944:	2320      	movs	r3, #32
 8001946:	e004      	b.n	8001952 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001948:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800194c:	fab3 f383 	clz	r3, r3
 8001950:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001952:	429a      	cmp	r2, r3
 8001954:	d106      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2200      	movs	r2, #0
 800195c:	2101      	movs	r1, #1
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fa1a 	bl	8000d98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2102      	movs	r1, #2
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff f9fe 	bl	8000d6c <LL_ADC_GetOffsetChannel>
 8001970:	4603      	mov	r3, r0
 8001972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10a      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x2d4>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2102      	movs	r1, #2
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff f9f3 	bl	8000d6c <LL_ADC_GetOffsetChannel>
 8001986:	4603      	mov	r3, r0
 8001988:	0e9b      	lsrs	r3, r3, #26
 800198a:	f003 021f 	and.w	r2, r3, #31
 800198e:	e01e      	b.n	80019ce <HAL_ADC_ConfigChannel+0x312>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2102      	movs	r1, #2
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff f9e8 	bl	8000d6c <LL_ADC_GetOffsetChannel>
 800199c:	4603      	mov	r3, r0
 800199e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019a6:	fa93 f3a3 	rbit	r3, r3
 80019aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80019ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80019b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80019b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80019be:	2320      	movs	r3, #32
 80019c0:	e004      	b.n	80019cc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80019c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019c6:	fab3 f383 	clz	r3, r3
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d105      	bne.n	80019e6 <HAL_ADC_ConfigChannel+0x32a>
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	0e9b      	lsrs	r3, r3, #26
 80019e0:	f003 031f 	and.w	r3, r3, #31
 80019e4:	e016      	b.n	8001a14 <HAL_ADC_ConfigChannel+0x358>
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80019f2:	fa93 f3a3 	rbit	r3, r3
 80019f6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80019f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80019fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80019fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001a06:	2320      	movs	r3, #32
 8001a08:	e004      	b.n	8001a14 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001a0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a0e:	fab3 f383 	clz	r3, r3
 8001a12:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d106      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2102      	movs	r1, #2
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff f9b9 	bl	8000d98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2103      	movs	r1, #3
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff f99d 	bl	8000d6c <LL_ADC_GetOffsetChannel>
 8001a32:	4603      	mov	r3, r0
 8001a34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d10a      	bne.n	8001a52 <HAL_ADC_ConfigChannel+0x396>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2103      	movs	r1, #3
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff f992 	bl	8000d6c <LL_ADC_GetOffsetChannel>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	0e9b      	lsrs	r3, r3, #26
 8001a4c:	f003 021f 	and.w	r2, r3, #31
 8001a50:	e017      	b.n	8001a82 <HAL_ADC_ConfigChannel+0x3c6>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2103      	movs	r1, #3
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff f987 	bl	8000d6c <LL_ADC_GetOffsetChannel>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a64:	fa93 f3a3 	rbit	r3, r3
 8001a68:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001a6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a6c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001a6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001a74:	2320      	movs	r3, #32
 8001a76:	e003      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001a78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a7a:	fab3 f383 	clz	r3, r3
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d105      	bne.n	8001a9a <HAL_ADC_ConfigChannel+0x3de>
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	0e9b      	lsrs	r3, r3, #26
 8001a94:	f003 031f 	and.w	r3, r3, #31
 8001a98:	e011      	b.n	8001abe <HAL_ADC_ConfigChannel+0x402>
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001aa2:	fa93 f3a3 	rbit	r3, r3
 8001aa6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001aa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001aaa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001ab2:	2320      	movs	r3, #32
 8001ab4:	e003      	b.n	8001abe <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ab8:	fab3 f383 	clz	r3, r3
 8001abc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d106      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2103      	movs	r1, #3
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff f964 	bl	8000d98 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff fa9b 	bl	8001010 <LL_ADC_IsEnabled>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f040 813f 	bne.w	8001d60 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6818      	ldr	r0, [r3, #0]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	6819      	ldr	r1, [r3, #0]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	461a      	mov	r2, r3
 8001af0:	f7ff f9d8 	bl	8000ea4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	4a8e      	ldr	r2, [pc, #568]	; (8001d34 <HAL_ADC_ConfigChannel+0x678>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	f040 8130 	bne.w	8001d60 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d10b      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x46c>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	0e9b      	lsrs	r3, r3, #26
 8001b16:	3301      	adds	r3, #1
 8001b18:	f003 031f 	and.w	r3, r3, #31
 8001b1c:	2b09      	cmp	r3, #9
 8001b1e:	bf94      	ite	ls
 8001b20:	2301      	movls	r3, #1
 8001b22:	2300      	movhi	r3, #0
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	e019      	b.n	8001b5c <HAL_ADC_ConfigChannel+0x4a0>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b30:	fa93 f3a3 	rbit	r3, r3
 8001b34:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001b36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b38:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001b3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001b40:	2320      	movs	r3, #32
 8001b42:	e003      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001b44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b46:	fab3 f383 	clz	r3, r3
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	f003 031f 	and.w	r3, r3, #31
 8001b52:	2b09      	cmp	r3, #9
 8001b54:	bf94      	ite	ls
 8001b56:	2301      	movls	r3, #1
 8001b58:	2300      	movhi	r3, #0
 8001b5a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d079      	beq.n	8001c54 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d107      	bne.n	8001b7c <HAL_ADC_ConfigChannel+0x4c0>
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	0e9b      	lsrs	r3, r3, #26
 8001b72:	3301      	adds	r3, #1
 8001b74:	069b      	lsls	r3, r3, #26
 8001b76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b7a:	e015      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x4ec>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b84:	fa93 f3a3 	rbit	r3, r3
 8001b88:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b8c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001b94:	2320      	movs	r3, #32
 8001b96:	e003      	b.n	8001ba0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001b98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b9a:	fab3 f383 	clz	r3, r3
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	069b      	lsls	r3, r3, #26
 8001ba4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d109      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x50c>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	0e9b      	lsrs	r3, r3, #26
 8001bba:	3301      	adds	r3, #1
 8001bbc:	f003 031f 	and.w	r3, r3, #31
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc6:	e017      	b.n	8001bf8 <HAL_ADC_ConfigChannel+0x53c>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bd0:	fa93 f3a3 	rbit	r3, r3
 8001bd4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bd8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d101      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001be0:	2320      	movs	r3, #32
 8001be2:	e003      	b.n	8001bec <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001be4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001be6:	fab3 f383 	clz	r3, r3
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	3301      	adds	r3, #1
 8001bee:	f003 031f 	and.w	r3, r3, #31
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf8:	ea42 0103 	orr.w	r1, r2, r3
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d10a      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x562>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	0e9b      	lsrs	r3, r3, #26
 8001c0e:	3301      	adds	r3, #1
 8001c10:	f003 021f 	and.w	r2, r3, #31
 8001c14:	4613      	mov	r3, r2
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	4413      	add	r3, r2
 8001c1a:	051b      	lsls	r3, r3, #20
 8001c1c:	e018      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x594>
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c26:	fa93 f3a3 	rbit	r3, r3
 8001c2a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001c36:	2320      	movs	r3, #32
 8001c38:	e003      	b.n	8001c42 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c3c:	fab3 f383 	clz	r3, r3
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	3301      	adds	r3, #1
 8001c44:	f003 021f 	and.w	r2, r3, #31
 8001c48:	4613      	mov	r3, r2
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	4413      	add	r3, r2
 8001c4e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c50:	430b      	orrs	r3, r1
 8001c52:	e080      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d107      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x5b4>
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	0e9b      	lsrs	r3, r3, #26
 8001c66:	3301      	adds	r3, #1
 8001c68:	069b      	lsls	r3, r3, #26
 8001c6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c6e:	e015      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x5e0>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c78:	fa93 f3a3 	rbit	r3, r3
 8001c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c80:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001c88:	2320      	movs	r3, #32
 8001c8a:	e003      	b.n	8001c94 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c8e:	fab3 f383 	clz	r3, r3
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	3301      	adds	r3, #1
 8001c96:	069b      	lsls	r3, r3, #26
 8001c98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d109      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x600>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	0e9b      	lsrs	r3, r3, #26
 8001cae:	3301      	adds	r3, #1
 8001cb0:	f003 031f 	and.w	r3, r3, #31
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cba:	e017      	b.n	8001cec <HAL_ADC_ConfigChannel+0x630>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	fa93 f3a3 	rbit	r3, r3
 8001cc8:	61fb      	str	r3, [r7, #28]
  return result;
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001cd4:	2320      	movs	r3, #32
 8001cd6:	e003      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	fab3 f383 	clz	r3, r3
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	f003 031f 	and.w	r3, r3, #31
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cec:	ea42 0103 	orr.w	r1, r2, r3
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d10d      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x65c>
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	0e9b      	lsrs	r3, r3, #26
 8001d02:	3301      	adds	r3, #1
 8001d04:	f003 021f 	and.w	r2, r3, #31
 8001d08:	4613      	mov	r3, r2
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	4413      	add	r3, r2
 8001d0e:	3b1e      	subs	r3, #30
 8001d10:	051b      	lsls	r3, r3, #20
 8001d12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d16:	e01d      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x698>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	fa93 f3a3 	rbit	r3, r3
 8001d24:	613b      	str	r3, [r7, #16]
  return result;
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d103      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001d30:	2320      	movs	r3, #32
 8001d32:	e005      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x684>
 8001d34:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	fab3 f383 	clz	r3, r3
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	3301      	adds	r3, #1
 8001d42:	f003 021f 	and.w	r2, r3, #31
 8001d46:	4613      	mov	r3, r2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3b1e      	subs	r3, #30
 8001d4e:	051b      	lsls	r3, r3, #20
 8001d50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d54:	430b      	orrs	r3, r1
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	6892      	ldr	r2, [r2, #8]
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f7ff f876 	bl	8000e4c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b44      	ldr	r3, [pc, #272]	; (8001e78 <HAL_ADC_ConfigChannel+0x7bc>)
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d07a      	beq.n	8001e62 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d6c:	4843      	ldr	r0, [pc, #268]	; (8001e7c <HAL_ADC_ConfigChannel+0x7c0>)
 8001d6e:	f7fe ffcb 	bl	8000d08 <LL_ADC_GetCommonPathInternalCh>
 8001d72:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a41      	ldr	r2, [pc, #260]	; (8001e80 <HAL_ADC_ConfigChannel+0x7c4>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d12c      	bne.n	8001dda <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d126      	bne.n	8001dda <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a3c      	ldr	r2, [pc, #240]	; (8001e84 <HAL_ADC_ConfigChannel+0x7c8>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d004      	beq.n	8001da0 <HAL_ADC_ConfigChannel+0x6e4>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a3b      	ldr	r2, [pc, #236]	; (8001e88 <HAL_ADC_ConfigChannel+0x7cc>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d15d      	bne.n	8001e5c <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001da0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001da4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001da8:	4619      	mov	r1, r3
 8001daa:	4834      	ldr	r0, [pc, #208]	; (8001e7c <HAL_ADC_ConfigChannel+0x7c0>)
 8001dac:	f7fe ff99 	bl	8000ce2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001db0:	4b36      	ldr	r3, [pc, #216]	; (8001e8c <HAL_ADC_ConfigChannel+0x7d0>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	099b      	lsrs	r3, r3, #6
 8001db6:	4a36      	ldr	r2, [pc, #216]	; (8001e90 <HAL_ADC_ConfigChannel+0x7d4>)
 8001db8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbc:	099b      	lsrs	r3, r3, #6
 8001dbe:	1c5a      	adds	r2, r3, #1
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	4413      	add	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001dca:	e002      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1f9      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001dd8:	e040      	b.n	8001e5c <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a2d      	ldr	r2, [pc, #180]	; (8001e94 <HAL_ADC_ConfigChannel+0x7d8>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d118      	bne.n	8001e16 <HAL_ADC_ConfigChannel+0x75a>
 8001de4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001de8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d112      	bne.n	8001e16 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a23      	ldr	r2, [pc, #140]	; (8001e84 <HAL_ADC_ConfigChannel+0x7c8>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d004      	beq.n	8001e04 <HAL_ADC_ConfigChannel+0x748>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a22      	ldr	r2, [pc, #136]	; (8001e88 <HAL_ADC_ConfigChannel+0x7cc>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d12d      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	481b      	ldr	r0, [pc, #108]	; (8001e7c <HAL_ADC_ConfigChannel+0x7c0>)
 8001e10:	f7fe ff67 	bl	8000ce2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e14:	e024      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a1f      	ldr	r2, [pc, #124]	; (8001e98 <HAL_ADC_ConfigChannel+0x7dc>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d120      	bne.n	8001e62 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d11a      	bne.n	8001e62 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a14      	ldr	r2, [pc, #80]	; (8001e84 <HAL_ADC_ConfigChannel+0x7c8>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d115      	bne.n	8001e62 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e3e:	4619      	mov	r1, r3
 8001e40:	480e      	ldr	r0, [pc, #56]	; (8001e7c <HAL_ADC_ConfigChannel+0x7c0>)
 8001e42:	f7fe ff4e 	bl	8000ce2 <LL_ADC_SetCommonPathInternalCh>
 8001e46:	e00c      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4c:	f043 0220 	orr.w	r2, r3, #32
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001e5a:	e002      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e5c:	bf00      	nop
 8001e5e:	e000      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e60:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e6a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	37d8      	adds	r7, #216	; 0xd8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	80080000 	.word	0x80080000
 8001e7c:	50040300 	.word	0x50040300
 8001e80:	c7520000 	.word	0xc7520000
 8001e84:	50040000 	.word	0x50040000
 8001e88:	50040200 	.word	0x50040200
 8001e8c:	20000000 	.word	0x20000000
 8001e90:	053e2d63 	.word	0x053e2d63
 8001e94:	cb840000 	.word	0xcb840000
 8001e98:	80000001 	.word	0x80000001

08001e9c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff f8af 	bl	8001010 <LL_ADC_IsEnabled>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d169      	bne.n	8001f8c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	4b36      	ldr	r3, [pc, #216]	; (8001f98 <ADC_Enable+0xfc>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00d      	beq.n	8001ee2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eca:	f043 0210 	orr.w	r2, r3, #16
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed6:	f043 0201 	orr.w	r2, r3, #1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e055      	b.n	8001f8e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff f86a 	bl	8000fc0 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001eec:	482b      	ldr	r0, [pc, #172]	; (8001f9c <ADC_Enable+0x100>)
 8001eee:	f7fe ff0b 	bl	8000d08 <LL_ADC_GetCommonPathInternalCh>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d013      	beq.n	8001f24 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001efc:	4b28      	ldr	r3, [pc, #160]	; (8001fa0 <ADC_Enable+0x104>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	099b      	lsrs	r3, r3, #6
 8001f02:	4a28      	ldr	r2, [pc, #160]	; (8001fa4 <ADC_Enable+0x108>)
 8001f04:	fba2 2303 	umull	r2, r3, r2, r3
 8001f08:	099b      	lsrs	r3, r3, #6
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	4413      	add	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001f16:	e002      	b.n	8001f1e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1f9      	bne.n	8001f18 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001f24:	f7fe fe9a 	bl	8000c5c <HAL_GetTick>
 8001f28:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f2a:	e028      	b.n	8001f7e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff f86d 	bl	8001010 <LL_ADC_IsEnabled>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d104      	bne.n	8001f46 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff f83d 	bl	8000fc0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f46:	f7fe fe89 	bl	8000c5c <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d914      	bls.n	8001f7e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d00d      	beq.n	8001f7e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f66:	f043 0210 	orr.w	r2, r3, #16
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f72:	f043 0201 	orr.w	r2, r3, #1
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e007      	b.n	8001f8e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d1cf      	bne.n	8001f2c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	8000003f 	.word	0x8000003f
 8001f9c:	50040300 	.word	0x50040300
 8001fa0:	20000000 	.word	0x20000000
 8001fa4:	053e2d63 	.word	0x053e2d63

08001fa8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff f83e 	bl	8001036 <LL_ADC_IsDisableOngoing>
 8001fba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff f825 	bl	8001010 <LL_ADC_IsEnabled>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d047      	beq.n	800205c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d144      	bne.n	800205c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 030d 	and.w	r3, r3, #13
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d10c      	bne.n	8001ffa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe ffff 	bl	8000fe8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2203      	movs	r2, #3
 8001ff0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ff2:	f7fe fe33 	bl	8000c5c <HAL_GetTick>
 8001ff6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001ff8:	e029      	b.n	800204e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffe:	f043 0210 	orr.w	r2, r3, #16
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200a:	f043 0201 	orr.w	r2, r3, #1
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e023      	b.n	800205e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002016:	f7fe fe21 	bl	8000c5c <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d914      	bls.n	800204e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00d      	beq.n	800204e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002036:	f043 0210 	orr.w	r2, r3, #16
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002042:	f043 0201 	orr.w	r2, r3, #1
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e007      	b.n	800205e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1dc      	bne.n	8002016 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <LL_ADC_IsEnabled>:
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b01      	cmp	r3, #1
 8002078:	d101      	bne.n	800207e <LL_ADC_IsEnabled+0x18>
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <LL_ADC_IsEnabled+0x1a>
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <LL_ADC_StartCalibration>:
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800209e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80020a8:	4313      	orrs	r3, r2
 80020aa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	609a      	str	r2, [r3, #8]
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <LL_ADC_IsCalibrationOnGoing>:
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80020ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020d2:	d101      	bne.n	80020d8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80020d4:	2301      	movs	r3, #1
 80020d6:	e000      	b.n	80020da <LL_ADC_IsCalibrationOnGoing+0x1c>
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <LL_ADC_REG_IsConversionOngoing>:
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d101      	bne.n	80020fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002116:	2300      	movs	r3, #0
 8002118:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002120:	2b01      	cmp	r3, #1
 8002122:	d101      	bne.n	8002128 <HAL_ADCEx_Calibration_Start+0x1c>
 8002124:	2302      	movs	r3, #2
 8002126:	e04d      	b.n	80021c4 <HAL_ADCEx_Calibration_Start+0xb8>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff ff39 	bl	8001fa8 <ADC_Disable>
 8002136:	4603      	mov	r3, r0
 8002138:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800213a:	7bfb      	ldrb	r3, [r7, #15]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d136      	bne.n	80021ae <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002144:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002148:	f023 0302 	bic.w	r3, r3, #2
 800214c:	f043 0202 	orr.w	r2, r3, #2
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6839      	ldr	r1, [r7, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff ff96 	bl	800208c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002160:	e014      	b.n	800218c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	3301      	adds	r3, #1
 8002166:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800216e:	d30d      	bcc.n	800218c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002174:	f023 0312 	bic.w	r3, r3, #18
 8002178:	f043 0210 	orr.w	r2, r3, #16
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e01b      	b.n	80021c4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ff94 	bl	80020be <LL_ADC_IsCalibrationOnGoing>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1e2      	bne.n	8002162 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a0:	f023 0303 	bic.w	r3, r3, #3
 80021a4:	f043 0201 	orr.w	r2, r3, #1
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	655a      	str	r2, [r3, #84]	; 0x54
 80021ac:	e005      	b.n	80021ba <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b2:	f043 0210 	orr.w	r2, r3, #16
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80021cc:	b590      	push	{r4, r7, lr}
 80021ce:	b09f      	sub	sp, #124	; 0x7c
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021d6:	2300      	movs	r3, #0
 80021d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d101      	bne.n	80021ea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e093      	b.n	8002312 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80021f2:	2300      	movs	r3, #0
 80021f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80021f6:	2300      	movs	r3, #0
 80021f8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a47      	ldr	r2, [pc, #284]	; (800231c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d102      	bne.n	800220a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002204:	4b46      	ldr	r3, [pc, #280]	; (8002320 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	e001      	b.n	800220e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800220a:	2300      	movs	r3, #0
 800220c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10b      	bne.n	800222c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002218:	f043 0220 	orr.w	r2, r3, #32
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e072      	b.n	8002312 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff ff59 	bl	80020e6 <LL_ADC_REG_IsConversionOngoing>
 8002234:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff ff53 	bl	80020e6 <LL_ADC_REG_IsConversionOngoing>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d154      	bne.n	80022f0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002246:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002248:	2b00      	cmp	r3, #0
 800224a:	d151      	bne.n	80022f0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800224c:	4b35      	ldr	r3, [pc, #212]	; (8002324 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800224e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d02c      	beq.n	80022b2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	6859      	ldr	r1, [r3, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800226a:	035b      	lsls	r3, r3, #13
 800226c:	430b      	orrs	r3, r1
 800226e:	431a      	orrs	r2, r3
 8002270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002272:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002274:	4829      	ldr	r0, [pc, #164]	; (800231c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002276:	f7ff fef6 	bl	8002066 <LL_ADC_IsEnabled>
 800227a:	4604      	mov	r4, r0
 800227c:	4828      	ldr	r0, [pc, #160]	; (8002320 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800227e:	f7ff fef2 	bl	8002066 <LL_ADC_IsEnabled>
 8002282:	4603      	mov	r3, r0
 8002284:	431c      	orrs	r4, r3
 8002286:	4828      	ldr	r0, [pc, #160]	; (8002328 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002288:	f7ff feed 	bl	8002066 <LL_ADC_IsEnabled>
 800228c:	4603      	mov	r3, r0
 800228e:	4323      	orrs	r3, r4
 8002290:	2b00      	cmp	r3, #0
 8002292:	d137      	bne.n	8002304 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800229c:	f023 030f 	bic.w	r3, r3, #15
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	6811      	ldr	r1, [r2, #0]
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	6892      	ldr	r2, [r2, #8]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	431a      	orrs	r2, r3
 80022ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ae:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80022b0:	e028      	b.n	8002304 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80022b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022bc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022be:	4817      	ldr	r0, [pc, #92]	; (800231c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80022c0:	f7ff fed1 	bl	8002066 <LL_ADC_IsEnabled>
 80022c4:	4604      	mov	r4, r0
 80022c6:	4816      	ldr	r0, [pc, #88]	; (8002320 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80022c8:	f7ff fecd 	bl	8002066 <LL_ADC_IsEnabled>
 80022cc:	4603      	mov	r3, r0
 80022ce:	431c      	orrs	r4, r3
 80022d0:	4815      	ldr	r0, [pc, #84]	; (8002328 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80022d2:	f7ff fec8 	bl	8002066 <LL_ADC_IsEnabled>
 80022d6:	4603      	mov	r3, r0
 80022d8:	4323      	orrs	r3, r4
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d112      	bne.n	8002304 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80022de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80022e6:	f023 030f 	bic.w	r3, r3, #15
 80022ea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80022ec:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80022ee:	e009      	b.n	8002304 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f4:	f043 0220 	orr.w	r2, r3, #32
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002302:	e000      	b.n	8002306 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002304:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800230e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002312:	4618      	mov	r0, r3
 8002314:	377c      	adds	r7, #124	; 0x7c
 8002316:	46bd      	mov	sp, r7
 8002318:	bd90      	pop	{r4, r7, pc}
 800231a:	bf00      	nop
 800231c:	50040000 	.word	0x50040000
 8002320:	50040100 	.word	0x50040100
 8002324:	50040300 	.word	0x50040300
 8002328:	50040200 	.word	0x50040200

0800232c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800233c:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <__NVIC_SetPriorityGrouping+0x44>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002348:	4013      	ands	r3, r2
 800234a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800235c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800235e:	4a04      	ldr	r2, [pc, #16]	; (8002370 <__NVIC_SetPriorityGrouping+0x44>)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	60d3      	str	r3, [r2, #12]
}
 8002364:	bf00      	nop
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002378:	4b04      	ldr	r3, [pc, #16]	; (800238c <__NVIC_GetPriorityGrouping+0x18>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	0a1b      	lsrs	r3, r3, #8
 800237e:	f003 0307 	and.w	r3, r3, #7
}
 8002382:	4618      	mov	r0, r3
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	6039      	str	r1, [r7, #0]
 800239a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800239c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	db0a      	blt.n	80023ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	490c      	ldr	r1, [pc, #48]	; (80023dc <__NVIC_SetPriority+0x4c>)
 80023aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ae:	0112      	lsls	r2, r2, #4
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	440b      	add	r3, r1
 80023b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023b8:	e00a      	b.n	80023d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	4908      	ldr	r1, [pc, #32]	; (80023e0 <__NVIC_SetPriority+0x50>)
 80023c0:	79fb      	ldrb	r3, [r7, #7]
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	3b04      	subs	r3, #4
 80023c8:	0112      	lsls	r2, r2, #4
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	440b      	add	r3, r1
 80023ce:	761a      	strb	r2, [r3, #24]
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	e000e100 	.word	0xe000e100
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b089      	sub	sp, #36	; 0x24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	f1c3 0307 	rsb	r3, r3, #7
 80023fe:	2b04      	cmp	r3, #4
 8002400:	bf28      	it	cs
 8002402:	2304      	movcs	r3, #4
 8002404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	3304      	adds	r3, #4
 800240a:	2b06      	cmp	r3, #6
 800240c:	d902      	bls.n	8002414 <NVIC_EncodePriority+0x30>
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	3b03      	subs	r3, #3
 8002412:	e000      	b.n	8002416 <NVIC_EncodePriority+0x32>
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002418:	f04f 32ff 	mov.w	r2, #4294967295
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43da      	mvns	r2, r3
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	401a      	ands	r2, r3
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800242c:	f04f 31ff 	mov.w	r1, #4294967295
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	fa01 f303 	lsl.w	r3, r1, r3
 8002436:	43d9      	mvns	r1, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800243c:	4313      	orrs	r3, r2
         );
}
 800243e:	4618      	mov	r0, r3
 8002440:	3724      	adds	r7, #36	; 0x24
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
	...

0800244c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3b01      	subs	r3, #1
 8002458:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800245c:	d301      	bcc.n	8002462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800245e:	2301      	movs	r3, #1
 8002460:	e00f      	b.n	8002482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002462:	4a0a      	ldr	r2, [pc, #40]	; (800248c <SysTick_Config+0x40>)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3b01      	subs	r3, #1
 8002468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800246a:	210f      	movs	r1, #15
 800246c:	f04f 30ff 	mov.w	r0, #4294967295
 8002470:	f7ff ff8e 	bl	8002390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002474:	4b05      	ldr	r3, [pc, #20]	; (800248c <SysTick_Config+0x40>)
 8002476:	2200      	movs	r2, #0
 8002478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800247a:	4b04      	ldr	r3, [pc, #16]	; (800248c <SysTick_Config+0x40>)
 800247c:	2207      	movs	r2, #7
 800247e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	e000e010 	.word	0xe000e010

08002490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f7ff ff47 	bl	800232c <__NVIC_SetPriorityGrouping>
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b086      	sub	sp, #24
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	4603      	mov	r3, r0
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	607a      	str	r2, [r7, #4]
 80024b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024b8:	f7ff ff5c 	bl	8002374 <__NVIC_GetPriorityGrouping>
 80024bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	68b9      	ldr	r1, [r7, #8]
 80024c2:	6978      	ldr	r0, [r7, #20]
 80024c4:	f7ff ff8e 	bl	80023e4 <NVIC_EncodePriority>
 80024c8:	4602      	mov	r2, r0
 80024ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ce:	4611      	mov	r1, r2
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff ff5d 	bl	8002390 <__NVIC_SetPriority>
}
 80024d6:	bf00      	nop
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff ffb0 	bl	800244c <SysTick_Config>
 80024ec:	4603      	mov	r3, r0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b082      	sub	sp, #8
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e014      	b.n	8002532 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	791b      	ldrb	r3, [r3, #4]
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d105      	bne.n	800251e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7fe fa2f 	bl	800097c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2202      	movs	r2, #2
 8002522:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
 8002542:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	795b      	ldrb	r3, [r3, #5]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_DAC_Start+0x16>
 800254c:	2302      	movs	r3, #2
 800254e:	e03b      	b.n	80025c8 <HAL_DAC_Start+0x8e>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2202      	movs	r2, #2
 800255a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6819      	ldr	r1, [r3, #0]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	f003 0310 	and.w	r3, r3, #16
 8002568:	2201      	movs	r2, #1
 800256a:	409a      	lsls	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10f      	bne.n	800259a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002584:	2b04      	cmp	r3, #4
 8002586:	d118      	bne.n	80025ba <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0201 	orr.w	r2, r2, #1
 8002596:	605a      	str	r2, [r3, #4]
 8002598:	e00f      	b.n	80025ba <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80025a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025a8:	d107      	bne.n	80025ba <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f042 0202 	orr.w	r2, r2, #2
 80025b8:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b087      	sub	sp, #28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
 80025e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d105      	bne.n	80025fe <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4413      	add	r3, r2
 80025f8:	3308      	adds	r3, #8
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	e004      	b.n	8002608 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4413      	add	r3, r2
 8002604:	3314      	adds	r3, #20
 8002606:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	461a      	mov	r2, r3
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	371c      	adds	r7, #28
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b088      	sub	sp, #32
 8002622:	af00      	add	r7, sp, #0
 8002624:	60f8      	str	r0, [r7, #12]
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	795b      	ldrb	r3, [r3, #5]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_DAC_ConfigChannel+0x1c>
 8002636:	2302      	movs	r3, #2
 8002638:	e107      	b.n	800284a <HAL_DAC_ConfigChannel+0x22c>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2201      	movs	r2, #1
 800263e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2202      	movs	r2, #2
 8002644:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2b04      	cmp	r3, #4
 800264c:	d174      	bne.n	8002738 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800264e:	f7fe fb05 	bl	8000c5c <HAL_GetTick>
 8002652:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d134      	bne.n	80026c4 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800265a:	e011      	b.n	8002680 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800265c:	f7fe fafe 	bl	8000c5c <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b01      	cmp	r3, #1
 8002668:	d90a      	bls.n	8002680 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	f043 0208 	orr.w	r2, r3, #8
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2203      	movs	r2, #3
 800267a:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e0e4      	b.n	800284a <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002686:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1e6      	bne.n	800265c <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800268e:	2001      	movs	r0, #1
 8002690:	f7fe faf0 	bl	8000c74 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	6992      	ldr	r2, [r2, #24]
 800269c:	641a      	str	r2, [r3, #64]	; 0x40
 800269e:	e01e      	b.n	80026de <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80026a0:	f7fe fadc 	bl	8000c5c <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d90a      	bls.n	80026c4 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	f043 0208 	orr.w	r2, r3, #8
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2203      	movs	r2, #3
 80026be:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e0c2      	b.n	800284a <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	dbe8      	blt.n	80026a0 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80026ce:	2001      	movs	r0, #1
 80026d0:	f7fe fad0 	bl	8000c74 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	6992      	ldr	r2, [r2, #24]
 80026dc:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f003 0310 	and.w	r3, r3, #16
 80026ea:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80026ee:	fa01 f303 	lsl.w	r3, r1, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	ea02 0103 	and.w	r1, r2, r3
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	69da      	ldr	r2, [r3, #28]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f003 0310 	and.w	r3, r3, #16
 8002702:	409a      	lsls	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f003 0310 	and.w	r3, r3, #16
 8002718:	21ff      	movs	r1, #255	; 0xff
 800271a:	fa01 f303 	lsl.w	r3, r1, r3
 800271e:	43db      	mvns	r3, r3
 8002720:	ea02 0103 	and.w	r1, r2, r3
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	6a1a      	ldr	r2, [r3, #32]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f003 0310 	and.w	r3, r3, #16
 800272e:	409a      	lsls	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d11d      	bne.n	800277c <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002746:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f003 0310 	and.w	r3, r3, #16
 800274e:	221f      	movs	r2, #31
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f003 0310 	and.w	r3, r3, #16
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002782:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f003 0310 	and.w	r3, r3, #16
 800278a:	2207      	movs	r2, #7
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	431a      	orrs	r2, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f003 0310 	and.w	r3, r3, #16
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6819      	ldr	r1, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f003 0310 	and.w	r3, r3, #16
 80027d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43da      	mvns	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	400a      	ands	r2, r1
 80027e0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f003 0310 	and.w	r3, r3, #16
 80027f0:	f640 72fc 	movw	r2, #4092	; 0xffc
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f003 0310 	and.w	r3, r3, #16
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4313      	orrs	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6819      	ldr	r1, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f003 0310 	and.w	r3, r3, #16
 800282c:	22c0      	movs	r2, #192	; 0xc0
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43da      	mvns	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	400a      	ands	r2, r1
 800283a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2201      	movs	r2, #1
 8002840:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3720      	adds	r7, #32
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
	...

08002854 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002854:	b480      	push	{r7}
 8002856:	b087      	sub	sp, #28
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800285e:	2300      	movs	r3, #0
 8002860:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002862:	e17f      	b.n	8002b64 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	2101      	movs	r1, #1
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	fa01 f303 	lsl.w	r3, r1, r3
 8002870:	4013      	ands	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 8171 	beq.w	8002b5e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	2b01      	cmp	r3, #1
 8002886:	d005      	beq.n	8002894 <HAL_GPIO_Init+0x40>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f003 0303 	and.w	r3, r3, #3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d130      	bne.n	80028f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	2203      	movs	r2, #3
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	43db      	mvns	r3, r3
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	4013      	ands	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	68da      	ldr	r2, [r3, #12]
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028ca:	2201      	movs	r2, #1
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43db      	mvns	r3, r3
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4013      	ands	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	091b      	lsrs	r3, r3, #4
 80028e0:	f003 0201 	and.w	r2, r3, #1
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	2b03      	cmp	r3, #3
 8002900:	d118      	bne.n	8002934 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002906:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002908:	2201      	movs	r2, #1
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	43db      	mvns	r3, r3
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4013      	ands	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	08db      	lsrs	r3, r3, #3
 800291e:	f003 0201 	and.w	r2, r3, #1
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4313      	orrs	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f003 0303 	and.w	r3, r3, #3
 800293c:	2b03      	cmp	r3, #3
 800293e:	d017      	beq.n	8002970 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	2203      	movs	r2, #3
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	43db      	mvns	r3, r3
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	4013      	ands	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	4313      	orrs	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f003 0303 	and.w	r3, r3, #3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d123      	bne.n	80029c4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	08da      	lsrs	r2, r3, #3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3208      	adds	r2, #8
 8002984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002988:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	220f      	movs	r2, #15
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	4013      	ands	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	691a      	ldr	r2, [r3, #16]
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	08da      	lsrs	r2, r3, #3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3208      	adds	r2, #8
 80029be:	6939      	ldr	r1, [r7, #16]
 80029c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	2203      	movs	r2, #3
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	4013      	ands	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 0203 	and.w	r2, r3, #3
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 80ac 	beq.w	8002b5e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a06:	4b5f      	ldr	r3, [pc, #380]	; (8002b84 <HAL_GPIO_Init+0x330>)
 8002a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a0a:	4a5e      	ldr	r2, [pc, #376]	; (8002b84 <HAL_GPIO_Init+0x330>)
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	6613      	str	r3, [r2, #96]	; 0x60
 8002a12:	4b5c      	ldr	r3, [pc, #368]	; (8002b84 <HAL_GPIO_Init+0x330>)
 8002a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	60bb      	str	r3, [r7, #8]
 8002a1c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a1e:	4a5a      	ldr	r2, [pc, #360]	; (8002b88 <HAL_GPIO_Init+0x334>)
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	089b      	lsrs	r3, r3, #2
 8002a24:	3302      	adds	r3, #2
 8002a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	220f      	movs	r2, #15
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a48:	d025      	beq.n	8002a96 <HAL_GPIO_Init+0x242>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a4f      	ldr	r2, [pc, #316]	; (8002b8c <HAL_GPIO_Init+0x338>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d01f      	beq.n	8002a92 <HAL_GPIO_Init+0x23e>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a4e      	ldr	r2, [pc, #312]	; (8002b90 <HAL_GPIO_Init+0x33c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d019      	beq.n	8002a8e <HAL_GPIO_Init+0x23a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a4d      	ldr	r2, [pc, #308]	; (8002b94 <HAL_GPIO_Init+0x340>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d013      	beq.n	8002a8a <HAL_GPIO_Init+0x236>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a4c      	ldr	r2, [pc, #304]	; (8002b98 <HAL_GPIO_Init+0x344>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d00d      	beq.n	8002a86 <HAL_GPIO_Init+0x232>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a4b      	ldr	r2, [pc, #300]	; (8002b9c <HAL_GPIO_Init+0x348>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d007      	beq.n	8002a82 <HAL_GPIO_Init+0x22e>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a4a      	ldr	r2, [pc, #296]	; (8002ba0 <HAL_GPIO_Init+0x34c>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d101      	bne.n	8002a7e <HAL_GPIO_Init+0x22a>
 8002a7a:	2306      	movs	r3, #6
 8002a7c:	e00c      	b.n	8002a98 <HAL_GPIO_Init+0x244>
 8002a7e:	2307      	movs	r3, #7
 8002a80:	e00a      	b.n	8002a98 <HAL_GPIO_Init+0x244>
 8002a82:	2305      	movs	r3, #5
 8002a84:	e008      	b.n	8002a98 <HAL_GPIO_Init+0x244>
 8002a86:	2304      	movs	r3, #4
 8002a88:	e006      	b.n	8002a98 <HAL_GPIO_Init+0x244>
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e004      	b.n	8002a98 <HAL_GPIO_Init+0x244>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e002      	b.n	8002a98 <HAL_GPIO_Init+0x244>
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <HAL_GPIO_Init+0x244>
 8002a96:	2300      	movs	r3, #0
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	f002 0203 	and.w	r2, r2, #3
 8002a9e:	0092      	lsls	r2, r2, #2
 8002aa0:	4093      	lsls	r3, r2
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002aa8:	4937      	ldr	r1, [pc, #220]	; (8002b88 <HAL_GPIO_Init+0x334>)
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	089b      	lsrs	r3, r3, #2
 8002aae:	3302      	adds	r3, #2
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ab6:	4b3b      	ldr	r3, [pc, #236]	; (8002ba4 <HAL_GPIO_Init+0x350>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ada:	4a32      	ldr	r2, [pc, #200]	; (8002ba4 <HAL_GPIO_Init+0x350>)
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ae0:	4b30      	ldr	r3, [pc, #192]	; (8002ba4 <HAL_GPIO_Init+0x350>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	4013      	ands	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b04:	4a27      	ldr	r2, [pc, #156]	; (8002ba4 <HAL_GPIO_Init+0x350>)
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b0a:	4b26      	ldr	r3, [pc, #152]	; (8002ba4 <HAL_GPIO_Init+0x350>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	43db      	mvns	r3, r3
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	4013      	ands	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b2e:	4a1d      	ldr	r2, [pc, #116]	; (8002ba4 <HAL_GPIO_Init+0x350>)
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b34:	4b1b      	ldr	r3, [pc, #108]	; (8002ba4 <HAL_GPIO_Init+0x350>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4013      	ands	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b58:	4a12      	ldr	r2, [pc, #72]	; (8002ba4 <HAL_GPIO_Init+0x350>)
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	3301      	adds	r3, #1
 8002b62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f47f ae78 	bne.w	8002864 <HAL_GPIO_Init+0x10>
  }
}
 8002b74:	bf00      	nop
 8002b76:	bf00      	nop
 8002b78:	371c      	adds	r7, #28
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40010000 	.word	0x40010000
 8002b8c:	48000400 	.word	0x48000400
 8002b90:	48000800 	.word	0x48000800
 8002b94:	48000c00 	.word	0x48000c00
 8002b98:	48001000 	.word	0x48001000
 8002b9c:	48001400 	.word	0x48001400
 8002ba0:	48001800 	.word	0x48001800
 8002ba4:	40010400 	.word	0x40010400

08002ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	807b      	strh	r3, [r7, #2]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bb8:	787b      	ldrb	r3, [r7, #1]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bbe:	887a      	ldrh	r2, [r7, #2]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bc4:	e002      	b.n	8002bcc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bc6:	887a      	ldrh	r2, [r7, #2]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002bdc:	4b04      	ldr	r3, [pc, #16]	; (8002bf0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	40007000 	.word	0x40007000

08002bf4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c02:	d130      	bne.n	8002c66 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c04:	4b23      	ldr	r3, [pc, #140]	; (8002c94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c10:	d038      	beq.n	8002c84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c12:	4b20      	ldr	r3, [pc, #128]	; (8002c94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c1a:	4a1e      	ldr	r2, [pc, #120]	; (8002c94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c20:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c22:	4b1d      	ldr	r3, [pc, #116]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2232      	movs	r2, #50	; 0x32
 8002c28:	fb02 f303 	mul.w	r3, r2, r3
 8002c2c:	4a1b      	ldr	r2, [pc, #108]	; (8002c9c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c32:	0c9b      	lsrs	r3, r3, #18
 8002c34:	3301      	adds	r3, #1
 8002c36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c38:	e002      	b.n	8002c40 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c40:	4b14      	ldr	r3, [pc, #80]	; (8002c94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c4c:	d102      	bne.n	8002c54 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1f2      	bne.n	8002c3a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c54:	4b0f      	ldr	r3, [pc, #60]	; (8002c94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c60:	d110      	bne.n	8002c84 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e00f      	b.n	8002c86 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c66:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c72:	d007      	beq.n	8002c84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c74:	4b07      	ldr	r3, [pc, #28]	; (8002c94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c7c:	4a05      	ldr	r2, [pc, #20]	; (8002c94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c82:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	40007000 	.word	0x40007000
 8002c98:	20000000 	.word	0x20000000
 8002c9c:	431bde83 	.word	0x431bde83

08002ca0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b088      	sub	sp, #32
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e3ca      	b.n	8003448 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb2:	4b97      	ldr	r3, [pc, #604]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
 8002cba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cbc:	4b94      	ldr	r3, [pc, #592]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f003 0303 	and.w	r3, r3, #3
 8002cc4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0310 	and.w	r3, r3, #16
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 80e4 	beq.w	8002e9c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d007      	beq.n	8002cea <HAL_RCC_OscConfig+0x4a>
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	2b0c      	cmp	r3, #12
 8002cde:	f040 808b 	bne.w	8002df8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	f040 8087 	bne.w	8002df8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cea:	4b89      	ldr	r3, [pc, #548]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d005      	beq.n	8002d02 <HAL_RCC_OscConfig+0x62>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e3a2      	b.n	8003448 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a1a      	ldr	r2, [r3, #32]
 8002d06:	4b82      	ldr	r3, [pc, #520]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d004      	beq.n	8002d1c <HAL_RCC_OscConfig+0x7c>
 8002d12:	4b7f      	ldr	r3, [pc, #508]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d1a:	e005      	b.n	8002d28 <HAL_RCC_OscConfig+0x88>
 8002d1c:	4b7c      	ldr	r3, [pc, #496]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d22:	091b      	lsrs	r3, r3, #4
 8002d24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d223      	bcs.n	8002d74 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 fd55 	bl	80037e0 <RCC_SetFlashLatencyFromMSIRange>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e383      	b.n	8003448 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d40:	4b73      	ldr	r3, [pc, #460]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a72      	ldr	r2, [pc, #456]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002d46:	f043 0308 	orr.w	r3, r3, #8
 8002d4a:	6013      	str	r3, [r2, #0]
 8002d4c:	4b70      	ldr	r3, [pc, #448]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	496d      	ldr	r1, [pc, #436]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d5e:	4b6c      	ldr	r3, [pc, #432]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	021b      	lsls	r3, r3, #8
 8002d6c:	4968      	ldr	r1, [pc, #416]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	604b      	str	r3, [r1, #4]
 8002d72:	e025      	b.n	8002dc0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d74:	4b66      	ldr	r3, [pc, #408]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a65      	ldr	r2, [pc, #404]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002d7a:	f043 0308 	orr.w	r3, r3, #8
 8002d7e:	6013      	str	r3, [r2, #0]
 8002d80:	4b63      	ldr	r3, [pc, #396]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	4960      	ldr	r1, [pc, #384]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d92:	4b5f      	ldr	r3, [pc, #380]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	021b      	lsls	r3, r3, #8
 8002da0:	495b      	ldr	r1, [pc, #364]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d109      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 fd15 	bl	80037e0 <RCC_SetFlashLatencyFromMSIRange>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e343      	b.n	8003448 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dc0:	f000 fc4a 	bl	8003658 <HAL_RCC_GetSysClockFreq>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	4b52      	ldr	r3, [pc, #328]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	091b      	lsrs	r3, r3, #4
 8002dcc:	f003 030f 	and.w	r3, r3, #15
 8002dd0:	4950      	ldr	r1, [pc, #320]	; (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002dd2:	5ccb      	ldrb	r3, [r1, r3]
 8002dd4:	f003 031f 	and.w	r3, r3, #31
 8002dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ddc:	4a4e      	ldr	r2, [pc, #312]	; (8002f18 <HAL_RCC_OscConfig+0x278>)
 8002dde:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002de0:	4b4e      	ldr	r3, [pc, #312]	; (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7fd fee9 	bl	8000bbc <HAL_InitTick>
 8002dea:	4603      	mov	r3, r0
 8002dec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002dee:	7bfb      	ldrb	r3, [r7, #15]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d052      	beq.n	8002e9a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
 8002df6:	e327      	b.n	8003448 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d032      	beq.n	8002e66 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e00:	4b43      	ldr	r3, [pc, #268]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a42      	ldr	r2, [pc, #264]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002e06:	f043 0301 	orr.w	r3, r3, #1
 8002e0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e0c:	f7fd ff26 	bl	8000c5c <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e14:	f7fd ff22 	bl	8000c5c <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e310      	b.n	8003448 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e26:	4b3a      	ldr	r3, [pc, #232]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0f0      	beq.n	8002e14 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e32:	4b37      	ldr	r3, [pc, #220]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a36      	ldr	r2, [pc, #216]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002e38:	f043 0308 	orr.w	r3, r3, #8
 8002e3c:	6013      	str	r3, [r2, #0]
 8002e3e:	4b34      	ldr	r3, [pc, #208]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	4931      	ldr	r1, [pc, #196]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e50:	4b2f      	ldr	r3, [pc, #188]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	021b      	lsls	r3, r3, #8
 8002e5e:	492c      	ldr	r1, [pc, #176]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	604b      	str	r3, [r1, #4]
 8002e64:	e01a      	b.n	8002e9c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e66:	4b2a      	ldr	r3, [pc, #168]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a29      	ldr	r2, [pc, #164]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002e6c:	f023 0301 	bic.w	r3, r3, #1
 8002e70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e72:	f7fd fef3 	bl	8000c5c <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e7a:	f7fd feef 	bl	8000c5c <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e2dd      	b.n	8003448 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e8c:	4b20      	ldr	r3, [pc, #128]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1f0      	bne.n	8002e7a <HAL_RCC_OscConfig+0x1da>
 8002e98:	e000      	b.n	8002e9c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e9a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d074      	beq.n	8002f92 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	2b08      	cmp	r3, #8
 8002eac:	d005      	beq.n	8002eba <HAL_RCC_OscConfig+0x21a>
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	2b0c      	cmp	r3, #12
 8002eb2:	d10e      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	2b03      	cmp	r3, #3
 8002eb8:	d10b      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eba:	4b15      	ldr	r3, [pc, #84]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d064      	beq.n	8002f90 <HAL_RCC_OscConfig+0x2f0>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d160      	bne.n	8002f90 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e2ba      	b.n	8003448 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eda:	d106      	bne.n	8002eea <HAL_RCC_OscConfig+0x24a>
 8002edc:	4b0c      	ldr	r3, [pc, #48]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a0b      	ldr	r2, [pc, #44]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee6:	6013      	str	r3, [r2, #0]
 8002ee8:	e026      	b.n	8002f38 <HAL_RCC_OscConfig+0x298>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ef2:	d115      	bne.n	8002f20 <HAL_RCC_OscConfig+0x280>
 8002ef4:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a05      	ldr	r2, [pc, #20]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002efa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	4b03      	ldr	r3, [pc, #12]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a02      	ldr	r2, [pc, #8]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f0a:	6013      	str	r3, [r2, #0]
 8002f0c:	e014      	b.n	8002f38 <HAL_RCC_OscConfig+0x298>
 8002f0e:	bf00      	nop
 8002f10:	40021000 	.word	0x40021000
 8002f14:	08004bf4 	.word	0x08004bf4
 8002f18:	20000000 	.word	0x20000000
 8002f1c:	20000004 	.word	0x20000004
 8002f20:	4ba0      	ldr	r3, [pc, #640]	; (80031a4 <HAL_RCC_OscConfig+0x504>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a9f      	ldr	r2, [pc, #636]	; (80031a4 <HAL_RCC_OscConfig+0x504>)
 8002f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	4b9d      	ldr	r3, [pc, #628]	; (80031a4 <HAL_RCC_OscConfig+0x504>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a9c      	ldr	r2, [pc, #624]	; (80031a4 <HAL_RCC_OscConfig+0x504>)
 8002f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d013      	beq.n	8002f68 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f40:	f7fd fe8c 	bl	8000c5c <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f48:	f7fd fe88 	bl	8000c5c <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b64      	cmp	r3, #100	; 0x64
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e276      	b.n	8003448 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f5a:	4b92      	ldr	r3, [pc, #584]	; (80031a4 <HAL_RCC_OscConfig+0x504>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0f0      	beq.n	8002f48 <HAL_RCC_OscConfig+0x2a8>
 8002f66:	e014      	b.n	8002f92 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f68:	f7fd fe78 	bl	8000c5c <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f70:	f7fd fe74 	bl	8000c5c <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b64      	cmp	r3, #100	; 0x64
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e262      	b.n	8003448 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f82:	4b88      	ldr	r3, [pc, #544]	; (80031a4 <HAL_RCC_OscConfig+0x504>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1f0      	bne.n	8002f70 <HAL_RCC_OscConfig+0x2d0>
 8002f8e:	e000      	b.n	8002f92 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d060      	beq.n	8003060 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	2b04      	cmp	r3, #4
 8002fa2:	d005      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x310>
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	2b0c      	cmp	r3, #12
 8002fa8:	d119      	bne.n	8002fde <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d116      	bne.n	8002fde <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fb0:	4b7c      	ldr	r3, [pc, #496]	; (80031a4 <HAL_RCC_OscConfig+0x504>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x328>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e23f      	b.n	8003448 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc8:	4b76      	ldr	r3, [pc, #472]	; (80031a4 <HAL_RCC_OscConfig+0x504>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	061b      	lsls	r3, r3, #24
 8002fd6:	4973      	ldr	r1, [pc, #460]	; (80031a4 <HAL_RCC_OscConfig+0x504>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fdc:	e040      	b.n	8003060 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d023      	beq.n	800302e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fe6:	4b6f      	ldr	r3, [pc, #444]	; (80031a4 <HAL_RCC_OscConfig+0x504>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a6e      	ldr	r2, [pc, #440]	; (80031a4 <HAL_RCC_OscConfig+0x504>)
 8002fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff2:	f7fd fe33 	bl	8000c5c <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ffa:	f7fd fe2f 	bl	8000c5c <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e21d      	b.n	8003448 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800300c:	4b65      	ldr	r3, [pc, #404]	; (80031a4 <HAL_RCC_OscConfig+0x504>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0f0      	beq.n	8002ffa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003018:	4b62      	ldr	r3, [pc, #392]	; (80031a4 <HAL_RCC_OscConfig+0x504>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	061b      	lsls	r3, r3, #24
 8003026:	495f      	ldr	r1, [pc, #380]	; (80031a4 <HAL_RCC_OscConfig+0x504>)
 8003028:	4313      	orrs	r3, r2
 800302a:	604b      	str	r3, [r1, #4]
 800302c:	e018      	b.n	8003060 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800302e:	4b5d      	ldr	r3, [pc, #372]	; (80031a4 <HAL_RCC_OscConfig+0x504>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a5c      	ldr	r2, [pc, #368]	; (80031a4 <HAL_RCC_OscConfig+0x504>)
 8003034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303a:	f7fd fe0f 	bl	8000c5c <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003042:	f7fd fe0b 	bl	8000c5c <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e1f9      	b.n	8003448 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003054:	4b53      	ldr	r3, [pc, #332]	; (80031a4 <HAL_RCC_OscConfig+0x504>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1f0      	bne.n	8003042 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	2b00      	cmp	r3, #0
 800306a:	d03c      	beq.n	80030e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d01c      	beq.n	80030ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003074:	4b4b      	ldr	r3, [pc, #300]	; (80031a4 <HAL_RCC_OscConfig+0x504>)
 8003076:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800307a:	4a4a      	ldr	r2, [pc, #296]	; (80031a4 <HAL_RCC_OscConfig+0x504>)
 800307c:	f043 0301 	orr.w	r3, r3, #1
 8003080:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003084:	f7fd fdea 	bl	8000c5c <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800308c:	f7fd fde6 	bl	8000c5c <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e1d4      	b.n	8003448 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800309e:	4b41      	ldr	r3, [pc, #260]	; (80031a4 <HAL_RCC_OscConfig+0x504>)
 80030a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0ef      	beq.n	800308c <HAL_RCC_OscConfig+0x3ec>
 80030ac:	e01b      	b.n	80030e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ae:	4b3d      	ldr	r3, [pc, #244]	; (80031a4 <HAL_RCC_OscConfig+0x504>)
 80030b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b4:	4a3b      	ldr	r2, [pc, #236]	; (80031a4 <HAL_RCC_OscConfig+0x504>)
 80030b6:	f023 0301 	bic.w	r3, r3, #1
 80030ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030be:	f7fd fdcd 	bl	8000c5c <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030c6:	f7fd fdc9 	bl	8000c5c <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e1b7      	b.n	8003448 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030d8:	4b32      	ldr	r3, [pc, #200]	; (80031a4 <HAL_RCC_OscConfig+0x504>)
 80030da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1ef      	bne.n	80030c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0304 	and.w	r3, r3, #4
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 80a6 	beq.w	8003240 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030f4:	2300      	movs	r3, #0
 80030f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80030f8:	4b2a      	ldr	r3, [pc, #168]	; (80031a4 <HAL_RCC_OscConfig+0x504>)
 80030fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10d      	bne.n	8003120 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003104:	4b27      	ldr	r3, [pc, #156]	; (80031a4 <HAL_RCC_OscConfig+0x504>)
 8003106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003108:	4a26      	ldr	r2, [pc, #152]	; (80031a4 <HAL_RCC_OscConfig+0x504>)
 800310a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800310e:	6593      	str	r3, [r2, #88]	; 0x58
 8003110:	4b24      	ldr	r3, [pc, #144]	; (80031a4 <HAL_RCC_OscConfig+0x504>)
 8003112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003118:	60bb      	str	r3, [r7, #8]
 800311a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800311c:	2301      	movs	r3, #1
 800311e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003120:	4b21      	ldr	r3, [pc, #132]	; (80031a8 <HAL_RCC_OscConfig+0x508>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003128:	2b00      	cmp	r3, #0
 800312a:	d118      	bne.n	800315e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800312c:	4b1e      	ldr	r3, [pc, #120]	; (80031a8 <HAL_RCC_OscConfig+0x508>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a1d      	ldr	r2, [pc, #116]	; (80031a8 <HAL_RCC_OscConfig+0x508>)
 8003132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003136:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003138:	f7fd fd90 	bl	8000c5c <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003140:	f7fd fd8c 	bl	8000c5c <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e17a      	b.n	8003448 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003152:	4b15      	ldr	r3, [pc, #84]	; (80031a8 <HAL_RCC_OscConfig+0x508>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0f0      	beq.n	8003140 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d108      	bne.n	8003178 <HAL_RCC_OscConfig+0x4d8>
 8003166:	4b0f      	ldr	r3, [pc, #60]	; (80031a4 <HAL_RCC_OscConfig+0x504>)
 8003168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316c:	4a0d      	ldr	r2, [pc, #52]	; (80031a4 <HAL_RCC_OscConfig+0x504>)
 800316e:	f043 0301 	orr.w	r3, r3, #1
 8003172:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003176:	e029      	b.n	80031cc <HAL_RCC_OscConfig+0x52c>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2b05      	cmp	r3, #5
 800317e:	d115      	bne.n	80031ac <HAL_RCC_OscConfig+0x50c>
 8003180:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <HAL_RCC_OscConfig+0x504>)
 8003182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003186:	4a07      	ldr	r2, [pc, #28]	; (80031a4 <HAL_RCC_OscConfig+0x504>)
 8003188:	f043 0304 	orr.w	r3, r3, #4
 800318c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003190:	4b04      	ldr	r3, [pc, #16]	; (80031a4 <HAL_RCC_OscConfig+0x504>)
 8003192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003196:	4a03      	ldr	r2, [pc, #12]	; (80031a4 <HAL_RCC_OscConfig+0x504>)
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031a0:	e014      	b.n	80031cc <HAL_RCC_OscConfig+0x52c>
 80031a2:	bf00      	nop
 80031a4:	40021000 	.word	0x40021000
 80031a8:	40007000 	.word	0x40007000
 80031ac:	4b9c      	ldr	r3, [pc, #624]	; (8003420 <HAL_RCC_OscConfig+0x780>)
 80031ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b2:	4a9b      	ldr	r2, [pc, #620]	; (8003420 <HAL_RCC_OscConfig+0x780>)
 80031b4:	f023 0301 	bic.w	r3, r3, #1
 80031b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031bc:	4b98      	ldr	r3, [pc, #608]	; (8003420 <HAL_RCC_OscConfig+0x780>)
 80031be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c2:	4a97      	ldr	r2, [pc, #604]	; (8003420 <HAL_RCC_OscConfig+0x780>)
 80031c4:	f023 0304 	bic.w	r3, r3, #4
 80031c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d016      	beq.n	8003202 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d4:	f7fd fd42 	bl	8000c5c <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031da:	e00a      	b.n	80031f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031dc:	f7fd fd3e 	bl	8000c5c <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e12a      	b.n	8003448 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031f2:	4b8b      	ldr	r3, [pc, #556]	; (8003420 <HAL_RCC_OscConfig+0x780>)
 80031f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0ed      	beq.n	80031dc <HAL_RCC_OscConfig+0x53c>
 8003200:	e015      	b.n	800322e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003202:	f7fd fd2b 	bl	8000c5c <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003208:	e00a      	b.n	8003220 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800320a:	f7fd fd27 	bl	8000c5c <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	f241 3288 	movw	r2, #5000	; 0x1388
 8003218:	4293      	cmp	r3, r2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e113      	b.n	8003448 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003220:	4b7f      	ldr	r3, [pc, #508]	; (8003420 <HAL_RCC_OscConfig+0x780>)
 8003222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1ed      	bne.n	800320a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800322e:	7ffb      	ldrb	r3, [r7, #31]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d105      	bne.n	8003240 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003234:	4b7a      	ldr	r3, [pc, #488]	; (8003420 <HAL_RCC_OscConfig+0x780>)
 8003236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003238:	4a79      	ldr	r2, [pc, #484]	; (8003420 <HAL_RCC_OscConfig+0x780>)
 800323a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800323e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 80fe 	beq.w	8003446 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324e:	2b02      	cmp	r3, #2
 8003250:	f040 80d0 	bne.w	80033f4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003254:	4b72      	ldr	r3, [pc, #456]	; (8003420 <HAL_RCC_OscConfig+0x780>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f003 0203 	and.w	r2, r3, #3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003264:	429a      	cmp	r2, r3
 8003266:	d130      	bne.n	80032ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	3b01      	subs	r3, #1
 8003274:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003276:	429a      	cmp	r2, r3
 8003278:	d127      	bne.n	80032ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003284:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003286:	429a      	cmp	r2, r3
 8003288:	d11f      	bne.n	80032ca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003294:	2a07      	cmp	r2, #7
 8003296:	bf14      	ite	ne
 8003298:	2201      	movne	r2, #1
 800329a:	2200      	moveq	r2, #0
 800329c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800329e:	4293      	cmp	r3, r2
 80032a0:	d113      	bne.n	80032ca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ac:	085b      	lsrs	r3, r3, #1
 80032ae:	3b01      	subs	r3, #1
 80032b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d109      	bne.n	80032ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	085b      	lsrs	r3, r3, #1
 80032c2:	3b01      	subs	r3, #1
 80032c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d06e      	beq.n	80033a8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	2b0c      	cmp	r3, #12
 80032ce:	d069      	beq.n	80033a4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80032d0:	4b53      	ldr	r3, [pc, #332]	; (8003420 <HAL_RCC_OscConfig+0x780>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d105      	bne.n	80032e8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80032dc:	4b50      	ldr	r3, [pc, #320]	; (8003420 <HAL_RCC_OscConfig+0x780>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e0ad      	b.n	8003448 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032ec:	4b4c      	ldr	r3, [pc, #304]	; (8003420 <HAL_RCC_OscConfig+0x780>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a4b      	ldr	r2, [pc, #300]	; (8003420 <HAL_RCC_OscConfig+0x780>)
 80032f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032f6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032f8:	f7fd fcb0 	bl	8000c5c <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003300:	f7fd fcac 	bl	8000c5c <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e09a      	b.n	8003448 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003312:	4b43      	ldr	r3, [pc, #268]	; (8003420 <HAL_RCC_OscConfig+0x780>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1f0      	bne.n	8003300 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800331e:	4b40      	ldr	r3, [pc, #256]	; (8003420 <HAL_RCC_OscConfig+0x780>)
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	4b40      	ldr	r3, [pc, #256]	; (8003424 <HAL_RCC_OscConfig+0x784>)
 8003324:	4013      	ands	r3, r2
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800332e:	3a01      	subs	r2, #1
 8003330:	0112      	lsls	r2, r2, #4
 8003332:	4311      	orrs	r1, r2
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003338:	0212      	lsls	r2, r2, #8
 800333a:	4311      	orrs	r1, r2
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003340:	0852      	lsrs	r2, r2, #1
 8003342:	3a01      	subs	r2, #1
 8003344:	0552      	lsls	r2, r2, #21
 8003346:	4311      	orrs	r1, r2
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800334c:	0852      	lsrs	r2, r2, #1
 800334e:	3a01      	subs	r2, #1
 8003350:	0652      	lsls	r2, r2, #25
 8003352:	4311      	orrs	r1, r2
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003358:	0912      	lsrs	r2, r2, #4
 800335a:	0452      	lsls	r2, r2, #17
 800335c:	430a      	orrs	r2, r1
 800335e:	4930      	ldr	r1, [pc, #192]	; (8003420 <HAL_RCC_OscConfig+0x780>)
 8003360:	4313      	orrs	r3, r2
 8003362:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003364:	4b2e      	ldr	r3, [pc, #184]	; (8003420 <HAL_RCC_OscConfig+0x780>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a2d      	ldr	r2, [pc, #180]	; (8003420 <HAL_RCC_OscConfig+0x780>)
 800336a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800336e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003370:	4b2b      	ldr	r3, [pc, #172]	; (8003420 <HAL_RCC_OscConfig+0x780>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	4a2a      	ldr	r2, [pc, #168]	; (8003420 <HAL_RCC_OscConfig+0x780>)
 8003376:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800337a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800337c:	f7fd fc6e 	bl	8000c5c <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003384:	f7fd fc6a 	bl	8000c5c <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e058      	b.n	8003448 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003396:	4b22      	ldr	r3, [pc, #136]	; (8003420 <HAL_RCC_OscConfig+0x780>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0f0      	beq.n	8003384 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033a2:	e050      	b.n	8003446 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e04f      	b.n	8003448 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033a8:	4b1d      	ldr	r3, [pc, #116]	; (8003420 <HAL_RCC_OscConfig+0x780>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d148      	bne.n	8003446 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80033b4:	4b1a      	ldr	r3, [pc, #104]	; (8003420 <HAL_RCC_OscConfig+0x780>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a19      	ldr	r2, [pc, #100]	; (8003420 <HAL_RCC_OscConfig+0x780>)
 80033ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033c0:	4b17      	ldr	r3, [pc, #92]	; (8003420 <HAL_RCC_OscConfig+0x780>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	4a16      	ldr	r2, [pc, #88]	; (8003420 <HAL_RCC_OscConfig+0x780>)
 80033c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033cc:	f7fd fc46 	bl	8000c5c <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d4:	f7fd fc42 	bl	8000c5c <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e030      	b.n	8003448 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033e6:	4b0e      	ldr	r3, [pc, #56]	; (8003420 <HAL_RCC_OscConfig+0x780>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0f0      	beq.n	80033d4 <HAL_RCC_OscConfig+0x734>
 80033f2:	e028      	b.n	8003446 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	2b0c      	cmp	r3, #12
 80033f8:	d023      	beq.n	8003442 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fa:	4b09      	ldr	r3, [pc, #36]	; (8003420 <HAL_RCC_OscConfig+0x780>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a08      	ldr	r2, [pc, #32]	; (8003420 <HAL_RCC_OscConfig+0x780>)
 8003400:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003404:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003406:	f7fd fc29 	bl	8000c5c <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800340c:	e00c      	b.n	8003428 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340e:	f7fd fc25 	bl	8000c5c <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d905      	bls.n	8003428 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e013      	b.n	8003448 <HAL_RCC_OscConfig+0x7a8>
 8003420:	40021000 	.word	0x40021000
 8003424:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003428:	4b09      	ldr	r3, [pc, #36]	; (8003450 <HAL_RCC_OscConfig+0x7b0>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1ec      	bne.n	800340e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003434:	4b06      	ldr	r3, [pc, #24]	; (8003450 <HAL_RCC_OscConfig+0x7b0>)
 8003436:	68da      	ldr	r2, [r3, #12]
 8003438:	4905      	ldr	r1, [pc, #20]	; (8003450 <HAL_RCC_OscConfig+0x7b0>)
 800343a:	4b06      	ldr	r3, [pc, #24]	; (8003454 <HAL_RCC_OscConfig+0x7b4>)
 800343c:	4013      	ands	r3, r2
 800343e:	60cb      	str	r3, [r1, #12]
 8003440:	e001      	b.n	8003446 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e000      	b.n	8003448 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3720      	adds	r7, #32
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40021000 	.word	0x40021000
 8003454:	feeefffc 	.word	0xfeeefffc

08003458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e0e7      	b.n	800363c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800346c:	4b75      	ldr	r3, [pc, #468]	; (8003644 <HAL_RCC_ClockConfig+0x1ec>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d910      	bls.n	800349c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347a:	4b72      	ldr	r3, [pc, #456]	; (8003644 <HAL_RCC_ClockConfig+0x1ec>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f023 0207 	bic.w	r2, r3, #7
 8003482:	4970      	ldr	r1, [pc, #448]	; (8003644 <HAL_RCC_ClockConfig+0x1ec>)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	4313      	orrs	r3, r2
 8003488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800348a:	4b6e      	ldr	r3, [pc, #440]	; (8003644 <HAL_RCC_ClockConfig+0x1ec>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	429a      	cmp	r2, r3
 8003496:	d001      	beq.n	800349c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e0cf      	b.n	800363c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d010      	beq.n	80034ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	4b66      	ldr	r3, [pc, #408]	; (8003648 <HAL_RCC_ClockConfig+0x1f0>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d908      	bls.n	80034ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034b8:	4b63      	ldr	r3, [pc, #396]	; (8003648 <HAL_RCC_ClockConfig+0x1f0>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	4960      	ldr	r1, [pc, #384]	; (8003648 <HAL_RCC_ClockConfig+0x1f0>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d04c      	beq.n	8003570 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2b03      	cmp	r3, #3
 80034dc:	d107      	bne.n	80034ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034de:	4b5a      	ldr	r3, [pc, #360]	; (8003648 <HAL_RCC_ClockConfig+0x1f0>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d121      	bne.n	800352e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e0a6      	b.n	800363c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d107      	bne.n	8003506 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034f6:	4b54      	ldr	r3, [pc, #336]	; (8003648 <HAL_RCC_ClockConfig+0x1f0>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d115      	bne.n	800352e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e09a      	b.n	800363c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d107      	bne.n	800351e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800350e:	4b4e      	ldr	r3, [pc, #312]	; (8003648 <HAL_RCC_ClockConfig+0x1f0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d109      	bne.n	800352e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e08e      	b.n	800363c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800351e:	4b4a      	ldr	r3, [pc, #296]	; (8003648 <HAL_RCC_ClockConfig+0x1f0>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e086      	b.n	800363c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800352e:	4b46      	ldr	r3, [pc, #280]	; (8003648 <HAL_RCC_ClockConfig+0x1f0>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f023 0203 	bic.w	r2, r3, #3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	4943      	ldr	r1, [pc, #268]	; (8003648 <HAL_RCC_ClockConfig+0x1f0>)
 800353c:	4313      	orrs	r3, r2
 800353e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003540:	f7fd fb8c 	bl	8000c5c <HAL_GetTick>
 8003544:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003546:	e00a      	b.n	800355e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003548:	f7fd fb88 	bl	8000c5c <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	f241 3288 	movw	r2, #5000	; 0x1388
 8003556:	4293      	cmp	r3, r2
 8003558:	d901      	bls.n	800355e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e06e      	b.n	800363c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800355e:	4b3a      	ldr	r3, [pc, #232]	; (8003648 <HAL_RCC_ClockConfig+0x1f0>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 020c 	and.w	r2, r3, #12
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	429a      	cmp	r2, r3
 800356e:	d1eb      	bne.n	8003548 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d010      	beq.n	800359e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	4b31      	ldr	r3, [pc, #196]	; (8003648 <HAL_RCC_ClockConfig+0x1f0>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003588:	429a      	cmp	r2, r3
 800358a:	d208      	bcs.n	800359e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800358c:	4b2e      	ldr	r3, [pc, #184]	; (8003648 <HAL_RCC_ClockConfig+0x1f0>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	492b      	ldr	r1, [pc, #172]	; (8003648 <HAL_RCC_ClockConfig+0x1f0>)
 800359a:	4313      	orrs	r3, r2
 800359c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800359e:	4b29      	ldr	r3, [pc, #164]	; (8003644 <HAL_RCC_ClockConfig+0x1ec>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0307 	and.w	r3, r3, #7
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d210      	bcs.n	80035ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ac:	4b25      	ldr	r3, [pc, #148]	; (8003644 <HAL_RCC_ClockConfig+0x1ec>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f023 0207 	bic.w	r2, r3, #7
 80035b4:	4923      	ldr	r1, [pc, #140]	; (8003644 <HAL_RCC_ClockConfig+0x1ec>)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035bc:	4b21      	ldr	r3, [pc, #132]	; (8003644 <HAL_RCC_ClockConfig+0x1ec>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d001      	beq.n	80035ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e036      	b.n	800363c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0304 	and.w	r3, r3, #4
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d008      	beq.n	80035ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035da:	4b1b      	ldr	r3, [pc, #108]	; (8003648 <HAL_RCC_ClockConfig+0x1f0>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	4918      	ldr	r1, [pc, #96]	; (8003648 <HAL_RCC_ClockConfig+0x1f0>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0308 	and.w	r3, r3, #8
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d009      	beq.n	800360c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035f8:	4b13      	ldr	r3, [pc, #76]	; (8003648 <HAL_RCC_ClockConfig+0x1f0>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	4910      	ldr	r1, [pc, #64]	; (8003648 <HAL_RCC_ClockConfig+0x1f0>)
 8003608:	4313      	orrs	r3, r2
 800360a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800360c:	f000 f824 	bl	8003658 <HAL_RCC_GetSysClockFreq>
 8003610:	4602      	mov	r2, r0
 8003612:	4b0d      	ldr	r3, [pc, #52]	; (8003648 <HAL_RCC_ClockConfig+0x1f0>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	091b      	lsrs	r3, r3, #4
 8003618:	f003 030f 	and.w	r3, r3, #15
 800361c:	490b      	ldr	r1, [pc, #44]	; (800364c <HAL_RCC_ClockConfig+0x1f4>)
 800361e:	5ccb      	ldrb	r3, [r1, r3]
 8003620:	f003 031f 	and.w	r3, r3, #31
 8003624:	fa22 f303 	lsr.w	r3, r2, r3
 8003628:	4a09      	ldr	r2, [pc, #36]	; (8003650 <HAL_RCC_ClockConfig+0x1f8>)
 800362a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800362c:	4b09      	ldr	r3, [pc, #36]	; (8003654 <HAL_RCC_ClockConfig+0x1fc>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f7fd fac3 	bl	8000bbc <HAL_InitTick>
 8003636:	4603      	mov	r3, r0
 8003638:	72fb      	strb	r3, [r7, #11]

  return status;
 800363a:	7afb      	ldrb	r3, [r7, #11]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40022000 	.word	0x40022000
 8003648:	40021000 	.word	0x40021000
 800364c:	08004bf4 	.word	0x08004bf4
 8003650:	20000000 	.word	0x20000000
 8003654:	20000004 	.word	0x20000004

08003658 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003658:	b480      	push	{r7}
 800365a:	b089      	sub	sp, #36	; 0x24
 800365c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800365e:	2300      	movs	r3, #0
 8003660:	61fb      	str	r3, [r7, #28]
 8003662:	2300      	movs	r3, #0
 8003664:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003666:	4b3e      	ldr	r3, [pc, #248]	; (8003760 <HAL_RCC_GetSysClockFreq+0x108>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 030c 	and.w	r3, r3, #12
 800366e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003670:	4b3b      	ldr	r3, [pc, #236]	; (8003760 <HAL_RCC_GetSysClockFreq+0x108>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f003 0303 	and.w	r3, r3, #3
 8003678:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d005      	beq.n	800368c <HAL_RCC_GetSysClockFreq+0x34>
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	2b0c      	cmp	r3, #12
 8003684:	d121      	bne.n	80036ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d11e      	bne.n	80036ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800368c:	4b34      	ldr	r3, [pc, #208]	; (8003760 <HAL_RCC_GetSysClockFreq+0x108>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b00      	cmp	r3, #0
 8003696:	d107      	bne.n	80036a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003698:	4b31      	ldr	r3, [pc, #196]	; (8003760 <HAL_RCC_GetSysClockFreq+0x108>)
 800369a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800369e:	0a1b      	lsrs	r3, r3, #8
 80036a0:	f003 030f 	and.w	r3, r3, #15
 80036a4:	61fb      	str	r3, [r7, #28]
 80036a6:	e005      	b.n	80036b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036a8:	4b2d      	ldr	r3, [pc, #180]	; (8003760 <HAL_RCC_GetSysClockFreq+0x108>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	091b      	lsrs	r3, r3, #4
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80036b4:	4a2b      	ldr	r2, [pc, #172]	; (8003764 <HAL_RCC_GetSysClockFreq+0x10c>)
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10d      	bne.n	80036e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036c8:	e00a      	b.n	80036e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d102      	bne.n	80036d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036d0:	4b25      	ldr	r3, [pc, #148]	; (8003768 <HAL_RCC_GetSysClockFreq+0x110>)
 80036d2:	61bb      	str	r3, [r7, #24]
 80036d4:	e004      	b.n	80036e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	2b08      	cmp	r3, #8
 80036da:	d101      	bne.n	80036e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036dc:	4b23      	ldr	r3, [pc, #140]	; (800376c <HAL_RCC_GetSysClockFreq+0x114>)
 80036de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	2b0c      	cmp	r3, #12
 80036e4:	d134      	bne.n	8003750 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036e6:	4b1e      	ldr	r3, [pc, #120]	; (8003760 <HAL_RCC_GetSysClockFreq+0x108>)
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d003      	beq.n	80036fe <HAL_RCC_GetSysClockFreq+0xa6>
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	2b03      	cmp	r3, #3
 80036fa:	d003      	beq.n	8003704 <HAL_RCC_GetSysClockFreq+0xac>
 80036fc:	e005      	b.n	800370a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80036fe:	4b1a      	ldr	r3, [pc, #104]	; (8003768 <HAL_RCC_GetSysClockFreq+0x110>)
 8003700:	617b      	str	r3, [r7, #20]
      break;
 8003702:	e005      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003704:	4b19      	ldr	r3, [pc, #100]	; (800376c <HAL_RCC_GetSysClockFreq+0x114>)
 8003706:	617b      	str	r3, [r7, #20]
      break;
 8003708:	e002      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	617b      	str	r3, [r7, #20]
      break;
 800370e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003710:	4b13      	ldr	r3, [pc, #76]	; (8003760 <HAL_RCC_GetSysClockFreq+0x108>)
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	091b      	lsrs	r3, r3, #4
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	3301      	adds	r3, #1
 800371c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800371e:	4b10      	ldr	r3, [pc, #64]	; (8003760 <HAL_RCC_GetSysClockFreq+0x108>)
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	0a1b      	lsrs	r3, r3, #8
 8003724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	fb03 f202 	mul.w	r2, r3, r2
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	fbb2 f3f3 	udiv	r3, r2, r3
 8003734:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003736:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <HAL_RCC_GetSysClockFreq+0x108>)
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	0e5b      	lsrs	r3, r3, #25
 800373c:	f003 0303 	and.w	r3, r3, #3
 8003740:	3301      	adds	r3, #1
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	fbb2 f3f3 	udiv	r3, r2, r3
 800374e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003750:	69bb      	ldr	r3, [r7, #24]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3724      	adds	r7, #36	; 0x24
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	40021000 	.word	0x40021000
 8003764:	08004c0c 	.word	0x08004c0c
 8003768:	00f42400 	.word	0x00f42400
 800376c:	007a1200 	.word	0x007a1200

08003770 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003774:	4b03      	ldr	r3, [pc, #12]	; (8003784 <HAL_RCC_GetHCLKFreq+0x14>)
 8003776:	681b      	ldr	r3, [r3, #0]
}
 8003778:	4618      	mov	r0, r3
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	20000000 	.word	0x20000000

08003788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800378c:	f7ff fff0 	bl	8003770 <HAL_RCC_GetHCLKFreq>
 8003790:	4602      	mov	r2, r0
 8003792:	4b06      	ldr	r3, [pc, #24]	; (80037ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	0a1b      	lsrs	r3, r3, #8
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	4904      	ldr	r1, [pc, #16]	; (80037b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800379e:	5ccb      	ldrb	r3, [r1, r3]
 80037a0:	f003 031f 	and.w	r3, r3, #31
 80037a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40021000 	.word	0x40021000
 80037b0:	08004c04 	.word	0x08004c04

080037b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037b8:	f7ff ffda 	bl	8003770 <HAL_RCC_GetHCLKFreq>
 80037bc:	4602      	mov	r2, r0
 80037be:	4b06      	ldr	r3, [pc, #24]	; (80037d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	0adb      	lsrs	r3, r3, #11
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	4904      	ldr	r1, [pc, #16]	; (80037dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80037ca:	5ccb      	ldrb	r3, [r1, r3]
 80037cc:	f003 031f 	and.w	r3, r3, #31
 80037d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40021000 	.word	0x40021000
 80037dc:	08004c04 	.word	0x08004c04

080037e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037e8:	2300      	movs	r3, #0
 80037ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037ec:	4b2a      	ldr	r3, [pc, #168]	; (8003898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d003      	beq.n	8003800 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037f8:	f7ff f9ee 	bl	8002bd8 <HAL_PWREx_GetVoltageRange>
 80037fc:	6178      	str	r0, [r7, #20]
 80037fe:	e014      	b.n	800382a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003800:	4b25      	ldr	r3, [pc, #148]	; (8003898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003804:	4a24      	ldr	r2, [pc, #144]	; (8003898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800380a:	6593      	str	r3, [r2, #88]	; 0x58
 800380c:	4b22      	ldr	r3, [pc, #136]	; (8003898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800380e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003814:	60fb      	str	r3, [r7, #12]
 8003816:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003818:	f7ff f9de 	bl	8002bd8 <HAL_PWREx_GetVoltageRange>
 800381c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800381e:	4b1e      	ldr	r3, [pc, #120]	; (8003898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003822:	4a1d      	ldr	r2, [pc, #116]	; (8003898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003824:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003828:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003830:	d10b      	bne.n	800384a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b80      	cmp	r3, #128	; 0x80
 8003836:	d919      	bls.n	800386c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2ba0      	cmp	r3, #160	; 0xa0
 800383c:	d902      	bls.n	8003844 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800383e:	2302      	movs	r3, #2
 8003840:	613b      	str	r3, [r7, #16]
 8003842:	e013      	b.n	800386c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003844:	2301      	movs	r3, #1
 8003846:	613b      	str	r3, [r7, #16]
 8003848:	e010      	b.n	800386c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b80      	cmp	r3, #128	; 0x80
 800384e:	d902      	bls.n	8003856 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003850:	2303      	movs	r3, #3
 8003852:	613b      	str	r3, [r7, #16]
 8003854:	e00a      	b.n	800386c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b80      	cmp	r3, #128	; 0x80
 800385a:	d102      	bne.n	8003862 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800385c:	2302      	movs	r3, #2
 800385e:	613b      	str	r3, [r7, #16]
 8003860:	e004      	b.n	800386c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b70      	cmp	r3, #112	; 0x70
 8003866:	d101      	bne.n	800386c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003868:	2301      	movs	r3, #1
 800386a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800386c:	4b0b      	ldr	r3, [pc, #44]	; (800389c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f023 0207 	bic.w	r2, r3, #7
 8003874:	4909      	ldr	r1, [pc, #36]	; (800389c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	4313      	orrs	r3, r2
 800387a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800387c:	4b07      	ldr	r3, [pc, #28]	; (800389c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	429a      	cmp	r2, r3
 8003888:	d001      	beq.n	800388e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e000      	b.n	8003890 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3718      	adds	r7, #24
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40021000 	.word	0x40021000
 800389c:	40022000 	.word	0x40022000

080038a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038a8:	2300      	movs	r3, #0
 80038aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038ac:	2300      	movs	r3, #0
 80038ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d041      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038c4:	d02a      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80038c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038ca:	d824      	bhi.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038d0:	d008      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80038d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038d6:	d81e      	bhi.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80038dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038e0:	d010      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80038e2:	e018      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80038e4:	4b86      	ldr	r3, [pc, #536]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	4a85      	ldr	r2, [pc, #532]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038f0:	e015      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	3304      	adds	r3, #4
 80038f6:	2100      	movs	r1, #0
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 fabb 	bl	8003e74 <RCCEx_PLLSAI1_Config>
 80038fe:	4603      	mov	r3, r0
 8003900:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003902:	e00c      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3320      	adds	r3, #32
 8003908:	2100      	movs	r1, #0
 800390a:	4618      	mov	r0, r3
 800390c:	f000 fba6 	bl	800405c <RCCEx_PLLSAI2_Config>
 8003910:	4603      	mov	r3, r0
 8003912:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003914:	e003      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	74fb      	strb	r3, [r7, #19]
      break;
 800391a:	e000      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800391c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800391e:	7cfb      	ldrb	r3, [r7, #19]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10b      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003924:	4b76      	ldr	r3, [pc, #472]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003932:	4973      	ldr	r1, [pc, #460]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003934:	4313      	orrs	r3, r2
 8003936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800393a:	e001      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800393c:	7cfb      	ldrb	r3, [r7, #19]
 800393e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d041      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003950:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003954:	d02a      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003956:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800395a:	d824      	bhi.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800395c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003960:	d008      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003962:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003966:	d81e      	bhi.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00a      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800396c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003970:	d010      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003972:	e018      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003974:	4b62      	ldr	r3, [pc, #392]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	4a61      	ldr	r2, [pc, #388]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800397a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800397e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003980:	e015      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	3304      	adds	r3, #4
 8003986:	2100      	movs	r1, #0
 8003988:	4618      	mov	r0, r3
 800398a:	f000 fa73 	bl	8003e74 <RCCEx_PLLSAI1_Config>
 800398e:	4603      	mov	r3, r0
 8003990:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003992:	e00c      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3320      	adds	r3, #32
 8003998:	2100      	movs	r1, #0
 800399a:	4618      	mov	r0, r3
 800399c:	f000 fb5e 	bl	800405c <RCCEx_PLLSAI2_Config>
 80039a0:	4603      	mov	r3, r0
 80039a2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039a4:	e003      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	74fb      	strb	r3, [r7, #19]
      break;
 80039aa:	e000      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80039ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ae:	7cfb      	ldrb	r3, [r7, #19]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10b      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039b4:	4b52      	ldr	r3, [pc, #328]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039c2:	494f      	ldr	r1, [pc, #316]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80039ca:	e001      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039cc:	7cfb      	ldrb	r3, [r7, #19]
 80039ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 80a0 	beq.w	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039de:	2300      	movs	r3, #0
 80039e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039e2:	4b47      	ldr	r3, [pc, #284]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80039ee:	2301      	movs	r3, #1
 80039f0:	e000      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80039f2:	2300      	movs	r3, #0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00d      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f8:	4b41      	ldr	r3, [pc, #260]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fc:	4a40      	ldr	r2, [pc, #256]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a02:	6593      	str	r3, [r2, #88]	; 0x58
 8003a04:	4b3e      	ldr	r3, [pc, #248]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a10:	2301      	movs	r3, #1
 8003a12:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a14:	4b3b      	ldr	r3, [pc, #236]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a3a      	ldr	r2, [pc, #232]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a20:	f7fd f91c 	bl	8000c5c <HAL_GetTick>
 8003a24:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a26:	e009      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a28:	f7fd f918 	bl	8000c5c <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d902      	bls.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	74fb      	strb	r3, [r7, #19]
        break;
 8003a3a:	e005      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a3c:	4b31      	ldr	r3, [pc, #196]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0ef      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003a48:	7cfb      	ldrb	r3, [r7, #19]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d15c      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a4e:	4b2c      	ldr	r3, [pc, #176]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a58:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d01f      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d019      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a6c:	4b24      	ldr	r3, [pc, #144]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a78:	4b21      	ldr	r3, [pc, #132]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7e:	4a20      	ldr	r2, [pc, #128]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a88:	4b1d      	ldr	r3, [pc, #116]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8e:	4a1c      	ldr	r2, [pc, #112]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a98:	4a19      	ldr	r2, [pc, #100]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d016      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aaa:	f7fd f8d7 	bl	8000c5c <HAL_GetTick>
 8003aae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ab0:	e00b      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab2:	f7fd f8d3 	bl	8000c5c <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d902      	bls.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	74fb      	strb	r3, [r7, #19]
            break;
 8003ac8:	e006      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aca:	4b0d      	ldr	r3, [pc, #52]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0ec      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003ad8:	7cfb      	ldrb	r3, [r7, #19]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10c      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ade:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aee:	4904      	ldr	r1, [pc, #16]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003af6:	e009      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003af8:	7cfb      	ldrb	r3, [r7, #19]
 8003afa:	74bb      	strb	r3, [r7, #18]
 8003afc:	e006      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003afe:	bf00      	nop
 8003b00:	40021000 	.word	0x40021000
 8003b04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b08:	7cfb      	ldrb	r3, [r7, #19]
 8003b0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b0c:	7c7b      	ldrb	r3, [r7, #17]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d105      	bne.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b12:	4b9e      	ldr	r3, [pc, #632]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b16:	4a9d      	ldr	r2, [pc, #628]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b1c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b2a:	4b98      	ldr	r3, [pc, #608]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b30:	f023 0203 	bic.w	r2, r3, #3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b38:	4994      	ldr	r1, [pc, #592]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00a      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b4c:	4b8f      	ldr	r3, [pc, #572]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b52:	f023 020c 	bic.w	r2, r3, #12
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5a:	498c      	ldr	r1, [pc, #560]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0304 	and.w	r3, r3, #4
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b6e:	4b87      	ldr	r3, [pc, #540]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b74:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7c:	4983      	ldr	r1, [pc, #524]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00a      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b90:	4b7e      	ldr	r3, [pc, #504]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9e:	497b      	ldr	r1, [pc, #492]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0310 	and.w	r3, r3, #16
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bb2:	4b76      	ldr	r3, [pc, #472]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc0:	4972      	ldr	r1, [pc, #456]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0320 	and.w	r3, r3, #32
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00a      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bd4:	4b6d      	ldr	r3, [pc, #436]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bda:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be2:	496a      	ldr	r1, [pc, #424]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bf6:	4b65      	ldr	r3, [pc, #404]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c04:	4961      	ldr	r1, [pc, #388]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00a      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c18:	4b5c      	ldr	r3, [pc, #368]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c26:	4959      	ldr	r1, [pc, #356]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c3a:	4b54      	ldr	r3, [pc, #336]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c40:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c48:	4950      	ldr	r1, [pc, #320]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00a      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c5c:	4b4b      	ldr	r3, [pc, #300]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c62:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6a:	4948      	ldr	r1, [pc, #288]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00a      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c7e:	4b43      	ldr	r3, [pc, #268]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8c:	493f      	ldr	r1, [pc, #252]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d028      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ca0:	4b3a      	ldr	r3, [pc, #232]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cae:	4937      	ldr	r1, [pc, #220]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cbe:	d106      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cc0:	4b32      	ldr	r3, [pc, #200]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	4a31      	ldr	r2, [pc, #196]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cca:	60d3      	str	r3, [r2, #12]
 8003ccc:	e011      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cd6:	d10c      	bne.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3304      	adds	r3, #4
 8003cdc:	2101      	movs	r1, #1
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 f8c8 	bl	8003e74 <RCCEx_PLLSAI1_Config>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ce8:	7cfb      	ldrb	r3, [r7, #19]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003cee:	7cfb      	ldrb	r3, [r7, #19]
 8003cf0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d028      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003cfe:	4b23      	ldr	r3, [pc, #140]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d04:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0c:	491f      	ldr	r1, [pc, #124]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d1c:	d106      	bne.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d1e:	4b1b      	ldr	r3, [pc, #108]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	4a1a      	ldr	r2, [pc, #104]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d28:	60d3      	str	r3, [r2, #12]
 8003d2a:	e011      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d34:	d10c      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3304      	adds	r3, #4
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 f899 	bl	8003e74 <RCCEx_PLLSAI1_Config>
 8003d42:	4603      	mov	r3, r0
 8003d44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d46:	7cfb      	ldrb	r3, [r7, #19]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003d4c:	7cfb      	ldrb	r3, [r7, #19]
 8003d4e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d02b      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d5c:	4b0b      	ldr	r3, [pc, #44]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d6a:	4908      	ldr	r1, [pc, #32]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d7a:	d109      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d7c:	4b03      	ldr	r3, [pc, #12]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	4a02      	ldr	r2, [pc, #8]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d86:	60d3      	str	r3, [r2, #12]
 8003d88:	e014      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003d8a:	bf00      	nop
 8003d8c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d98:	d10c      	bne.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	2101      	movs	r1, #1
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 f867 	bl	8003e74 <RCCEx_PLLSAI1_Config>
 8003da6:	4603      	mov	r3, r0
 8003da8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003daa:	7cfb      	ldrb	r3, [r7, #19]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003db0:	7cfb      	ldrb	r3, [r7, #19]
 8003db2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d02f      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003dc0:	4b2b      	ldr	r3, [pc, #172]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dce:	4928      	ldr	r1, [pc, #160]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dde:	d10d      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3304      	adds	r3, #4
 8003de4:	2102      	movs	r1, #2
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 f844 	bl	8003e74 <RCCEx_PLLSAI1_Config>
 8003dec:	4603      	mov	r3, r0
 8003dee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003df0:	7cfb      	ldrb	r3, [r7, #19]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d014      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003df6:	7cfb      	ldrb	r3, [r7, #19]
 8003df8:	74bb      	strb	r3, [r7, #18]
 8003dfa:	e011      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e04:	d10c      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3320      	adds	r3, #32
 8003e0a:	2102      	movs	r1, #2
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 f925 	bl	800405c <RCCEx_PLLSAI2_Config>
 8003e12:	4603      	mov	r3, r0
 8003e14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e16:	7cfb      	ldrb	r3, [r7, #19]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e1c:	7cfb      	ldrb	r3, [r7, #19]
 8003e1e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00a      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e2c:	4b10      	ldr	r3, [pc, #64]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e32:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e3a:	490d      	ldr	r1, [pc, #52]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00b      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e4e:	4b08      	ldr	r3, [pc, #32]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e54:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e5e:	4904      	ldr	r1, [pc, #16]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003e66:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	40021000 	.word	0x40021000

08003e74 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e82:	4b75      	ldr	r3, [pc, #468]	; (8004058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f003 0303 	and.w	r3, r3, #3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d018      	beq.n	8003ec0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e8e:	4b72      	ldr	r3, [pc, #456]	; (8004058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	f003 0203 	and.w	r2, r3, #3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d10d      	bne.n	8003eba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
       ||
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d009      	beq.n	8003eba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003ea6:	4b6c      	ldr	r3, [pc, #432]	; (8004058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	091b      	lsrs	r3, r3, #4
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	1c5a      	adds	r2, r3, #1
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
       ||
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d047      	beq.n	8003f4a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	73fb      	strb	r3, [r7, #15]
 8003ebe:	e044      	b.n	8003f4a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b03      	cmp	r3, #3
 8003ec6:	d018      	beq.n	8003efa <RCCEx_PLLSAI1_Config+0x86>
 8003ec8:	2b03      	cmp	r3, #3
 8003eca:	d825      	bhi.n	8003f18 <RCCEx_PLLSAI1_Config+0xa4>
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d002      	beq.n	8003ed6 <RCCEx_PLLSAI1_Config+0x62>
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d009      	beq.n	8003ee8 <RCCEx_PLLSAI1_Config+0x74>
 8003ed4:	e020      	b.n	8003f18 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ed6:	4b60      	ldr	r3, [pc, #384]	; (8004058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d11d      	bne.n	8003f1e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ee6:	e01a      	b.n	8003f1e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ee8:	4b5b      	ldr	r3, [pc, #364]	; (8004058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d116      	bne.n	8003f22 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ef8:	e013      	b.n	8003f22 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003efa:	4b57      	ldr	r3, [pc, #348]	; (8004058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10f      	bne.n	8003f26 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f06:	4b54      	ldr	r3, [pc, #336]	; (8004058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d109      	bne.n	8003f26 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f16:	e006      	b.n	8003f26 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f1c:	e004      	b.n	8003f28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f1e:	bf00      	nop
 8003f20:	e002      	b.n	8003f28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f22:	bf00      	nop
 8003f24:	e000      	b.n	8003f28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f26:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10d      	bne.n	8003f4a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f2e:	4b4a      	ldr	r3, [pc, #296]	; (8004058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6819      	ldr	r1, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	430b      	orrs	r3, r1
 8003f44:	4944      	ldr	r1, [pc, #272]	; (8004058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f4a:	7bfb      	ldrb	r3, [r7, #15]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d17d      	bne.n	800404c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f50:	4b41      	ldr	r3, [pc, #260]	; (8004058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a40      	ldr	r2, [pc, #256]	; (8004058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f5c:	f7fc fe7e 	bl	8000c5c <HAL_GetTick>
 8003f60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f62:	e009      	b.n	8003f78 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f64:	f7fc fe7a 	bl	8000c5c <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d902      	bls.n	8003f78 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	73fb      	strb	r3, [r7, #15]
        break;
 8003f76:	e005      	b.n	8003f84 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f78:	4b37      	ldr	r3, [pc, #220]	; (8004058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1ef      	bne.n	8003f64 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d160      	bne.n	800404c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d111      	bne.n	8003fb4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f90:	4b31      	ldr	r3, [pc, #196]	; (8004058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6892      	ldr	r2, [r2, #8]
 8003fa0:	0211      	lsls	r1, r2, #8
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	68d2      	ldr	r2, [r2, #12]
 8003fa6:	0912      	lsrs	r2, r2, #4
 8003fa8:	0452      	lsls	r2, r2, #17
 8003faa:	430a      	orrs	r2, r1
 8003fac:	492a      	ldr	r1, [pc, #168]	; (8004058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	610b      	str	r3, [r1, #16]
 8003fb2:	e027      	b.n	8004004 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d112      	bne.n	8003fe0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fba:	4b27      	ldr	r3, [pc, #156]	; (8004058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003fc2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6892      	ldr	r2, [r2, #8]
 8003fca:	0211      	lsls	r1, r2, #8
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6912      	ldr	r2, [r2, #16]
 8003fd0:	0852      	lsrs	r2, r2, #1
 8003fd2:	3a01      	subs	r2, #1
 8003fd4:	0552      	lsls	r2, r2, #21
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	491f      	ldr	r1, [pc, #124]	; (8004058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	610b      	str	r3, [r1, #16]
 8003fde:	e011      	b.n	8004004 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fe0:	4b1d      	ldr	r3, [pc, #116]	; (8004058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003fe8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	6892      	ldr	r2, [r2, #8]
 8003ff0:	0211      	lsls	r1, r2, #8
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6952      	ldr	r2, [r2, #20]
 8003ff6:	0852      	lsrs	r2, r2, #1
 8003ff8:	3a01      	subs	r2, #1
 8003ffa:	0652      	lsls	r2, r2, #25
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	4916      	ldr	r1, [pc, #88]	; (8004058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004000:	4313      	orrs	r3, r2
 8004002:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004004:	4b14      	ldr	r3, [pc, #80]	; (8004058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a13      	ldr	r2, [pc, #76]	; (8004058 <RCCEx_PLLSAI1_Config+0x1e4>)
 800400a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800400e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004010:	f7fc fe24 	bl	8000c5c <HAL_GetTick>
 8004014:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004016:	e009      	b.n	800402c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004018:	f7fc fe20 	bl	8000c5c <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d902      	bls.n	800402c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	73fb      	strb	r3, [r7, #15]
          break;
 800402a:	e005      	b.n	8004038 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800402c:	4b0a      	ldr	r3, [pc, #40]	; (8004058 <RCCEx_PLLSAI1_Config+0x1e4>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0ef      	beq.n	8004018 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004038:	7bfb      	ldrb	r3, [r7, #15]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d106      	bne.n	800404c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800403e:	4b06      	ldr	r3, [pc, #24]	; (8004058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004040:	691a      	ldr	r2, [r3, #16]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	4904      	ldr	r1, [pc, #16]	; (8004058 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004048:	4313      	orrs	r3, r2
 800404a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800404c:	7bfb      	ldrb	r3, [r7, #15]
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	40021000 	.word	0x40021000

0800405c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004066:	2300      	movs	r3, #0
 8004068:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800406a:	4b6a      	ldr	r3, [pc, #424]	; (8004214 <RCCEx_PLLSAI2_Config+0x1b8>)
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d018      	beq.n	80040a8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004076:	4b67      	ldr	r3, [pc, #412]	; (8004214 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f003 0203 	and.w	r2, r3, #3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d10d      	bne.n	80040a2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
       ||
 800408a:	2b00      	cmp	r3, #0
 800408c:	d009      	beq.n	80040a2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800408e:	4b61      	ldr	r3, [pc, #388]	; (8004214 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	091b      	lsrs	r3, r3, #4
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
       ||
 800409e:	429a      	cmp	r2, r3
 80040a0:	d047      	beq.n	8004132 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	73fb      	strb	r3, [r7, #15]
 80040a6:	e044      	b.n	8004132 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2b03      	cmp	r3, #3
 80040ae:	d018      	beq.n	80040e2 <RCCEx_PLLSAI2_Config+0x86>
 80040b0:	2b03      	cmp	r3, #3
 80040b2:	d825      	bhi.n	8004100 <RCCEx_PLLSAI2_Config+0xa4>
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d002      	beq.n	80040be <RCCEx_PLLSAI2_Config+0x62>
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d009      	beq.n	80040d0 <RCCEx_PLLSAI2_Config+0x74>
 80040bc:	e020      	b.n	8004100 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040be:	4b55      	ldr	r3, [pc, #340]	; (8004214 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d11d      	bne.n	8004106 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040ce:	e01a      	b.n	8004106 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040d0:	4b50      	ldr	r3, [pc, #320]	; (8004214 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d116      	bne.n	800410a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040e0:	e013      	b.n	800410a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040e2:	4b4c      	ldr	r3, [pc, #304]	; (8004214 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10f      	bne.n	800410e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040ee:	4b49      	ldr	r3, [pc, #292]	; (8004214 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d109      	bne.n	800410e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040fe:	e006      	b.n	800410e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	73fb      	strb	r3, [r7, #15]
      break;
 8004104:	e004      	b.n	8004110 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004106:	bf00      	nop
 8004108:	e002      	b.n	8004110 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800410a:	bf00      	nop
 800410c:	e000      	b.n	8004110 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800410e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004110:	7bfb      	ldrb	r3, [r7, #15]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10d      	bne.n	8004132 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004116:	4b3f      	ldr	r3, [pc, #252]	; (8004214 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6819      	ldr	r1, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	3b01      	subs	r3, #1
 8004128:	011b      	lsls	r3, r3, #4
 800412a:	430b      	orrs	r3, r1
 800412c:	4939      	ldr	r1, [pc, #228]	; (8004214 <RCCEx_PLLSAI2_Config+0x1b8>)
 800412e:	4313      	orrs	r3, r2
 8004130:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004132:	7bfb      	ldrb	r3, [r7, #15]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d167      	bne.n	8004208 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004138:	4b36      	ldr	r3, [pc, #216]	; (8004214 <RCCEx_PLLSAI2_Config+0x1b8>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a35      	ldr	r2, [pc, #212]	; (8004214 <RCCEx_PLLSAI2_Config+0x1b8>)
 800413e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004142:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004144:	f7fc fd8a 	bl	8000c5c <HAL_GetTick>
 8004148:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800414a:	e009      	b.n	8004160 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800414c:	f7fc fd86 	bl	8000c5c <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d902      	bls.n	8004160 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	73fb      	strb	r3, [r7, #15]
        break;
 800415e:	e005      	b.n	800416c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004160:	4b2c      	ldr	r3, [pc, #176]	; (8004214 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1ef      	bne.n	800414c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800416c:	7bfb      	ldrb	r3, [r7, #15]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d14a      	bne.n	8004208 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d111      	bne.n	800419c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004178:	4b26      	ldr	r3, [pc, #152]	; (8004214 <RCCEx_PLLSAI2_Config+0x1b8>)
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6892      	ldr	r2, [r2, #8]
 8004188:	0211      	lsls	r1, r2, #8
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	68d2      	ldr	r2, [r2, #12]
 800418e:	0912      	lsrs	r2, r2, #4
 8004190:	0452      	lsls	r2, r2, #17
 8004192:	430a      	orrs	r2, r1
 8004194:	491f      	ldr	r1, [pc, #124]	; (8004214 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004196:	4313      	orrs	r3, r2
 8004198:	614b      	str	r3, [r1, #20]
 800419a:	e011      	b.n	80041c0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800419c:	4b1d      	ldr	r3, [pc, #116]	; (8004214 <RCCEx_PLLSAI2_Config+0x1b8>)
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80041a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6892      	ldr	r2, [r2, #8]
 80041ac:	0211      	lsls	r1, r2, #8
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	6912      	ldr	r2, [r2, #16]
 80041b2:	0852      	lsrs	r2, r2, #1
 80041b4:	3a01      	subs	r2, #1
 80041b6:	0652      	lsls	r2, r2, #25
 80041b8:	430a      	orrs	r2, r1
 80041ba:	4916      	ldr	r1, [pc, #88]	; (8004214 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80041c0:	4b14      	ldr	r3, [pc, #80]	; (8004214 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a13      	ldr	r2, [pc, #76]	; (8004214 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041cc:	f7fc fd46 	bl	8000c5c <HAL_GetTick>
 80041d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041d2:	e009      	b.n	80041e8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80041d4:	f7fc fd42 	bl	8000c5c <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d902      	bls.n	80041e8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	73fb      	strb	r3, [r7, #15]
          break;
 80041e6:	e005      	b.n	80041f4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041e8:	4b0a      	ldr	r3, [pc, #40]	; (8004214 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d0ef      	beq.n	80041d4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d106      	bne.n	8004208 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80041fa:	4b06      	ldr	r3, [pc, #24]	; (8004214 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041fc:	695a      	ldr	r2, [r3, #20]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	4904      	ldr	r1, [pc, #16]	; (8004214 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004204:	4313      	orrs	r3, r2
 8004206:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004208:	7bfb      	ldrb	r3, [r7, #15]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	40021000 	.word	0x40021000

08004218 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e040      	b.n	80042ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800422e:	2b00      	cmp	r3, #0
 8004230:	d106      	bne.n	8004240 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7fc fbdc 	bl	80009f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2224      	movs	r2, #36	; 0x24
 8004244:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0201 	bic.w	r2, r2, #1
 8004254:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f82c 	bl	80042b4 <UART_SetConfig>
 800425c:	4603      	mov	r3, r0
 800425e:	2b01      	cmp	r3, #1
 8004260:	d101      	bne.n	8004266 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e022      	b.n	80042ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	2b00      	cmp	r3, #0
 800426c:	d002      	beq.n	8004274 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 fad8 	bl	8004824 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004282:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689a      	ldr	r2, [r3, #8]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004292:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0201 	orr.w	r2, r2, #1
 80042a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 fb5f 	bl	8004968 <UART_CheckIdleState>
 80042aa:	4603      	mov	r3, r0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042b8:	b08a      	sub	sp, #40	; 0x28
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042be:	2300      	movs	r3, #0
 80042c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	431a      	orrs	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	431a      	orrs	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	4313      	orrs	r3, r2
 80042da:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	4ba4      	ldr	r3, [pc, #656]	; (8004574 <UART_SetConfig+0x2c0>)
 80042e4:	4013      	ands	r3, r2
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	6812      	ldr	r2, [r2, #0]
 80042ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042ec:	430b      	orrs	r3, r1
 80042ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a99      	ldr	r2, [pc, #612]	; (8004578 <UART_SetConfig+0x2c4>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d004      	beq.n	8004320 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800431c:	4313      	orrs	r3, r2
 800431e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004330:	430a      	orrs	r2, r1
 8004332:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a90      	ldr	r2, [pc, #576]	; (800457c <UART_SetConfig+0x2c8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d126      	bne.n	800438c <UART_SetConfig+0xd8>
 800433e:	4b90      	ldr	r3, [pc, #576]	; (8004580 <UART_SetConfig+0x2cc>)
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004344:	f003 0303 	and.w	r3, r3, #3
 8004348:	2b03      	cmp	r3, #3
 800434a:	d81b      	bhi.n	8004384 <UART_SetConfig+0xd0>
 800434c:	a201      	add	r2, pc, #4	; (adr r2, 8004354 <UART_SetConfig+0xa0>)
 800434e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004352:	bf00      	nop
 8004354:	08004365 	.word	0x08004365
 8004358:	08004375 	.word	0x08004375
 800435c:	0800436d 	.word	0x0800436d
 8004360:	0800437d 	.word	0x0800437d
 8004364:	2301      	movs	r3, #1
 8004366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800436a:	e116      	b.n	800459a <UART_SetConfig+0x2e6>
 800436c:	2302      	movs	r3, #2
 800436e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004372:	e112      	b.n	800459a <UART_SetConfig+0x2e6>
 8004374:	2304      	movs	r3, #4
 8004376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800437a:	e10e      	b.n	800459a <UART_SetConfig+0x2e6>
 800437c:	2308      	movs	r3, #8
 800437e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004382:	e10a      	b.n	800459a <UART_SetConfig+0x2e6>
 8004384:	2310      	movs	r3, #16
 8004386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800438a:	e106      	b.n	800459a <UART_SetConfig+0x2e6>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a7c      	ldr	r2, [pc, #496]	; (8004584 <UART_SetConfig+0x2d0>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d138      	bne.n	8004408 <UART_SetConfig+0x154>
 8004396:	4b7a      	ldr	r3, [pc, #488]	; (8004580 <UART_SetConfig+0x2cc>)
 8004398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439c:	f003 030c 	and.w	r3, r3, #12
 80043a0:	2b0c      	cmp	r3, #12
 80043a2:	d82d      	bhi.n	8004400 <UART_SetConfig+0x14c>
 80043a4:	a201      	add	r2, pc, #4	; (adr r2, 80043ac <UART_SetConfig+0xf8>)
 80043a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043aa:	bf00      	nop
 80043ac:	080043e1 	.word	0x080043e1
 80043b0:	08004401 	.word	0x08004401
 80043b4:	08004401 	.word	0x08004401
 80043b8:	08004401 	.word	0x08004401
 80043bc:	080043f1 	.word	0x080043f1
 80043c0:	08004401 	.word	0x08004401
 80043c4:	08004401 	.word	0x08004401
 80043c8:	08004401 	.word	0x08004401
 80043cc:	080043e9 	.word	0x080043e9
 80043d0:	08004401 	.word	0x08004401
 80043d4:	08004401 	.word	0x08004401
 80043d8:	08004401 	.word	0x08004401
 80043dc:	080043f9 	.word	0x080043f9
 80043e0:	2300      	movs	r3, #0
 80043e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043e6:	e0d8      	b.n	800459a <UART_SetConfig+0x2e6>
 80043e8:	2302      	movs	r3, #2
 80043ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ee:	e0d4      	b.n	800459a <UART_SetConfig+0x2e6>
 80043f0:	2304      	movs	r3, #4
 80043f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043f6:	e0d0      	b.n	800459a <UART_SetConfig+0x2e6>
 80043f8:	2308      	movs	r3, #8
 80043fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043fe:	e0cc      	b.n	800459a <UART_SetConfig+0x2e6>
 8004400:	2310      	movs	r3, #16
 8004402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004406:	e0c8      	b.n	800459a <UART_SetConfig+0x2e6>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a5e      	ldr	r2, [pc, #376]	; (8004588 <UART_SetConfig+0x2d4>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d125      	bne.n	800445e <UART_SetConfig+0x1aa>
 8004412:	4b5b      	ldr	r3, [pc, #364]	; (8004580 <UART_SetConfig+0x2cc>)
 8004414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004418:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800441c:	2b30      	cmp	r3, #48	; 0x30
 800441e:	d016      	beq.n	800444e <UART_SetConfig+0x19a>
 8004420:	2b30      	cmp	r3, #48	; 0x30
 8004422:	d818      	bhi.n	8004456 <UART_SetConfig+0x1a2>
 8004424:	2b20      	cmp	r3, #32
 8004426:	d00a      	beq.n	800443e <UART_SetConfig+0x18a>
 8004428:	2b20      	cmp	r3, #32
 800442a:	d814      	bhi.n	8004456 <UART_SetConfig+0x1a2>
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <UART_SetConfig+0x182>
 8004430:	2b10      	cmp	r3, #16
 8004432:	d008      	beq.n	8004446 <UART_SetConfig+0x192>
 8004434:	e00f      	b.n	8004456 <UART_SetConfig+0x1a2>
 8004436:	2300      	movs	r3, #0
 8004438:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800443c:	e0ad      	b.n	800459a <UART_SetConfig+0x2e6>
 800443e:	2302      	movs	r3, #2
 8004440:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004444:	e0a9      	b.n	800459a <UART_SetConfig+0x2e6>
 8004446:	2304      	movs	r3, #4
 8004448:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800444c:	e0a5      	b.n	800459a <UART_SetConfig+0x2e6>
 800444e:	2308      	movs	r3, #8
 8004450:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004454:	e0a1      	b.n	800459a <UART_SetConfig+0x2e6>
 8004456:	2310      	movs	r3, #16
 8004458:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800445c:	e09d      	b.n	800459a <UART_SetConfig+0x2e6>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a4a      	ldr	r2, [pc, #296]	; (800458c <UART_SetConfig+0x2d8>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d125      	bne.n	80044b4 <UART_SetConfig+0x200>
 8004468:	4b45      	ldr	r3, [pc, #276]	; (8004580 <UART_SetConfig+0x2cc>)
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004472:	2bc0      	cmp	r3, #192	; 0xc0
 8004474:	d016      	beq.n	80044a4 <UART_SetConfig+0x1f0>
 8004476:	2bc0      	cmp	r3, #192	; 0xc0
 8004478:	d818      	bhi.n	80044ac <UART_SetConfig+0x1f8>
 800447a:	2b80      	cmp	r3, #128	; 0x80
 800447c:	d00a      	beq.n	8004494 <UART_SetConfig+0x1e0>
 800447e:	2b80      	cmp	r3, #128	; 0x80
 8004480:	d814      	bhi.n	80044ac <UART_SetConfig+0x1f8>
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <UART_SetConfig+0x1d8>
 8004486:	2b40      	cmp	r3, #64	; 0x40
 8004488:	d008      	beq.n	800449c <UART_SetConfig+0x1e8>
 800448a:	e00f      	b.n	80044ac <UART_SetConfig+0x1f8>
 800448c:	2300      	movs	r3, #0
 800448e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004492:	e082      	b.n	800459a <UART_SetConfig+0x2e6>
 8004494:	2302      	movs	r3, #2
 8004496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800449a:	e07e      	b.n	800459a <UART_SetConfig+0x2e6>
 800449c:	2304      	movs	r3, #4
 800449e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044a2:	e07a      	b.n	800459a <UART_SetConfig+0x2e6>
 80044a4:	2308      	movs	r3, #8
 80044a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044aa:	e076      	b.n	800459a <UART_SetConfig+0x2e6>
 80044ac:	2310      	movs	r3, #16
 80044ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044b2:	e072      	b.n	800459a <UART_SetConfig+0x2e6>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a35      	ldr	r2, [pc, #212]	; (8004590 <UART_SetConfig+0x2dc>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d12a      	bne.n	8004514 <UART_SetConfig+0x260>
 80044be:	4b30      	ldr	r3, [pc, #192]	; (8004580 <UART_SetConfig+0x2cc>)
 80044c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044cc:	d01a      	beq.n	8004504 <UART_SetConfig+0x250>
 80044ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044d2:	d81b      	bhi.n	800450c <UART_SetConfig+0x258>
 80044d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044d8:	d00c      	beq.n	80044f4 <UART_SetConfig+0x240>
 80044da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044de:	d815      	bhi.n	800450c <UART_SetConfig+0x258>
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <UART_SetConfig+0x238>
 80044e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044e8:	d008      	beq.n	80044fc <UART_SetConfig+0x248>
 80044ea:	e00f      	b.n	800450c <UART_SetConfig+0x258>
 80044ec:	2300      	movs	r3, #0
 80044ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044f2:	e052      	b.n	800459a <UART_SetConfig+0x2e6>
 80044f4:	2302      	movs	r3, #2
 80044f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044fa:	e04e      	b.n	800459a <UART_SetConfig+0x2e6>
 80044fc:	2304      	movs	r3, #4
 80044fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004502:	e04a      	b.n	800459a <UART_SetConfig+0x2e6>
 8004504:	2308      	movs	r3, #8
 8004506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800450a:	e046      	b.n	800459a <UART_SetConfig+0x2e6>
 800450c:	2310      	movs	r3, #16
 800450e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004512:	e042      	b.n	800459a <UART_SetConfig+0x2e6>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a17      	ldr	r2, [pc, #92]	; (8004578 <UART_SetConfig+0x2c4>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d13a      	bne.n	8004594 <UART_SetConfig+0x2e0>
 800451e:	4b18      	ldr	r3, [pc, #96]	; (8004580 <UART_SetConfig+0x2cc>)
 8004520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004524:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004528:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800452c:	d01a      	beq.n	8004564 <UART_SetConfig+0x2b0>
 800452e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004532:	d81b      	bhi.n	800456c <UART_SetConfig+0x2b8>
 8004534:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004538:	d00c      	beq.n	8004554 <UART_SetConfig+0x2a0>
 800453a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800453e:	d815      	bhi.n	800456c <UART_SetConfig+0x2b8>
 8004540:	2b00      	cmp	r3, #0
 8004542:	d003      	beq.n	800454c <UART_SetConfig+0x298>
 8004544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004548:	d008      	beq.n	800455c <UART_SetConfig+0x2a8>
 800454a:	e00f      	b.n	800456c <UART_SetConfig+0x2b8>
 800454c:	2300      	movs	r3, #0
 800454e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004552:	e022      	b.n	800459a <UART_SetConfig+0x2e6>
 8004554:	2302      	movs	r3, #2
 8004556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800455a:	e01e      	b.n	800459a <UART_SetConfig+0x2e6>
 800455c:	2304      	movs	r3, #4
 800455e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004562:	e01a      	b.n	800459a <UART_SetConfig+0x2e6>
 8004564:	2308      	movs	r3, #8
 8004566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800456a:	e016      	b.n	800459a <UART_SetConfig+0x2e6>
 800456c:	2310      	movs	r3, #16
 800456e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004572:	e012      	b.n	800459a <UART_SetConfig+0x2e6>
 8004574:	efff69f3 	.word	0xefff69f3
 8004578:	40008000 	.word	0x40008000
 800457c:	40013800 	.word	0x40013800
 8004580:	40021000 	.word	0x40021000
 8004584:	40004400 	.word	0x40004400
 8004588:	40004800 	.word	0x40004800
 800458c:	40004c00 	.word	0x40004c00
 8004590:	40005000 	.word	0x40005000
 8004594:	2310      	movs	r3, #16
 8004596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a9f      	ldr	r2, [pc, #636]	; (800481c <UART_SetConfig+0x568>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d17a      	bne.n	800469a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d824      	bhi.n	80045f6 <UART_SetConfig+0x342>
 80045ac:	a201      	add	r2, pc, #4	; (adr r2, 80045b4 <UART_SetConfig+0x300>)
 80045ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b2:	bf00      	nop
 80045b4:	080045d9 	.word	0x080045d9
 80045b8:	080045f7 	.word	0x080045f7
 80045bc:	080045e1 	.word	0x080045e1
 80045c0:	080045f7 	.word	0x080045f7
 80045c4:	080045e7 	.word	0x080045e7
 80045c8:	080045f7 	.word	0x080045f7
 80045cc:	080045f7 	.word	0x080045f7
 80045d0:	080045f7 	.word	0x080045f7
 80045d4:	080045ef 	.word	0x080045ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045d8:	f7ff f8d6 	bl	8003788 <HAL_RCC_GetPCLK1Freq>
 80045dc:	61f8      	str	r0, [r7, #28]
        break;
 80045de:	e010      	b.n	8004602 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045e0:	4b8f      	ldr	r3, [pc, #572]	; (8004820 <UART_SetConfig+0x56c>)
 80045e2:	61fb      	str	r3, [r7, #28]
        break;
 80045e4:	e00d      	b.n	8004602 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045e6:	f7ff f837 	bl	8003658 <HAL_RCC_GetSysClockFreq>
 80045ea:	61f8      	str	r0, [r7, #28]
        break;
 80045ec:	e009      	b.n	8004602 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045f2:	61fb      	str	r3, [r7, #28]
        break;
 80045f4:	e005      	b.n	8004602 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004600:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 80fb 	beq.w	8004800 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	4613      	mov	r3, r2
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	4413      	add	r3, r2
 8004614:	69fa      	ldr	r2, [r7, #28]
 8004616:	429a      	cmp	r2, r3
 8004618:	d305      	bcc.n	8004626 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004620:	69fa      	ldr	r2, [r7, #28]
 8004622:	429a      	cmp	r2, r3
 8004624:	d903      	bls.n	800462e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800462c:	e0e8      	b.n	8004800 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	2200      	movs	r2, #0
 8004632:	461c      	mov	r4, r3
 8004634:	4615      	mov	r5, r2
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	f04f 0300 	mov.w	r3, #0
 800463e:	022b      	lsls	r3, r5, #8
 8004640:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004644:	0222      	lsls	r2, r4, #8
 8004646:	68f9      	ldr	r1, [r7, #12]
 8004648:	6849      	ldr	r1, [r1, #4]
 800464a:	0849      	lsrs	r1, r1, #1
 800464c:	2000      	movs	r0, #0
 800464e:	4688      	mov	r8, r1
 8004650:	4681      	mov	r9, r0
 8004652:	eb12 0a08 	adds.w	sl, r2, r8
 8004656:	eb43 0b09 	adc.w	fp, r3, r9
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	603b      	str	r3, [r7, #0]
 8004662:	607a      	str	r2, [r7, #4]
 8004664:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004668:	4650      	mov	r0, sl
 800466a:	4659      	mov	r1, fp
 800466c:	f7fb fdac 	bl	80001c8 <__aeabi_uldivmod>
 8004670:	4602      	mov	r2, r0
 8004672:	460b      	mov	r3, r1
 8004674:	4613      	mov	r3, r2
 8004676:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800467e:	d308      	bcc.n	8004692 <UART_SetConfig+0x3de>
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004686:	d204      	bcs.n	8004692 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	60da      	str	r2, [r3, #12]
 8004690:	e0b6      	b.n	8004800 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004698:	e0b2      	b.n	8004800 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046a2:	d15e      	bne.n	8004762 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80046a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d828      	bhi.n	80046fe <UART_SetConfig+0x44a>
 80046ac:	a201      	add	r2, pc, #4	; (adr r2, 80046b4 <UART_SetConfig+0x400>)
 80046ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b2:	bf00      	nop
 80046b4:	080046d9 	.word	0x080046d9
 80046b8:	080046e1 	.word	0x080046e1
 80046bc:	080046e9 	.word	0x080046e9
 80046c0:	080046ff 	.word	0x080046ff
 80046c4:	080046ef 	.word	0x080046ef
 80046c8:	080046ff 	.word	0x080046ff
 80046cc:	080046ff 	.word	0x080046ff
 80046d0:	080046ff 	.word	0x080046ff
 80046d4:	080046f7 	.word	0x080046f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046d8:	f7ff f856 	bl	8003788 <HAL_RCC_GetPCLK1Freq>
 80046dc:	61f8      	str	r0, [r7, #28]
        break;
 80046de:	e014      	b.n	800470a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046e0:	f7ff f868 	bl	80037b4 <HAL_RCC_GetPCLK2Freq>
 80046e4:	61f8      	str	r0, [r7, #28]
        break;
 80046e6:	e010      	b.n	800470a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046e8:	4b4d      	ldr	r3, [pc, #308]	; (8004820 <UART_SetConfig+0x56c>)
 80046ea:	61fb      	str	r3, [r7, #28]
        break;
 80046ec:	e00d      	b.n	800470a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ee:	f7fe ffb3 	bl	8003658 <HAL_RCC_GetSysClockFreq>
 80046f2:	61f8      	str	r0, [r7, #28]
        break;
 80046f4:	e009      	b.n	800470a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046fa:	61fb      	str	r3, [r7, #28]
        break;
 80046fc:	e005      	b.n	800470a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80046fe:	2300      	movs	r3, #0
 8004700:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004708:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d077      	beq.n	8004800 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	005a      	lsls	r2, r3, #1
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	085b      	lsrs	r3, r3, #1
 800471a:	441a      	add	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	fbb2 f3f3 	udiv	r3, r2, r3
 8004724:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	2b0f      	cmp	r3, #15
 800472a:	d916      	bls.n	800475a <UART_SetConfig+0x4a6>
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004732:	d212      	bcs.n	800475a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	b29b      	uxth	r3, r3
 8004738:	f023 030f 	bic.w	r3, r3, #15
 800473c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	085b      	lsrs	r3, r3, #1
 8004742:	b29b      	uxth	r3, r3
 8004744:	f003 0307 	and.w	r3, r3, #7
 8004748:	b29a      	uxth	r2, r3
 800474a:	8afb      	ldrh	r3, [r7, #22]
 800474c:	4313      	orrs	r3, r2
 800474e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	8afa      	ldrh	r2, [r7, #22]
 8004756:	60da      	str	r2, [r3, #12]
 8004758:	e052      	b.n	8004800 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004760:	e04e      	b.n	8004800 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004762:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004766:	2b08      	cmp	r3, #8
 8004768:	d827      	bhi.n	80047ba <UART_SetConfig+0x506>
 800476a:	a201      	add	r2, pc, #4	; (adr r2, 8004770 <UART_SetConfig+0x4bc>)
 800476c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004770:	08004795 	.word	0x08004795
 8004774:	0800479d 	.word	0x0800479d
 8004778:	080047a5 	.word	0x080047a5
 800477c:	080047bb 	.word	0x080047bb
 8004780:	080047ab 	.word	0x080047ab
 8004784:	080047bb 	.word	0x080047bb
 8004788:	080047bb 	.word	0x080047bb
 800478c:	080047bb 	.word	0x080047bb
 8004790:	080047b3 	.word	0x080047b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004794:	f7fe fff8 	bl	8003788 <HAL_RCC_GetPCLK1Freq>
 8004798:	61f8      	str	r0, [r7, #28]
        break;
 800479a:	e014      	b.n	80047c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800479c:	f7ff f80a 	bl	80037b4 <HAL_RCC_GetPCLK2Freq>
 80047a0:	61f8      	str	r0, [r7, #28]
        break;
 80047a2:	e010      	b.n	80047c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047a4:	4b1e      	ldr	r3, [pc, #120]	; (8004820 <UART_SetConfig+0x56c>)
 80047a6:	61fb      	str	r3, [r7, #28]
        break;
 80047a8:	e00d      	b.n	80047c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047aa:	f7fe ff55 	bl	8003658 <HAL_RCC_GetSysClockFreq>
 80047ae:	61f8      	str	r0, [r7, #28]
        break;
 80047b0:	e009      	b.n	80047c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047b6:	61fb      	str	r3, [r7, #28]
        break;
 80047b8:	e005      	b.n	80047c6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80047ba:	2300      	movs	r3, #0
 80047bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80047c4:	bf00      	nop
    }

    if (pclk != 0U)
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d019      	beq.n	8004800 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	085a      	lsrs	r2, r3, #1
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	441a      	add	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	fbb2 f3f3 	udiv	r3, r2, r3
 80047de:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	2b0f      	cmp	r3, #15
 80047e4:	d909      	bls.n	80047fa <UART_SetConfig+0x546>
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ec:	d205      	bcs.n	80047fa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	60da      	str	r2, [r3, #12]
 80047f8:	e002      	b.n	8004800 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800480c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004810:	4618      	mov	r0, r3
 8004812:	3728      	adds	r7, #40	; 0x28
 8004814:	46bd      	mov	sp, r7
 8004816:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800481a:	bf00      	nop
 800481c:	40008000 	.word	0x40008000
 8004820:	00f42400 	.word	0x00f42400

08004824 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00a      	beq.n	800484e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00a      	beq.n	8004870 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00a      	beq.n	8004892 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004896:	f003 0308 	and.w	r3, r3, #8
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00a      	beq.n	80048b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	f003 0310 	and.w	r3, r3, #16
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00a      	beq.n	80048d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	f003 0320 	and.w	r3, r3, #32
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004900:	2b00      	cmp	r3, #0
 8004902:	d01a      	beq.n	800493a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	430a      	orrs	r2, r1
 8004918:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004922:	d10a      	bne.n	800493a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	430a      	orrs	r2, r1
 8004938:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00a      	beq.n	800495c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	605a      	str	r2, [r3, #4]
  }
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b086      	sub	sp, #24
 800496c:	af02      	add	r7, sp, #8
 800496e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004978:	f7fc f970 	bl	8000c5c <HAL_GetTick>
 800497c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0308 	and.w	r3, r3, #8
 8004988:	2b08      	cmp	r3, #8
 800498a:	d10e      	bne.n	80049aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800498c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f82d 	bl	80049fa <UART_WaitOnFlagUntilTimeout>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e023      	b.n	80049f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	2b04      	cmp	r3, #4
 80049b6:	d10e      	bne.n	80049d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f817 	bl	80049fa <UART_WaitOnFlagUntilTimeout>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e00d      	b.n	80049f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2220      	movs	r2, #32
 80049da:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2220      	movs	r2, #32
 80049e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b09c      	sub	sp, #112	; 0x70
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	60f8      	str	r0, [r7, #12]
 8004a02:	60b9      	str	r1, [r7, #8]
 8004a04:	603b      	str	r3, [r7, #0]
 8004a06:	4613      	mov	r3, r2
 8004a08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a0a:	e0a5      	b.n	8004b58 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a12:	f000 80a1 	beq.w	8004b58 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a16:	f7fc f921 	bl	8000c5c <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d302      	bcc.n	8004a2c <UART_WaitOnFlagUntilTimeout+0x32>
 8004a26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d13e      	bne.n	8004aaa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a34:	e853 3f00 	ldrex	r3, [r3]
 8004a38:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a40:	667b      	str	r3, [r7, #100]	; 0x64
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	461a      	mov	r2, r3
 8004a48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a4c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a52:	e841 2300 	strex	r3, r2, [r1]
 8004a56:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004a58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1e6      	bne.n	8004a2c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	3308      	adds	r3, #8
 8004a64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a68:	e853 3f00 	ldrex	r3, [r3]
 8004a6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a70:	f023 0301 	bic.w	r3, r3, #1
 8004a74:	663b      	str	r3, [r7, #96]	; 0x60
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3308      	adds	r3, #8
 8004a7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004a7e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004a80:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a86:	e841 2300 	strex	r3, r2, [r1]
 8004a8a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1e5      	bne.n	8004a5e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2220      	movs	r2, #32
 8004a96:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e067      	b.n	8004b7a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0304 	and.w	r3, r3, #4
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d04f      	beq.n	8004b58 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ac2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ac6:	d147      	bne.n	8004b58 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ad0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ada:	e853 3f00 	ldrex	r3, [r3]
 8004ade:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ae6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	461a      	mov	r2, r3
 8004aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004af0:	637b      	str	r3, [r7, #52]	; 0x34
 8004af2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004af6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004af8:	e841 2300 	strex	r3, r2, [r1]
 8004afc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1e6      	bne.n	8004ad2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	3308      	adds	r3, #8
 8004b0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	e853 3f00 	ldrex	r3, [r3]
 8004b12:	613b      	str	r3, [r7, #16]
   return(result);
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	f023 0301 	bic.w	r3, r3, #1
 8004b1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	3308      	adds	r3, #8
 8004b22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b24:	623a      	str	r2, [r7, #32]
 8004b26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b28:	69f9      	ldr	r1, [r7, #28]
 8004b2a:	6a3a      	ldr	r2, [r7, #32]
 8004b2c:	e841 2300 	strex	r3, r2, [r1]
 8004b30:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1e5      	bne.n	8004b04 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2220      	movs	r2, #32
 8004b42:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e010      	b.n	8004b7a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	69da      	ldr	r2, [r3, #28]
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	4013      	ands	r3, r2
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	bf0c      	ite	eq
 8004b68:	2301      	moveq	r3, #1
 8004b6a:	2300      	movne	r3, #0
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	461a      	mov	r2, r3
 8004b70:	79fb      	ldrb	r3, [r7, #7]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	f43f af4a 	beq.w	8004a0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3770      	adds	r7, #112	; 0x70
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
	...

08004b84 <__libc_init_array>:
 8004b84:	b570      	push	{r4, r5, r6, lr}
 8004b86:	4d0d      	ldr	r5, [pc, #52]	; (8004bbc <__libc_init_array+0x38>)
 8004b88:	4c0d      	ldr	r4, [pc, #52]	; (8004bc0 <__libc_init_array+0x3c>)
 8004b8a:	1b64      	subs	r4, r4, r5
 8004b8c:	10a4      	asrs	r4, r4, #2
 8004b8e:	2600      	movs	r6, #0
 8004b90:	42a6      	cmp	r6, r4
 8004b92:	d109      	bne.n	8004ba8 <__libc_init_array+0x24>
 8004b94:	4d0b      	ldr	r5, [pc, #44]	; (8004bc4 <__libc_init_array+0x40>)
 8004b96:	4c0c      	ldr	r4, [pc, #48]	; (8004bc8 <__libc_init_array+0x44>)
 8004b98:	f000 f820 	bl	8004bdc <_init>
 8004b9c:	1b64      	subs	r4, r4, r5
 8004b9e:	10a4      	asrs	r4, r4, #2
 8004ba0:	2600      	movs	r6, #0
 8004ba2:	42a6      	cmp	r6, r4
 8004ba4:	d105      	bne.n	8004bb2 <__libc_init_array+0x2e>
 8004ba6:	bd70      	pop	{r4, r5, r6, pc}
 8004ba8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bac:	4798      	blx	r3
 8004bae:	3601      	adds	r6, #1
 8004bb0:	e7ee      	b.n	8004b90 <__libc_init_array+0xc>
 8004bb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bb6:	4798      	blx	r3
 8004bb8:	3601      	adds	r6, #1
 8004bba:	e7f2      	b.n	8004ba2 <__libc_init_array+0x1e>
 8004bbc:	08004c44 	.word	0x08004c44
 8004bc0:	08004c44 	.word	0x08004c44
 8004bc4:	08004c44 	.word	0x08004c44
 8004bc8:	08004c48 	.word	0x08004c48

08004bcc <memset>:
 8004bcc:	4402      	add	r2, r0
 8004bce:	4603      	mov	r3, r0
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d100      	bne.n	8004bd6 <memset+0xa>
 8004bd4:	4770      	bx	lr
 8004bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8004bda:	e7f9      	b.n	8004bd0 <memset+0x4>

08004bdc <_init>:
 8004bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bde:	bf00      	nop
 8004be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004be2:	bc08      	pop	{r3}
 8004be4:	469e      	mov	lr, r3
 8004be6:	4770      	bx	lr

08004be8 <_fini>:
 8004be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bea:	bf00      	nop
 8004bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bee:	bc08      	pop	{r3}
 8004bf0:	469e      	mov	lr, r3
 8004bf2:	4770      	bx	lr
