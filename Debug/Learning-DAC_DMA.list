
Learning-DAC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005994  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  08005b1c  08005b1c  00015b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005de4  08005de4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005de4  08005de4  00015de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005dec  08005dec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dec  08005dec  00015dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005df0  08005df0  00015df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005df4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  2000000c  08005e00  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08005e00  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000161b4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028ef  00000000  00000000  000361f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  00038ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f0  00000000  00000000  00039ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029417  00000000  00000000  0003b1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016558  00000000  00000000  000645cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010758c  00000000  00000000  0007ab27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001820b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055fc  00000000  00000000  00182104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005b04 	.word	0x08005b04

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005b04 	.word	0x08005b04

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 80004d2:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	// My loop increment for
	int i = 0;
 80004d4:	2300      	movs	r3, #0
 80004d6:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
	// My sinus lookup table (n = 128)
	uint32_t sinus_lut[]={
 80004da:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80004de:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 80004e2:	4a33      	ldr	r2, [pc, #204]	; (80005b0 <main+0xe4>)
 80004e4:	4618      	mov	r0, r3
 80004e6:	4611      	mov	r1, r2
 80004e8:	f44f 7320 	mov.w	r3, #640	; 0x280
 80004ec:	461a      	mov	r2, r3
 80004ee:	f005 faf3 	bl	8005ad8 <memcpy>
		2047,2128,2209,2289,2369,2449,2528,2606,2684,2760,2835,2909,2982,3053,3123,3191,3257,3321,3384,3444,3502,3558,3611,3662,3711,3756,3800,3840,3878,3913,3944,3973,3999,4022,4042,4059,4072,4082,4090,4094,4094,4092,4086,4078,4066,4051,4032,4011,3987,3959,3929,3895,3859,3820,3778,3734,3687,3637,3585,3530,3473,3414,3353,3289,3224,3157,3088,3018,2946,2872,2798,2722,2645,2567,2489,2409,2329,2249,2168,2087,2007,1926,1845,1765,1685,1605,1527,1449,1372,1296,1222,1148,1076,1006,937,870,805,741,680,621,564,509,457,407,360,316,274,235,199,165,135,107,83,62,43,28,16,8,2,0,0,4,12,22,35,52,72,95,121,150,181,216,254,294,338,383,432,483,536,592,650,710,773,837,903,971,1041,1112,1185,1259,1334,1410,1488,1566,1645,1725,1805,1885,1966,2047
	};
	// Calculate the number of elements in my sinus lookup table
	int n = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
	n = sizeof(sinus_lut)/sizeof(uint32_t);
 80004f8:	23a0      	movs	r3, #160	; 0xa0
 80004fa:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
	// I don't take the last element because it is equal to the first
	n -= 1;
 80004fe:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8000502:	3b01      	subs	r3, #1
 8000504:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f000 fc92 	bl	8000e30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050c:	f000 f85c 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000510:	f000 fa04 	bl	800091c <MX_GPIO_Init>
  MX_DMA_Init();
 8000514:	f000 f9d0 	bl	80008b8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000518:	f000 f99e 	bl	8000858 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 800051c:	f000 f91c 	bl	8000758 <MX_DAC1_Init>
  MX_ADC1_Init();
 8000520:	f000 f8a4 	bl	800066c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000524:	f000 f94a 	bl	80007bc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Start DAC with DMA
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)sinus_lut, n, DAC_ALIGN_12B_R);
 8000528:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 800052c:	463a      	mov	r2, r7
 800052e:	2100      	movs	r1, #0
 8000530:	9100      	str	r1, [sp, #0]
 8000532:	2100      	movs	r1, #0
 8000534:	481f      	ldr	r0, [pc, #124]	; (80005b4 <main+0xe8>)
 8000536:	f002 f947 	bl	80027c8 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim2);
 800053a:	481f      	ldr	r0, [pc, #124]	; (80005b8 <main+0xec>)
 800053c:	f004 fb04 	bl	8004b48 <HAL_TIM_Base_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000540:	217f      	movs	r1, #127	; 0x7f
 8000542:	481e      	ldr	r0, [pc, #120]	; (80005bc <main+0xf0>)
 8000544:	f001 fefc 	bl	8002340 <HAL_ADCEx_Calibration_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(i==0)
 8000548:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 800054c:	2b00      	cmp	r3, #0
 800054e:	d117      	bne.n	8000580 <main+0xb4>
	{
		// Set
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000550:	2201      	movs	r2, #1
 8000552:	2120      	movs	r1, #32
 8000554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000558:	f002 ff66 	bl	8003428 <HAL_GPIO_WritePin>
		// read adc
		HAL_ADC_Start_DMA(&hadc1, &value[1], 1);
 800055c:	2201      	movs	r2, #1
 800055e:	4918      	ldr	r1, [pc, #96]	; (80005c0 <main+0xf4>)
 8000560:	4816      	ldr	r0, [pc, #88]	; (80005bc <main+0xf0>)
 8000562:	f001 f857 	bl	8001614 <HAL_ADC_Start_DMA>
		// map it
		i = 1;
 8000566:	2301      	movs	r3, #1
 8000568:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
		// reset
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	2120      	movs	r1, #32
 8000570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000574:	f002 ff58 	bl	8003428 <HAL_GPIO_WritePin>
	    // wait 1 ms
	    HAL_Delay(1);
 8000578:	2001      	movs	r0, #1
 800057a:	f000 fcd5 	bl	8000f28 <HAL_Delay>
 800057e:	e7e3      	b.n	8000548 <main+0x7c>
	}
	else
	{
		// Set
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000580:	2201      	movs	r2, #1
 8000582:	2120      	movs	r1, #32
 8000584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000588:	f002 ff4e 	bl	8003428 <HAL_GPIO_WritePin>
		// read adc
		HAL_ADC_Start_DMA(&hadc1, &value[0], 1);
 800058c:	2201      	movs	r2, #1
 800058e:	490d      	ldr	r1, [pc, #52]	; (80005c4 <main+0xf8>)
 8000590:	480a      	ldr	r0, [pc, #40]	; (80005bc <main+0xf0>)
 8000592:	f001 f83f 	bl	8001614 <HAL_ADC_Start_DMA>
		// map it
		i = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
		// reset
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	2120      	movs	r1, #32
 80005a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a4:	f002 ff40 	bl	8003428 <HAL_GPIO_WritePin>
	    // wait 1 ms
	    HAL_Delay(1);
 80005a8:	2001      	movs	r0, #1
 80005aa:	f000 fcbd 	bl	8000f28 <HAL_Delay>
	if(i==0)
 80005ae:	e7cb      	b.n	8000548 <main+0x7c>
 80005b0:	08005b1c 	.word	0x08005b1c
 80005b4:	200000d4 	.word	0x200000d4
 80005b8:	20000130 	.word	0x20000130
 80005bc:	20000028 	.word	0x20000028
 80005c0:	20000204 	.word	0x20000204
 80005c4:	20000200 	.word	0x20000200

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b096      	sub	sp, #88	; 0x58
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	2244      	movs	r2, #68	; 0x44
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f005 fa8c 	bl	8005af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	463b      	mov	r3, r7
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005ee:	f002 ff41 	bl	8003474 <HAL_PWREx_ControlVoltageScaling>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005f8:	f000 f9f6 	bl	80009e8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005fc:	2302      	movs	r3, #2
 80005fe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000600:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000604:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000606:	2310      	movs	r3, #16
 8000608:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800060e:	2302      	movs	r3, #2
 8000610:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000612:	2301      	movs	r3, #1
 8000614:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000616:	230a      	movs	r3, #10
 8000618:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800061a:	2307      	movs	r3, #7
 800061c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800061e:	2302      	movs	r3, #2
 8000620:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000622:	2302      	movs	r3, #2
 8000624:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4618      	mov	r0, r3
 800062c:	f002 ff78 	bl	8003520 <HAL_RCC_OscConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000636:	f000 f9d7 	bl	80009e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063a:	230f      	movs	r3, #15
 800063c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063e:	2303      	movs	r3, #3
 8000640:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800064e:	463b      	mov	r3, r7
 8000650:	2104      	movs	r1, #4
 8000652:	4618      	mov	r0, r3
 8000654:	f003 fb40 	bl	8003cd8 <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800065e:	f000 f9c3 	bl	80009e8 <Error_Handler>
  }
}
 8000662:	bf00      	nop
 8000664:	3758      	adds	r7, #88	; 0x58
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08a      	sub	sp, #40	; 0x28
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
 800068c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800068e:	4b2f      	ldr	r3, [pc, #188]	; (800074c <MX_ADC1_Init+0xe0>)
 8000690:	4a2f      	ldr	r2, [pc, #188]	; (8000750 <MX_ADC1_Init+0xe4>)
 8000692:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000694:	4b2d      	ldr	r3, [pc, #180]	; (800074c <MX_ADC1_Init+0xe0>)
 8000696:	2200      	movs	r2, #0
 8000698:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800069a:	4b2c      	ldr	r3, [pc, #176]	; (800074c <MX_ADC1_Init+0xe0>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a0:	4b2a      	ldr	r3, [pc, #168]	; (800074c <MX_ADC1_Init+0xe0>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006a6:	4b29      	ldr	r3, [pc, #164]	; (800074c <MX_ADC1_Init+0xe0>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ac:	4b27      	ldr	r3, [pc, #156]	; (800074c <MX_ADC1_Init+0xe0>)
 80006ae:	2204      	movs	r2, #4
 80006b0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006b2:	4b26      	ldr	r3, [pc, #152]	; (800074c <MX_ADC1_Init+0xe0>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006b8:	4b24      	ldr	r3, [pc, #144]	; (800074c <MX_ADC1_Init+0xe0>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006be:	4b23      	ldr	r3, [pc, #140]	; (800074c <MX_ADC1_Init+0xe0>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006c4:	4b21      	ldr	r3, [pc, #132]	; (800074c <MX_ADC1_Init+0xe0>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <MX_ADC1_Init+0xe0>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006d2:	4b1e      	ldr	r3, [pc, #120]	; (800074c <MX_ADC1_Init+0xe0>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006d8:	4b1c      	ldr	r3, [pc, #112]	; (800074c <MX_ADC1_Init+0xe0>)
 80006da:	2201      	movs	r2, #1
 80006dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <MX_ADC1_Init+0xe0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006e6:	4b19      	ldr	r3, [pc, #100]	; (800074c <MX_ADC1_Init+0xe0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006ee:	4817      	ldr	r0, [pc, #92]	; (800074c <MX_ADC1_Init+0xe0>)
 80006f0:	f000 fe3a 	bl	8001368 <HAL_ADC_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80006fa:	f000 f975 	bl	80009e8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	4619      	mov	r1, r3
 8000708:	4810      	ldr	r0, [pc, #64]	; (800074c <MX_ADC1_Init+0xe0>)
 800070a:	f001 fe79 	bl	8002400 <HAL_ADCEx_MultiModeConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000714:	f000 f968 	bl	80009e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000718:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_ADC1_Init+0xe8>)
 800071a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800071c:	2306      	movs	r3, #6
 800071e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000720:	2300      	movs	r3, #0
 8000722:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000724:	237f      	movs	r3, #127	; 0x7f
 8000726:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000728:	2304      	movs	r3, #4
 800072a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	4619      	mov	r1, r3
 8000734:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_ADC1_Init+0xe0>)
 8000736:	f001 f847 	bl	80017c8 <HAL_ADC_ConfigChannel>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000740:	f000 f952 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	3728      	adds	r7, #40	; 0x28
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000028 	.word	0x20000028
 8000750:	50040000 	.word	0x50040000
 8000754:	14f00020 	.word	0x14f00020

08000758 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2224      	movs	r2, #36	; 0x24
 8000762:	2100      	movs	r1, #0
 8000764:	4618      	mov	r0, r3
 8000766:	f005 f9c5 	bl	8005af4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800076a:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MX_DAC1_Init+0x5c>)
 800076c:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <MX_DAC1_Init+0x60>)
 800076e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000770:	4810      	ldr	r0, [pc, #64]	; (80007b4 <MX_DAC1_Init+0x5c>)
 8000772:	f002 f806 	bl	8002782 <HAL_DAC_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800077c:	f000 f934 	bl	80009e8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000780:	2300      	movs	r3, #0
 8000782:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000784:	2324      	movs	r3, #36	; 0x24
 8000786:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800078c:	2300      	movs	r3, #0
 800078e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2200      	movs	r2, #0
 8000798:	4619      	mov	r1, r3
 800079a:	4806      	ldr	r0, [pc, #24]	; (80007b4 <MX_DAC1_Init+0x5c>)
 800079c:	f002 f8fe 	bl	800299c <HAL_DAC_ConfigChannel>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80007a6:	f000 f91f 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	3728      	adds	r7, #40	; 0x28
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200000d4 	.word	0x200000d4
 80007b8:	40007400 	.word	0x40007400

080007bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c2:	f107 0310 	add.w	r3, r7, #16
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007da:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <MX_TIM2_Init+0x98>)
 80007dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007e2:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <MX_TIM2_Init+0x98>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e8:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <MX_TIM2_Init+0x98>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 624;
 80007ee:	4b19      	ldr	r3, [pc, #100]	; (8000854 <MX_TIM2_Init+0x98>)
 80007f0:	f44f 721c 	mov.w	r2, #624	; 0x270
 80007f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f6:	4b17      	ldr	r3, [pc, #92]	; (8000854 <MX_TIM2_Init+0x98>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <MX_TIM2_Init+0x98>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000802:	4814      	ldr	r0, [pc, #80]	; (8000854 <MX_TIM2_Init+0x98>)
 8000804:	f004 f948 	bl	8004a98 <HAL_TIM_Base_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800080e:	f000 f8eb 	bl	80009e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000816:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000818:	f107 0310 	add.w	r3, r7, #16
 800081c:	4619      	mov	r1, r3
 800081e:	480d      	ldr	r0, [pc, #52]	; (8000854 <MX_TIM2_Init+0x98>)
 8000820:	f004 f9fa 	bl	8004c18 <HAL_TIM_ConfigClockSource>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800082a:	f000 f8dd 	bl	80009e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800082e:	2320      	movs	r3, #32
 8000830:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	4619      	mov	r1, r3
 800083a:	4806      	ldr	r0, [pc, #24]	; (8000854 <MX_TIM2_Init+0x98>)
 800083c:	f004 fbea 	bl	8005014 <HAL_TIMEx_MasterConfigSynchronization>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000846:	f000 f8cf 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	3720      	adds	r7, #32
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000130 	.word	0x20000130

08000858 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800085c:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 800085e:	4a15      	ldr	r2, [pc, #84]	; (80008b4 <MX_USART2_UART_Init+0x5c>)
 8000860:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000862:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000868:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 800089c:	f004 fc42 	bl	8005124 <HAL_UART_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008a6:	f000 f89f 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	2000017c 	.word	0x2000017c
 80008b4:	40004400 	.word	0x40004400

080008b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008be:	4b16      	ldr	r3, [pc, #88]	; (8000918 <MX_DMA_Init+0x60>)
 80008c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008c2:	4a15      	ldr	r2, [pc, #84]	; (8000918 <MX_DMA_Init+0x60>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6493      	str	r3, [r2, #72]	; 0x48
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <MX_DMA_Init+0x60>)
 80008cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <MX_DMA_Init+0x60>)
 80008d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008da:	4a0f      	ldr	r2, [pc, #60]	; (8000918 <MX_DMA_Init+0x60>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	6493      	str	r3, [r2, #72]	; 0x48
 80008e2:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <MX_DMA_Init+0x60>)
 80008e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2100      	movs	r1, #0
 80008f2:	200d      	movs	r0, #13
 80008f4:	f001 ff0f 	bl	8002716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80008f8:	200d      	movs	r0, #13
 80008fa:	f001 ff28 	bl	800274e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2100      	movs	r1, #0
 8000902:	203a      	movs	r0, #58	; 0x3a
 8000904:	f001 ff07 	bl	8002716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8000908:	203a      	movs	r0, #58	; 0x3a
 800090a:	f001 ff20 	bl	800274e <HAL_NVIC_EnableIRQ>

}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40021000 	.word	0x40021000

0800091c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000932:	4b2b      	ldr	r3, [pc, #172]	; (80009e0 <MX_GPIO_Init+0xc4>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	4a2a      	ldr	r2, [pc, #168]	; (80009e0 <MX_GPIO_Init+0xc4>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093e:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <MX_GPIO_Init+0xc4>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094a:	4b25      	ldr	r3, [pc, #148]	; (80009e0 <MX_GPIO_Init+0xc4>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	4a24      	ldr	r2, [pc, #144]	; (80009e0 <MX_GPIO_Init+0xc4>)
 8000950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000956:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <MX_GPIO_Init+0xc4>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <MX_GPIO_Init+0xc4>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	4a1e      	ldr	r2, [pc, #120]	; (80009e0 <MX_GPIO_Init+0xc4>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096e:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <MX_GPIO_Init+0xc4>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <MX_GPIO_Init+0xc4>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	4a18      	ldr	r2, [pc, #96]	; (80009e0 <MX_GPIO_Init+0xc4>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_GPIO_Init+0xc4>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	2120      	movs	r1, #32
 8000996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099a:	f002 fd45 	bl	8003428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800099e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009a4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4619      	mov	r1, r3
 80009b4:	480b      	ldr	r0, [pc, #44]	; (80009e4 <MX_GPIO_Init+0xc8>)
 80009b6:	f002 fb8d 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009ba:	2320      	movs	r3, #32
 80009bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	4619      	mov	r1, r3
 80009d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d4:	f002 fb7e 	bl	80030d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d8:	bf00      	nop
 80009da:	3728      	adds	r7, #40	; 0x28
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40021000 	.word	0x40021000
 80009e4:	48000800 	.word	0x48000800

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
}
 80009ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <Error_Handler+0x8>
	...

080009f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <HAL_MspInit+0x44>)
 80009fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009fe:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <HAL_MspInit+0x44>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6613      	str	r3, [r2, #96]	; 0x60
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <HAL_MspInit+0x44>)
 8000a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <HAL_MspInit+0x44>)
 8000a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a16:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <HAL_MspInit+0x44>)
 8000a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_MspInit+0x44>)
 8000a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40021000 	.word	0x40021000

08000a3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b0ac      	sub	sp, #176	; 0xb0
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	2288      	movs	r2, #136	; 0x88
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f005 f849 	bl	8005af4 <memset>
  if(hadc->Instance==ADC1)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a3d      	ldr	r2, [pc, #244]	; (8000b5c <HAL_ADC_MspInit+0x120>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d172      	bne.n	8000b52 <HAL_ADC_MspInit+0x116>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a70:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000a72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000a82:	2308      	movs	r3, #8
 8000a84:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000a86:	2307      	movs	r3, #7
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000a92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a96:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f003 fb3f 	bl	8004120 <HAL_RCCEx_PeriphCLKConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000aa8:	f7ff ff9e 	bl	80009e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000aac:	4b2c      	ldr	r3, [pc, #176]	; (8000b60 <HAL_ADC_MspInit+0x124>)
 8000aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab0:	4a2b      	ldr	r2, [pc, #172]	; (8000b60 <HAL_ADC_MspInit+0x124>)
 8000ab2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ab6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab8:	4b29      	ldr	r3, [pc, #164]	; (8000b60 <HAL_ADC_MspInit+0x124>)
 8000aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac4:	4b26      	ldr	r3, [pc, #152]	; (8000b60 <HAL_ADC_MspInit+0x124>)
 8000ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac8:	4a25      	ldr	r2, [pc, #148]	; (8000b60 <HAL_ADC_MspInit+0x124>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad0:	4b23      	ldr	r3, [pc, #140]	; (8000b60 <HAL_ADC_MspInit+0x124>)
 8000ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000adc:	2301      	movs	r3, #1
 8000ade:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ae2:	230b      	movs	r3, #11
 8000ae4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000af2:	4619      	mov	r1, r3
 8000af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af8:	f002 faec 	bl	80030d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel3;
 8000afc:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <HAL_ADC_MspInit+0x128>)
 8000afe:	4a1a      	ldr	r2, [pc, #104]	; (8000b68 <HAL_ADC_MspInit+0x12c>)
 8000b00:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <HAL_ADC_MspInit+0x128>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b08:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <HAL_ADC_MspInit+0x128>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <HAL_ADC_MspInit+0x128>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b14:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <HAL_ADC_MspInit+0x128>)
 8000b16:	2280      	movs	r2, #128	; 0x80
 8000b18:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b1a:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <HAL_ADC_MspInit+0x128>)
 8000b1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b20:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <HAL_ADC_MspInit+0x128>)
 8000b24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b28:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <HAL_ADC_MspInit+0x128>)
 8000b2c:	2220      	movs	r2, #32
 8000b2e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <HAL_ADC_MspInit+0x128>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b36:	480b      	ldr	r0, [pc, #44]	; (8000b64 <HAL_ADC_MspInit+0x128>)
 8000b38:	f002 f8d4 	bl	8002ce4 <HAL_DMA_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8000b42:	f7ff ff51 	bl	80009e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4a06      	ldr	r2, [pc, #24]	; (8000b64 <HAL_ADC_MspInit+0x128>)
 8000b4a:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4c:	4a05      	ldr	r2, [pc, #20]	; (8000b64 <HAL_ADC_MspInit+0x128>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b52:	bf00      	nop
 8000b54:	37b0      	adds	r7, #176	; 0xb0
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	50040000 	.word	0x50040000
 8000b60:	40021000 	.word	0x40021000
 8000b64:	2000008c 	.word	0x2000008c
 8000b68:	40020430 	.word	0x40020430

08000b6c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	; 0x28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a2b      	ldr	r2, [pc, #172]	; (8000c38 <HAL_DAC_MspInit+0xcc>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d14f      	bne.n	8000c2e <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000b8e:	4b2b      	ldr	r3, [pc, #172]	; (8000c3c <HAL_DAC_MspInit+0xd0>)
 8000b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b92:	4a2a      	ldr	r2, [pc, #168]	; (8000c3c <HAL_DAC_MspInit+0xd0>)
 8000b94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000b98:	6593      	str	r3, [r2, #88]	; 0x58
 8000b9a:	4b28      	ldr	r3, [pc, #160]	; (8000c3c <HAL_DAC_MspInit+0xd0>)
 8000b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	4b25      	ldr	r3, [pc, #148]	; (8000c3c <HAL_DAC_MspInit+0xd0>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	4a24      	ldr	r2, [pc, #144]	; (8000c3c <HAL_DAC_MspInit+0xd0>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb2:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <HAL_DAC_MspInit+0xd0>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bbe:	2310      	movs	r3, #16
 8000bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	4619      	mov	r1, r3
 8000bd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd4:	f002 fa7e 	bl	80030d4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8000bd8:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <HAL_DAC_MspInit+0xd4>)
 8000bda:	4a1a      	ldr	r2, [pc, #104]	; (8000c44 <HAL_DAC_MspInit+0xd8>)
 8000bdc:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8000bde:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <HAL_DAC_MspInit+0xd4>)
 8000be0:	2206      	movs	r2, #6
 8000be2:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000be4:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <HAL_DAC_MspInit+0xd4>)
 8000be6:	2210      	movs	r2, #16
 8000be8:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <HAL_DAC_MspInit+0xd4>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000bf0:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <HAL_DAC_MspInit+0xd4>)
 8000bf2:	2280      	movs	r2, #128	; 0x80
 8000bf4:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_DAC_MspInit+0xd4>)
 8000bf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bfc:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <HAL_DAC_MspInit+0xd4>)
 8000c00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c04:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <HAL_DAC_MspInit+0xd4>)
 8000c08:	2220      	movs	r2, #32
 8000c0a:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_DAC_MspInit+0xd4>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000c12:	480b      	ldr	r0, [pc, #44]	; (8000c40 <HAL_DAC_MspInit+0xd4>)
 8000c14:	f002 f866 	bl	8002ce4 <HAL_DMA_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000c1e:	f7ff fee3 	bl	80009e8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a06      	ldr	r2, [pc, #24]	; (8000c40 <HAL_DAC_MspInit+0xd4>)
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <HAL_DAC_MspInit+0xd4>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000c2e:	bf00      	nop
 8000c30:	3728      	adds	r7, #40	; 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40007400 	.word	0x40007400
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	200000e8 	.word	0x200000e8
 8000c44:	40020030 	.word	0x40020030

08000c48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c58:	d10b      	bne.n	8000c72 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <HAL_TIM_Base_MspInit+0x38>)
 8000c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5e:	4a08      	ldr	r2, [pc, #32]	; (8000c80 <HAL_TIM_Base_MspInit+0x38>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6593      	str	r3, [r2, #88]	; 0x58
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_TIM_Base_MspInit+0x38>)
 8000c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c72:	bf00      	nop
 8000c74:	3714      	adds	r7, #20
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40021000 	.word	0x40021000

08000c84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b0ac      	sub	sp, #176	; 0xb0
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	2288      	movs	r2, #136	; 0x88
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f004 ff25 	bl	8005af4 <memset>
  if(huart->Instance==USART2)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a21      	ldr	r2, [pc, #132]	; (8000d34 <HAL_UART_MspInit+0xb0>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d13b      	bne.n	8000d2c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f003 fa2d 	bl	8004120 <HAL_RCCEx_PeriphCLKConfig>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ccc:	f7ff fe8c 	bl	80009e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cd0:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <HAL_UART_MspInit+0xb4>)
 8000cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd4:	4a18      	ldr	r2, [pc, #96]	; (8000d38 <HAL_UART_MspInit+0xb4>)
 8000cd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cda:	6593      	str	r3, [r2, #88]	; 0x58
 8000cdc:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <HAL_UART_MspInit+0xb4>)
 8000cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce8:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <HAL_UART_MspInit+0xb4>)
 8000cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cec:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <HAL_UART_MspInit+0xb4>)
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf4:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <HAL_UART_MspInit+0xb4>)
 8000cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d00:	230c      	movs	r3, #12
 8000d02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d12:	2303      	movs	r3, #3
 8000d14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d18:	2307      	movs	r3, #7
 8000d1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d22:	4619      	mov	r1, r3
 8000d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d28:	f002 f9d4 	bl	80030d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d2c:	bf00      	nop
 8000d2e:	37b0      	adds	r7, #176	; 0xb0
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40004400 	.word	0x40004400
 8000d38:	40021000 	.word	0x40021000

08000d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <NMI_Handler+0x4>

08000d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <HardFault_Handler+0x4>

08000d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <MemManage_Handler+0x4>

08000d4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <BusFault_Handler+0x4>

08000d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <UsageFault_Handler+0x4>

08000d5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d88:	f000 f8ae 	bl	8000ee8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000d94:	4802      	ldr	r0, [pc, #8]	; (8000da0 <DMA1_Channel3_IRQHandler+0x10>)
 8000d96:	f002 f8bd 	bl	8002f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200000e8 	.word	0x200000e8

08000da4 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000da8:	4802      	ldr	r0, [pc, #8]	; (8000db4 <DMA2_Channel3_IRQHandler+0x10>)
 8000daa:	f002 f8b3 	bl	8002f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	2000008c 	.word	0x2000008c

08000db8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <SystemInit+0x20>)
 8000dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <SystemInit+0x20>)
 8000dc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ddc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000de0:	f7ff ffea 	bl	8000db8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000de4:	480c      	ldr	r0, [pc, #48]	; (8000e18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000de6:	490d      	ldr	r1, [pc, #52]	; (8000e1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000de8:	4a0d      	ldr	r2, [pc, #52]	; (8000e20 <LoopForever+0xe>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dec:	e002      	b.n	8000df4 <LoopCopyDataInit>

08000dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df2:	3304      	adds	r3, #4

08000df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df8:	d3f9      	bcc.n	8000dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dfc:	4c0a      	ldr	r4, [pc, #40]	; (8000e28 <LoopForever+0x16>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e00:	e001      	b.n	8000e06 <LoopFillZerobss>

08000e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e04:	3204      	adds	r2, #4

08000e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e08:	d3fb      	bcc.n	8000e02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e0a:	f004 fe41 	bl	8005a90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e0e:	f7ff fb5d 	bl	80004cc <main>

08000e12 <LoopForever>:

LoopForever:
    b LoopForever
 8000e12:	e7fe      	b.n	8000e12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e14:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e20:	08005df4 	.word	0x08005df4
  ldr r2, =_sbss
 8000e24:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e28:	2000020c 	.word	0x2000020c

08000e2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e2c:	e7fe      	b.n	8000e2c <ADC1_2_IRQHandler>
	...

08000e30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e36:	2300      	movs	r3, #0
 8000e38:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <HAL_Init+0x3c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <HAL_Init+0x3c>)
 8000e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e44:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e46:	2003      	movs	r0, #3
 8000e48:	f001 fc5a 	bl	8002700 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f000 f80f 	bl	8000e70 <HAL_InitTick>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d002      	beq.n	8000e5e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	71fb      	strb	r3, [r7, #7]
 8000e5c:	e001      	b.n	8000e62 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e5e:	f7ff fdc9 	bl	80009f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e62:	79fb      	ldrb	r3, [r7, #7]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40022000 	.word	0x40022000

08000e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e7c:	4b17      	ldr	r3, [pc, #92]	; (8000edc <HAL_InitTick+0x6c>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d023      	beq.n	8000ecc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e84:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <HAL_InitTick+0x70>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4b14      	ldr	r3, [pc, #80]	; (8000edc <HAL_InitTick+0x6c>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f001 fc65 	bl	800276a <HAL_SYSTICK_Config>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d10f      	bne.n	8000ec6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b0f      	cmp	r3, #15
 8000eaa:	d809      	bhi.n	8000ec0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eac:	2200      	movs	r2, #0
 8000eae:	6879      	ldr	r1, [r7, #4]
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb4:	f001 fc2f 	bl	8002716 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <HAL_InitTick+0x74>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6013      	str	r3, [r2, #0]
 8000ebe:	e007      	b.n	8000ed0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	73fb      	strb	r3, [r7, #15]
 8000ec4:	e004      	b.n	8000ed0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	73fb      	strb	r3, [r7, #15]
 8000eca:	e001      	b.n	8000ed0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000008 	.word	0x20000008
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	20000004 	.word	0x20000004

08000ee8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_IncTick+0x20>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_IncTick+0x24>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <HAL_IncTick+0x24>)
 8000efa:	6013      	str	r3, [r2, #0]
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	20000208 	.word	0x20000208

08000f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return uwTick;
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <HAL_GetTick+0x14>)
 8000f16:	681b      	ldr	r3, [r3, #0]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000208 	.word	0x20000208

08000f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f30:	f7ff ffee 	bl	8000f10 <HAL_GetTick>
 8000f34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f40:	d005      	beq.n	8000f4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_Delay+0x44>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f4e:	bf00      	nop
 8000f50:	f7ff ffde 	bl	8000f10 <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d8f7      	bhi.n	8000f50 <HAL_Delay+0x28>
  {
  }
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000008 	.word	0x20000008

08000f70 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	431a      	orrs	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	609a      	str	r2, [r3, #8]
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
 8000f9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	431a      	orrs	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	609a      	str	r2, [r3, #8]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b087      	sub	sp, #28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
 8000fe4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	3360      	adds	r3, #96	; 0x60
 8000fea:	461a      	mov	r2, r3
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <LL_ADC_SetOffset+0x44>)
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	430a      	orrs	r2, r1
 8001006:	4313      	orrs	r3, r2
 8001008:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001010:	bf00      	nop
 8001012:	371c      	adds	r7, #28
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	03fff000 	.word	0x03fff000

08001020 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3360      	adds	r3, #96	; 0x60
 800102e:	461a      	mov	r2, r3
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4413      	add	r3, r2
 8001036:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001040:	4618      	mov	r0, r3
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800104c:	b480      	push	{r7}
 800104e:	b087      	sub	sp, #28
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	3360      	adds	r3, #96	; 0x60
 800105c:	461a      	mov	r2, r3
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	431a      	orrs	r2, r3
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001076:	bf00      	nop
 8001078:	371c      	adds	r7, #28
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001096:	2301      	movs	r3, #1
 8001098:	e000      	b.n	800109c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b087      	sub	sp, #28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	3330      	adds	r3, #48	; 0x30
 80010b8:	461a      	mov	r2, r3
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	0a1b      	lsrs	r3, r3, #8
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	f003 030c 	and.w	r3, r3, #12
 80010c4:	4413      	add	r3, r2
 80010c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	f003 031f 	and.w	r3, r3, #31
 80010d2:	211f      	movs	r1, #31
 80010d4:	fa01 f303 	lsl.w	r3, r1, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	401a      	ands	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	0e9b      	lsrs	r3, r3, #26
 80010e0:	f003 011f 	and.w	r1, r3, #31
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	f003 031f 	and.w	r3, r3, #31
 80010ea:	fa01 f303 	lsl.w	r3, r1, r3
 80010ee:	431a      	orrs	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010f4:	bf00      	nop
 80010f6:	371c      	adds	r7, #28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001100:	b480      	push	{r7}
 8001102:	b087      	sub	sp, #28
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	3314      	adds	r3, #20
 8001110:	461a      	mov	r2, r3
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	0e5b      	lsrs	r3, r3, #25
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	4413      	add	r3, r2
 800111e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	0d1b      	lsrs	r3, r3, #20
 8001128:	f003 031f 	and.w	r3, r3, #31
 800112c:	2107      	movs	r1, #7
 800112e:	fa01 f303 	lsl.w	r3, r1, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	401a      	ands	r2, r3
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	0d1b      	lsrs	r3, r3, #20
 800113a:	f003 031f 	and.w	r3, r3, #31
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	fa01 f303 	lsl.w	r3, r1, r3
 8001144:	431a      	orrs	r2, r3
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800114a:	bf00      	nop
 800114c:	371c      	adds	r7, #28
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
	...

08001158 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001170:	43db      	mvns	r3, r3
 8001172:	401a      	ands	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f003 0318 	and.w	r3, r3, #24
 800117a:	4908      	ldr	r1, [pc, #32]	; (800119c <LL_ADC_SetChannelSingleDiff+0x44>)
 800117c:	40d9      	lsrs	r1, r3
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	400b      	ands	r3, r1
 8001182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001186:	431a      	orrs	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800118e:	bf00      	nop
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	0007ffff 	.word	0x0007ffff

080011a0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f003 031f 	and.w	r3, r3, #31
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80011cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	6093      	str	r3, [r2, #8]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011f4:	d101      	bne.n	80011fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80011f6:	2301      	movs	r3, #1
 80011f8:	e000      	b.n	80011fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001218:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800121c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001240:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001244:	d101      	bne.n	800124a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001246:	2301      	movs	r3, #1
 8001248:	e000      	b.n	800124c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001268:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800126c:	f043 0201 	orr.w	r2, r3, #1
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001290:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001294:	f043 0202 	orr.w	r2, r3, #2
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d101      	bne.n	80012c0 <LL_ADC_IsEnabled+0x18>
 80012bc:	2301      	movs	r3, #1
 80012be:	e000      	b.n	80012c2 <LL_ADC_IsEnabled+0x1a>
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d101      	bne.n	80012e6 <LL_ADC_IsDisableOngoing+0x18>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <LL_ADC_IsDisableOngoing+0x1a>
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001304:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001308:	f043 0204 	orr.w	r2, r3, #4
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	2b04      	cmp	r3, #4
 800132e:	d101      	bne.n	8001334 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001330:	2301      	movs	r3, #1
 8001332:	e000      	b.n	8001336 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 0308 	and.w	r3, r3, #8
 8001352:	2b08      	cmp	r3, #8
 8001354:	d101      	bne.n	800135a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001356:	2301      	movs	r3, #1
 8001358:	e000      	b.n	800135c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800135a:	2300      	movs	r3, #0
}
 800135c:	4618      	mov	r0, r3
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	b089      	sub	sp, #36	; 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001370:	2300      	movs	r3, #0
 8001372:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001374:	2300      	movs	r3, #0
 8001376:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e136      	b.n	80015f0 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800138c:	2b00      	cmp	r3, #0
 800138e:	d109      	bne.n	80013a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff fb53 	bl	8000a3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff19 	bl	80011e0 <LL_ADC_IsDeepPowerDownEnabled>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d004      	beq.n	80013be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff feff 	bl	80011bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff ff34 	bl	8001230 <LL_ADC_IsInternalRegulatorEnabled>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d115      	bne.n	80013fa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff ff18 	bl	8001208 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013d8:	4b87      	ldr	r3, [pc, #540]	; (80015f8 <HAL_ADC_Init+0x290>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	099b      	lsrs	r3, r3, #6
 80013de:	4a87      	ldr	r2, [pc, #540]	; (80015fc <HAL_ADC_Init+0x294>)
 80013e0:	fba2 2303 	umull	r2, r3, r2, r3
 80013e4:	099b      	lsrs	r3, r3, #6
 80013e6:	3301      	adds	r3, #1
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013ec:	e002      	b.n	80013f4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	3b01      	subs	r3, #1
 80013f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f9      	bne.n	80013ee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ff16 	bl	8001230 <LL_ADC_IsInternalRegulatorEnabled>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d10d      	bne.n	8001426 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800140e:	f043 0210 	orr.w	r2, r3, #16
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141a:	f043 0201 	orr.w	r2, r3, #1
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff ff76 	bl	800131c <LL_ADC_REG_IsConversionOngoing>
 8001430:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001436:	f003 0310 	and.w	r3, r3, #16
 800143a:	2b00      	cmp	r3, #0
 800143c:	f040 80cf 	bne.w	80015de <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	2b00      	cmp	r3, #0
 8001444:	f040 80cb 	bne.w	80015de <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800144c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001450:	f043 0202 	orr.w	r2, r3, #2
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff23 	bl	80012a8 <LL_ADC_IsEnabled>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d115      	bne.n	8001494 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001468:	4865      	ldr	r0, [pc, #404]	; (8001600 <HAL_ADC_Init+0x298>)
 800146a:	f7ff ff1d 	bl	80012a8 <LL_ADC_IsEnabled>
 800146e:	4604      	mov	r4, r0
 8001470:	4864      	ldr	r0, [pc, #400]	; (8001604 <HAL_ADC_Init+0x29c>)
 8001472:	f7ff ff19 	bl	80012a8 <LL_ADC_IsEnabled>
 8001476:	4603      	mov	r3, r0
 8001478:	431c      	orrs	r4, r3
 800147a:	4863      	ldr	r0, [pc, #396]	; (8001608 <HAL_ADC_Init+0x2a0>)
 800147c:	f7ff ff14 	bl	80012a8 <LL_ADC_IsEnabled>
 8001480:	4603      	mov	r3, r0
 8001482:	4323      	orrs	r3, r4
 8001484:	2b00      	cmp	r3, #0
 8001486:	d105      	bne.n	8001494 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	4619      	mov	r1, r3
 800148e:	485f      	ldr	r0, [pc, #380]	; (800160c <HAL_ADC_Init+0x2a4>)
 8001490:	f7ff fd6e 	bl	8000f70 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	7e5b      	ldrb	r3, [r3, #25]
 8001498:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800149e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80014a4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80014aa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014b2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014b4:	4313      	orrs	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d106      	bne.n	80014d0 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c6:	3b01      	subs	r3, #1
 80014c8:	045b      	lsls	r3, r3, #17
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d009      	beq.n	80014ec <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014dc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68da      	ldr	r2, [r3, #12]
 80014f2:	4b47      	ldr	r3, [pc, #284]	; (8001610 <HAL_ADC_Init+0x2a8>)
 80014f4:	4013      	ands	r3, r2
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	6812      	ldr	r2, [r2, #0]
 80014fa:	69b9      	ldr	r1, [r7, #24]
 80014fc:	430b      	orrs	r3, r1
 80014fe:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff09 	bl	800131c <LL_ADC_REG_IsConversionOngoing>
 800150a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff16 	bl	8001342 <LL_ADC_INJ_IsConversionOngoing>
 8001516:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d13d      	bne.n	800159a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d13a      	bne.n	800159a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001528:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001530:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001540:	f023 0302 	bic.w	r3, r3, #2
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	6812      	ldr	r2, [r2, #0]
 8001548:	69b9      	ldr	r1, [r7, #24]
 800154a:	430b      	orrs	r3, r1
 800154c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001554:	2b01      	cmp	r3, #1
 8001556:	d118      	bne.n	800158a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001562:	f023 0304 	bic.w	r3, r3, #4
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800156e:	4311      	orrs	r1, r2
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001574:	4311      	orrs	r1, r2
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800157a:	430a      	orrs	r2, r1
 800157c:	431a      	orrs	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 0201 	orr.w	r2, r2, #1
 8001586:	611a      	str	r2, [r3, #16]
 8001588:	e007      	b.n	800159a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	691a      	ldr	r2, [r3, #16]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 0201 	bic.w	r2, r2, #1
 8001598:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d10c      	bne.n	80015bc <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a8:	f023 010f 	bic.w	r1, r3, #15
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69db      	ldr	r3, [r3, #28]
 80015b0:	1e5a      	subs	r2, r3, #1
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	430a      	orrs	r2, r1
 80015b8:	631a      	str	r2, [r3, #48]	; 0x30
 80015ba:	e007      	b.n	80015cc <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 020f 	bic.w	r2, r2, #15
 80015ca:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d0:	f023 0303 	bic.w	r3, r3, #3
 80015d4:	f043 0201 	orr.w	r2, r3, #1
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	655a      	str	r2, [r3, #84]	; 0x54
 80015dc:	e007      	b.n	80015ee <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e2:	f043 0210 	orr.w	r2, r3, #16
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80015ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3724      	adds	r7, #36	; 0x24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd90      	pop	{r4, r7, pc}
 80015f8:	20000000 	.word	0x20000000
 80015fc:	053e2d63 	.word	0x053e2d63
 8001600:	50040000 	.word	0x50040000
 8001604:	50040100 	.word	0x50040100
 8001608:	50040200 	.word	0x50040200
 800160c:	50040300 	.word	0x50040300
 8001610:	fff0c007 	.word	0xfff0c007

08001614 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001620:	4853      	ldr	r0, [pc, #332]	; (8001770 <HAL_ADC_Start_DMA+0x15c>)
 8001622:	f7ff fdbd 	bl	80011a0 <LL_ADC_GetMultimode>
 8001626:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff fe75 	bl	800131c <LL_ADC_REG_IsConversionOngoing>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	f040 8093 	bne.w	8001760 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001640:	2b01      	cmp	r3, #1
 8001642:	d101      	bne.n	8001648 <HAL_ADC_Start_DMA+0x34>
 8001644:	2302      	movs	r3, #2
 8001646:	e08e      	b.n	8001766 <HAL_ADC_Start_DMA+0x152>
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a47      	ldr	r2, [pc, #284]	; (8001774 <HAL_ADC_Start_DMA+0x160>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d008      	beq.n	800166c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d005      	beq.n	800166c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	2b05      	cmp	r3, #5
 8001664:	d002      	beq.n	800166c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	2b09      	cmp	r3, #9
 800166a:	d172      	bne.n	8001752 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f000 fc9b 	bl	8001fa8 <ADC_Enable>
 8001672:	4603      	mov	r3, r0
 8001674:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001676:	7dfb      	ldrb	r3, [r7, #23]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d165      	bne.n	8001748 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001680:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001684:	f023 0301 	bic.w	r3, r3, #1
 8001688:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a38      	ldr	r2, [pc, #224]	; (8001778 <HAL_ADC_Start_DMA+0x164>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d002      	beq.n	80016a0 <HAL_ADC_Start_DMA+0x8c>
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	e000      	b.n	80016a2 <HAL_ADC_Start_DMA+0x8e>
 80016a0:	4b36      	ldr	r3, [pc, #216]	; (800177c <HAL_ADC_Start_DMA+0x168>)
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	6812      	ldr	r2, [r2, #0]
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d002      	beq.n	80016b0 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d105      	bne.n	80016bc <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d006      	beq.n	80016d6 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016cc:	f023 0206 	bic.w	r2, r3, #6
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	659a      	str	r2, [r3, #88]	; 0x58
 80016d4:	e002      	b.n	80016dc <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2200      	movs	r2, #0
 80016da:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e0:	4a27      	ldr	r2, [pc, #156]	; (8001780 <HAL_ADC_Start_DMA+0x16c>)
 80016e2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e8:	4a26      	ldr	r2, [pc, #152]	; (8001784 <HAL_ADC_Start_DMA+0x170>)
 80016ea:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f0:	4a25      	ldr	r2, [pc, #148]	; (8001788 <HAL_ADC_Start_DMA+0x174>)
 80016f2:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	221c      	movs	r2, #28
 80016fa:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f042 0210 	orr.w	r2, r2, #16
 8001712:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68da      	ldr	r2, [r3, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 0201 	orr.w	r2, r2, #1
 8001722:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	3340      	adds	r3, #64	; 0x40
 800172e:	4619      	mov	r1, r3
 8001730:	68ba      	ldr	r2, [r7, #8]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f001 fb8e 	bl	8002e54 <HAL_DMA_Start_IT>
 8001738:	4603      	mov	r3, r0
 800173a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fdd7 	bl	80012f4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001746:	e00d      	b.n	8001764 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001750:	e008      	b.n	8001764 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800175e:	e001      	b.n	8001764 <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001760:	2302      	movs	r3, #2
 8001762:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001764:	7dfb      	ldrb	r3, [r7, #23]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	50040300 	.word	0x50040300
 8001774:	50040200 	.word	0x50040200
 8001778:	50040100 	.word	0x50040100
 800177c:	50040000 	.word	0x50040000
 8001780:	08002173 	.word	0x08002173
 8001784:	0800224b 	.word	0x0800224b
 8001788:	08002267 	.word	0x08002267

0800178c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b0b6      	sub	sp, #216	; 0xd8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017d2:	2300      	movs	r3, #0
 80017d4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80017d8:	2300      	movs	r3, #0
 80017da:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d101      	bne.n	80017ea <HAL_ADC_ConfigChannel+0x22>
 80017e6:	2302      	movs	r3, #2
 80017e8:	e3c7      	b.n	8001f7a <HAL_ADC_ConfigChannel+0x7b2>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fd90 	bl	800131c <LL_ADC_REG_IsConversionOngoing>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f040 83a8 	bne.w	8001f54 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b05      	cmp	r3, #5
 800180a:	d824      	bhi.n	8001856 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	3b02      	subs	r3, #2
 8001812:	2b03      	cmp	r3, #3
 8001814:	d81b      	bhi.n	800184e <HAL_ADC_ConfigChannel+0x86>
 8001816:	a201      	add	r2, pc, #4	; (adr r2, 800181c <HAL_ADC_ConfigChannel+0x54>)
 8001818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800181c:	0800182d 	.word	0x0800182d
 8001820:	08001835 	.word	0x08001835
 8001824:	0800183d 	.word	0x0800183d
 8001828:	08001845 	.word	0x08001845
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	220c      	movs	r2, #12
 8001830:	605a      	str	r2, [r3, #4]
          break;
 8001832:	e011      	b.n	8001858 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	2212      	movs	r2, #18
 8001838:	605a      	str	r2, [r3, #4]
          break;
 800183a:	e00d      	b.n	8001858 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	2218      	movs	r2, #24
 8001840:	605a      	str	r2, [r3, #4]
          break;
 8001842:	e009      	b.n	8001858 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	f44f 7280 	mov.w	r2, #256	; 0x100
 800184a:	605a      	str	r2, [r3, #4]
          break;
 800184c:	e004      	b.n	8001858 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	2206      	movs	r2, #6
 8001852:	605a      	str	r2, [r3, #4]
          break;
 8001854:	e000      	b.n	8001858 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001856:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6818      	ldr	r0, [r3, #0]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	6859      	ldr	r1, [r3, #4]
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	461a      	mov	r2, r3
 8001866:	f7ff fc1f 	bl	80010a8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fd54 	bl	800131c <LL_ADC_REG_IsConversionOngoing>
 8001874:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fd60 	bl	8001342 <LL_ADC_INJ_IsConversionOngoing>
 8001882:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001886:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800188a:	2b00      	cmp	r3, #0
 800188c:	f040 81a6 	bne.w	8001bdc <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001890:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001894:	2b00      	cmp	r3, #0
 8001896:	f040 81a1 	bne.w	8001bdc <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6818      	ldr	r0, [r3, #0]
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	6819      	ldr	r1, [r3, #0]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	461a      	mov	r2, r3
 80018a8:	f7ff fc2a 	bl	8001100 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	695a      	ldr	r2, [r3, #20]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	08db      	lsrs	r3, r3, #3
 80018b8:	f003 0303 	and.w	r3, r3, #3
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	d00a      	beq.n	80018e4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6818      	ldr	r0, [r3, #0]
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	6919      	ldr	r1, [r3, #16]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80018de:	f7ff fb7b 	bl	8000fd8 <LL_ADC_SetOffset>
 80018e2:	e17b      	b.n	8001bdc <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2100      	movs	r1, #0
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff fb98 	bl	8001020 <LL_ADC_GetOffsetChannel>
 80018f0:	4603      	mov	r3, r0
 80018f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10a      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x148>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2100      	movs	r1, #0
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fb8d 	bl	8001020 <LL_ADC_GetOffsetChannel>
 8001906:	4603      	mov	r3, r0
 8001908:	0e9b      	lsrs	r3, r3, #26
 800190a:	f003 021f 	and.w	r2, r3, #31
 800190e:	e01e      	b.n	800194e <HAL_ADC_ConfigChannel+0x186>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2100      	movs	r1, #0
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff fb82 	bl	8001020 <LL_ADC_GetOffsetChannel>
 800191c:	4603      	mov	r3, r0
 800191e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001922:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001926:	fa93 f3a3 	rbit	r3, r3
 800192a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800192e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001932:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001936:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800193e:	2320      	movs	r3, #32
 8001940:	e004      	b.n	800194c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001942:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001946:	fab3 f383 	clz	r3, r3
 800194a:	b2db      	uxtb	r3, r3
 800194c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001956:	2b00      	cmp	r3, #0
 8001958:	d105      	bne.n	8001966 <HAL_ADC_ConfigChannel+0x19e>
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	0e9b      	lsrs	r3, r3, #26
 8001960:	f003 031f 	and.w	r3, r3, #31
 8001964:	e018      	b.n	8001998 <HAL_ADC_ConfigChannel+0x1d0>
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001972:	fa93 f3a3 	rbit	r3, r3
 8001976:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800197a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800197e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001982:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800198a:	2320      	movs	r3, #32
 800198c:	e004      	b.n	8001998 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800198e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001992:	fab3 f383 	clz	r3, r3
 8001996:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001998:	429a      	cmp	r2, r3
 800199a:	d106      	bne.n	80019aa <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2200      	movs	r2, #0
 80019a2:	2100      	movs	r1, #0
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fb51 	bl	800104c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2101      	movs	r1, #1
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fb35 	bl	8001020 <LL_ADC_GetOffsetChannel>
 80019b6:	4603      	mov	r3, r0
 80019b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d10a      	bne.n	80019d6 <HAL_ADC_ConfigChannel+0x20e>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2101      	movs	r1, #1
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fb2a 	bl	8001020 <LL_ADC_GetOffsetChannel>
 80019cc:	4603      	mov	r3, r0
 80019ce:	0e9b      	lsrs	r3, r3, #26
 80019d0:	f003 021f 	and.w	r2, r3, #31
 80019d4:	e01e      	b.n	8001a14 <HAL_ADC_ConfigChannel+0x24c>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2101      	movs	r1, #1
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff fb1f 	bl	8001020 <LL_ADC_GetOffsetChannel>
 80019e2:	4603      	mov	r3, r0
 80019e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019ec:	fa93 f3a3 	rbit	r3, r3
 80019f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80019f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80019f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80019fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001a04:	2320      	movs	r3, #32
 8001a06:	e004      	b.n	8001a12 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001a08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a0c:	fab3 f383 	clz	r3, r3
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d105      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x264>
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	0e9b      	lsrs	r3, r3, #26
 8001a26:	f003 031f 	and.w	r3, r3, #31
 8001a2a:	e018      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x296>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a38:	fa93 f3a3 	rbit	r3, r3
 8001a3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001a40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001a48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001a50:	2320      	movs	r3, #32
 8001a52:	e004      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001a54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a58:	fab3 f383 	clz	r3, r3
 8001a5c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d106      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2200      	movs	r2, #0
 8001a68:	2101      	movs	r1, #1
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff faee 	bl	800104c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2102      	movs	r1, #2
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fad2 	bl	8001020 <LL_ADC_GetOffsetChannel>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10a      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x2d4>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2102      	movs	r1, #2
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff fac7 	bl	8001020 <LL_ADC_GetOffsetChannel>
 8001a92:	4603      	mov	r3, r0
 8001a94:	0e9b      	lsrs	r3, r3, #26
 8001a96:	f003 021f 	and.w	r2, r3, #31
 8001a9a:	e01e      	b.n	8001ada <HAL_ADC_ConfigChannel+0x312>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2102      	movs	r1, #2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff fabc 	bl	8001020 <LL_ADC_GetOffsetChannel>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ab2:	fa93 f3a3 	rbit	r3, r3
 8001ab6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001aba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001abe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001ac2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001aca:	2320      	movs	r3, #32
 8001acc:	e004      	b.n	8001ad8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001ace:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ad2:	fab3 f383 	clz	r3, r3
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d105      	bne.n	8001af2 <HAL_ADC_ConfigChannel+0x32a>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	0e9b      	lsrs	r3, r3, #26
 8001aec:	f003 031f 	and.w	r3, r3, #31
 8001af0:	e016      	b.n	8001b20 <HAL_ADC_ConfigChannel+0x358>
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001afe:	fa93 f3a3 	rbit	r3, r3
 8001b02:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001b04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001b0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001b12:	2320      	movs	r3, #32
 8001b14:	e004      	b.n	8001b20 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001b16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b1a:	fab3 f383 	clz	r3, r3
 8001b1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d106      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2102      	movs	r1, #2
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff fa8d 	bl	800104c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2103      	movs	r1, #3
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fa71 	bl	8001020 <LL_ADC_GetOffsetChannel>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d10a      	bne.n	8001b5e <HAL_ADC_ConfigChannel+0x396>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2103      	movs	r1, #3
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff fa66 	bl	8001020 <LL_ADC_GetOffsetChannel>
 8001b54:	4603      	mov	r3, r0
 8001b56:	0e9b      	lsrs	r3, r3, #26
 8001b58:	f003 021f 	and.w	r2, r3, #31
 8001b5c:	e017      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x3c6>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2103      	movs	r1, #3
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fa5b 	bl	8001020 <LL_ADC_GetOffsetChannel>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b70:	fa93 f3a3 	rbit	r3, r3
 8001b74:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001b76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b78:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001b7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001b80:	2320      	movs	r3, #32
 8001b82:	e003      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001b84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b86:	fab3 f383 	clz	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d105      	bne.n	8001ba6 <HAL_ADC_ConfigChannel+0x3de>
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	0e9b      	lsrs	r3, r3, #26
 8001ba0:	f003 031f 	and.w	r3, r3, #31
 8001ba4:	e011      	b.n	8001bca <HAL_ADC_ConfigChannel+0x402>
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bae:	fa93 f3a3 	rbit	r3, r3
 8001bb2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001bb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bb6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001bbe:	2320      	movs	r3, #32
 8001bc0:	e003      	b.n	8001bca <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bc4:	fab3 f383 	clz	r3, r3
 8001bc8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d106      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2103      	movs	r1, #3
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fa38 	bl	800104c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff fb61 	bl	80012a8 <LL_ADC_IsEnabled>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f040 813f 	bne.w	8001e6c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6818      	ldr	r0, [r3, #0]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	6819      	ldr	r1, [r3, #0]
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	f7ff faac 	bl	8001158 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	4a8e      	ldr	r2, [pc, #568]	; (8001e40 <HAL_ADC_ConfigChannel+0x678>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	f040 8130 	bne.w	8001e6c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d10b      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x46c>
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	0e9b      	lsrs	r3, r3, #26
 8001c22:	3301      	adds	r3, #1
 8001c24:	f003 031f 	and.w	r3, r3, #31
 8001c28:	2b09      	cmp	r3, #9
 8001c2a:	bf94      	ite	ls
 8001c2c:	2301      	movls	r3, #1
 8001c2e:	2300      	movhi	r3, #0
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	e019      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x4a0>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c3c:	fa93 f3a3 	rbit	r3, r3
 8001c40:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001c42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c44:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001c46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001c4c:	2320      	movs	r3, #32
 8001c4e:	e003      	b.n	8001c58 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001c50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c52:	fab3 f383 	clz	r3, r3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	3301      	adds	r3, #1
 8001c5a:	f003 031f 	and.w	r3, r3, #31
 8001c5e:	2b09      	cmp	r3, #9
 8001c60:	bf94      	ite	ls
 8001c62:	2301      	movls	r3, #1
 8001c64:	2300      	movhi	r3, #0
 8001c66:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d079      	beq.n	8001d60 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d107      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x4c0>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	0e9b      	lsrs	r3, r3, #26
 8001c7e:	3301      	adds	r3, #1
 8001c80:	069b      	lsls	r3, r3, #26
 8001c82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c86:	e015      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0x4ec>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c90:	fa93 f3a3 	rbit	r3, r3
 8001c94:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c98:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001ca0:	2320      	movs	r3, #32
 8001ca2:	e003      	b.n	8001cac <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ca6:	fab3 f383 	clz	r3, r3
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	3301      	adds	r3, #1
 8001cae:	069b      	lsls	r3, r3, #26
 8001cb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d109      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x50c>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	0e9b      	lsrs	r3, r3, #26
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	f003 031f 	and.w	r3, r3, #31
 8001ccc:	2101      	movs	r1, #1
 8001cce:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd2:	e017      	b.n	8001d04 <HAL_ADC_ConfigChannel+0x53c>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ce4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001cec:	2320      	movs	r3, #32
 8001cee:	e003      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cf2:	fab3 f383 	clz	r3, r3
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	f003 031f 	and.w	r3, r3, #31
 8001cfe:	2101      	movs	r1, #1
 8001d00:	fa01 f303 	lsl.w	r3, r1, r3
 8001d04:	ea42 0103 	orr.w	r1, r2, r3
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d10a      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x562>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	0e9b      	lsrs	r3, r3, #26
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	f003 021f 	and.w	r2, r3, #31
 8001d20:	4613      	mov	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4413      	add	r3, r2
 8001d26:	051b      	lsls	r3, r3, #20
 8001d28:	e018      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x594>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d32:	fa93 f3a3 	rbit	r3, r3
 8001d36:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001d42:	2320      	movs	r3, #32
 8001d44:	e003      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d48:	fab3 f383 	clz	r3, r3
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	3301      	adds	r3, #1
 8001d50:	f003 021f 	and.w	r2, r3, #31
 8001d54:	4613      	mov	r3, r2
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	4413      	add	r3, r2
 8001d5a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d5c:	430b      	orrs	r3, r1
 8001d5e:	e080      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d107      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x5b4>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	0e9b      	lsrs	r3, r3, #26
 8001d72:	3301      	adds	r3, #1
 8001d74:	069b      	lsls	r3, r3, #26
 8001d76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d7a:	e015      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x5e0>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d84:	fa93 f3a3 	rbit	r3, r3
 8001d88:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d8c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001d94:	2320      	movs	r3, #32
 8001d96:	e003      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d9a:	fab3 f383 	clz	r3, r3
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	3301      	adds	r3, #1
 8001da2:	069b      	lsls	r3, r3, #26
 8001da4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d109      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x600>
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	0e9b      	lsrs	r3, r3, #26
 8001dba:	3301      	adds	r3, #1
 8001dbc:	f003 031f 	and.w	r3, r3, #31
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc6:	e017      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x630>
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dce:	6a3b      	ldr	r3, [r7, #32]
 8001dd0:	fa93 f3a3 	rbit	r3, r3
 8001dd4:	61fb      	str	r3, [r7, #28]
  return result;
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001de0:	2320      	movs	r3, #32
 8001de2:	e003      	b.n	8001dec <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	fab3 f383 	clz	r3, r3
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	3301      	adds	r3, #1
 8001dee:	f003 031f 	and.w	r3, r3, #31
 8001df2:	2101      	movs	r1, #1
 8001df4:	fa01 f303 	lsl.w	r3, r1, r3
 8001df8:	ea42 0103 	orr.w	r1, r2, r3
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d10d      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x65c>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	0e9b      	lsrs	r3, r3, #26
 8001e0e:	3301      	adds	r3, #1
 8001e10:	f003 021f 	and.w	r2, r3, #31
 8001e14:	4613      	mov	r3, r2
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	4413      	add	r3, r2
 8001e1a:	3b1e      	subs	r3, #30
 8001e1c:	051b      	lsls	r3, r3, #20
 8001e1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e22:	e01d      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x698>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	fa93 f3a3 	rbit	r3, r3
 8001e30:	613b      	str	r3, [r7, #16]
  return result;
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d103      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001e3c:	2320      	movs	r3, #32
 8001e3e:	e005      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x684>
 8001e40:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	fab3 f383 	clz	r3, r3
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	f003 021f 	and.w	r2, r3, #31
 8001e52:	4613      	mov	r3, r2
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	4413      	add	r3, r2
 8001e58:	3b1e      	subs	r3, #30
 8001e5a:	051b      	lsls	r3, r3, #20
 8001e5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e60:	430b      	orrs	r3, r1
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	6892      	ldr	r2, [r2, #8]
 8001e66:	4619      	mov	r1, r3
 8001e68:	f7ff f94a 	bl	8001100 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	4b44      	ldr	r3, [pc, #272]	; (8001f84 <HAL_ADC_ConfigChannel+0x7bc>)
 8001e72:	4013      	ands	r3, r2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d07a      	beq.n	8001f6e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e78:	4843      	ldr	r0, [pc, #268]	; (8001f88 <HAL_ADC_ConfigChannel+0x7c0>)
 8001e7a:	f7ff f89f 	bl	8000fbc <LL_ADC_GetCommonPathInternalCh>
 8001e7e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a41      	ldr	r2, [pc, #260]	; (8001f8c <HAL_ADC_ConfigChannel+0x7c4>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d12c      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d126      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a3c      	ldr	r2, [pc, #240]	; (8001f90 <HAL_ADC_ConfigChannel+0x7c8>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d004      	beq.n	8001eac <HAL_ADC_ConfigChannel+0x6e4>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a3b      	ldr	r2, [pc, #236]	; (8001f94 <HAL_ADC_ConfigChannel+0x7cc>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d15d      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001eac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001eb0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4834      	ldr	r0, [pc, #208]	; (8001f88 <HAL_ADC_ConfigChannel+0x7c0>)
 8001eb8:	f7ff f86d 	bl	8000f96 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ebc:	4b36      	ldr	r3, [pc, #216]	; (8001f98 <HAL_ADC_ConfigChannel+0x7d0>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	099b      	lsrs	r3, r3, #6
 8001ec2:	4a36      	ldr	r2, [pc, #216]	; (8001f9c <HAL_ADC_ConfigChannel+0x7d4>)
 8001ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec8:	099b      	lsrs	r3, r3, #6
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	4613      	mov	r3, r2
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	4413      	add	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ed6:	e002      	b.n	8001ede <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1f9      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ee4:	e040      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a2d      	ldr	r2, [pc, #180]	; (8001fa0 <HAL_ADC_ConfigChannel+0x7d8>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d118      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x75a>
 8001ef0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ef4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d112      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a23      	ldr	r2, [pc, #140]	; (8001f90 <HAL_ADC_ConfigChannel+0x7c8>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d004      	beq.n	8001f10 <HAL_ADC_ConfigChannel+0x748>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a22      	ldr	r2, [pc, #136]	; (8001f94 <HAL_ADC_ConfigChannel+0x7cc>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d12d      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f18:	4619      	mov	r1, r3
 8001f1a:	481b      	ldr	r0, [pc, #108]	; (8001f88 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f1c:	f7ff f83b 	bl	8000f96 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f20:	e024      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a1f      	ldr	r2, [pc, #124]	; (8001fa4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d120      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d11a      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a14      	ldr	r2, [pc, #80]	; (8001f90 <HAL_ADC_ConfigChannel+0x7c8>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d115      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	480e      	ldr	r0, [pc, #56]	; (8001f88 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f4e:	f7ff f822 	bl	8000f96 <LL_ADC_SetCommonPathInternalCh>
 8001f52:	e00c      	b.n	8001f6e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f58:	f043 0220 	orr.w	r2, r3, #32
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001f66:	e002      	b.n	8001f6e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f68:	bf00      	nop
 8001f6a:	e000      	b.n	8001f6e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f6c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001f76:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	37d8      	adds	r7, #216	; 0xd8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	80080000 	.word	0x80080000
 8001f88:	50040300 	.word	0x50040300
 8001f8c:	c7520000 	.word	0xc7520000
 8001f90:	50040000 	.word	0x50040000
 8001f94:	50040200 	.word	0x50040200
 8001f98:	20000000 	.word	0x20000000
 8001f9c:	053e2d63 	.word	0x053e2d63
 8001fa0:	cb840000 	.word	0xcb840000
 8001fa4:	80000001 	.word	0x80000001

08001fa8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff f975 	bl	80012a8 <LL_ADC_IsEnabled>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d169      	bne.n	8002098 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	4b36      	ldr	r3, [pc, #216]	; (80020a4 <ADC_Enable+0xfc>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00d      	beq.n	8001fee <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd6:	f043 0210 	orr.w	r2, r3, #16
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe2:	f043 0201 	orr.w	r2, r3, #1
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e055      	b.n	800209a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff f930 	bl	8001258 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001ff8:	482b      	ldr	r0, [pc, #172]	; (80020a8 <ADC_Enable+0x100>)
 8001ffa:	f7fe ffdf 	bl	8000fbc <LL_ADC_GetCommonPathInternalCh>
 8001ffe:	4603      	mov	r3, r0
 8002000:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d013      	beq.n	8002030 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002008:	4b28      	ldr	r3, [pc, #160]	; (80020ac <ADC_Enable+0x104>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	099b      	lsrs	r3, r3, #6
 800200e:	4a28      	ldr	r2, [pc, #160]	; (80020b0 <ADC_Enable+0x108>)
 8002010:	fba2 2303 	umull	r2, r3, r2, r3
 8002014:	099b      	lsrs	r3, r3, #6
 8002016:	1c5a      	adds	r2, r3, #1
 8002018:	4613      	mov	r3, r2
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	4413      	add	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002022:	e002      	b.n	800202a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	3b01      	subs	r3, #1
 8002028:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1f9      	bne.n	8002024 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002030:	f7fe ff6e 	bl	8000f10 <HAL_GetTick>
 8002034:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002036:	e028      	b.n	800208a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff f933 	bl	80012a8 <LL_ADC_IsEnabled>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d104      	bne.n	8002052 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff f903 	bl	8001258 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002052:	f7fe ff5d 	bl	8000f10 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d914      	bls.n	800208a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b01      	cmp	r3, #1
 800206c:	d00d      	beq.n	800208a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002072:	f043 0210 	orr.w	r2, r3, #16
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207e:	f043 0201 	orr.w	r2, r3, #1
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e007      	b.n	800209a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b01      	cmp	r3, #1
 8002096:	d1cf      	bne.n	8002038 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	8000003f 	.word	0x8000003f
 80020a8:	50040300 	.word	0x50040300
 80020ac:	20000000 	.word	0x20000000
 80020b0:	053e2d63 	.word	0x053e2d63

080020b4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff f904 	bl	80012ce <LL_ADC_IsDisableOngoing>
 80020c6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff f8eb 	bl	80012a8 <LL_ADC_IsEnabled>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d047      	beq.n	8002168 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d144      	bne.n	8002168 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 030d 	and.w	r3, r3, #13
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d10c      	bne.n	8002106 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff f8c5 	bl	8001280 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2203      	movs	r2, #3
 80020fc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020fe:	f7fe ff07 	bl	8000f10 <HAL_GetTick>
 8002102:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002104:	e029      	b.n	800215a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210a:	f043 0210 	orr.w	r2, r3, #16
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002116:	f043 0201 	orr.w	r2, r3, #1
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e023      	b.n	800216a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002122:	f7fe fef5 	bl	8000f10 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d914      	bls.n	800215a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00d      	beq.n	800215a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002142:	f043 0210 	orr.w	r2, r3, #16
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214e:	f043 0201 	orr.w	r2, r3, #1
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e007      	b.n	800216a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1dc      	bne.n	8002122 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b084      	sub	sp, #16
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002184:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002188:	2b00      	cmp	r3, #0
 800218a:	d14b      	bne.n	8002224 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002190:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d021      	beq.n	80021ea <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe ff69 	bl	8001082 <LL_ADC_REG_IsTriggerSourceSWStart>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d032      	beq.n	800221c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d12b      	bne.n	800221c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d11f      	bne.n	800221c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e0:	f043 0201 	orr.w	r2, r3, #1
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	655a      	str	r2, [r3, #84]	; 0x54
 80021e8:	e018      	b.n	800221c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d111      	bne.n	800221c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002208:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d105      	bne.n	800221c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002214:	f043 0201 	orr.w	r2, r3, #1
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f7ff fab5 	bl	800178c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002222:	e00e      	b.n	8002242 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002228:	f003 0310 	and.w	r3, r3, #16
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f7ff fabf 	bl	80017b4 <HAL_ADC_ErrorCallback>
}
 8002236:	e004      	b.n	8002242 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	4798      	blx	r3
}
 8002242:	bf00      	nop
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b084      	sub	sp, #16
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002256:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f7ff faa1 	bl	80017a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800225e:	bf00      	nop
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b084      	sub	sp, #16
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002272:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002278:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002284:	f043 0204 	orr.w	r2, r3, #4
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f7ff fa91 	bl	80017b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002292:	bf00      	nop
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <LL_ADC_IsEnabled>:
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d101      	bne.n	80022b2 <LL_ADC_IsEnabled+0x18>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <LL_ADC_IsEnabled+0x1a>
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <LL_ADC_StartCalibration>:
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80022d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80022dc:	4313      	orrs	r3, r2
 80022de:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	609a      	str	r2, [r3, #8]
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <LL_ADC_IsCalibrationOnGoing>:
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002302:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002306:	d101      	bne.n	800230c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002308:	2301      	movs	r3, #1
 800230a:	e000      	b.n	800230e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <LL_ADC_REG_IsConversionOngoing>:
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	2b04      	cmp	r3, #4
 800232c:	d101      	bne.n	8002332 <LL_ADC_REG_IsConversionOngoing+0x18>
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800234a:	2300      	movs	r3, #0
 800234c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002354:	2b01      	cmp	r3, #1
 8002356:	d101      	bne.n	800235c <HAL_ADCEx_Calibration_Start+0x1c>
 8002358:	2302      	movs	r3, #2
 800235a:	e04d      	b.n	80023f8 <HAL_ADCEx_Calibration_Start+0xb8>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7ff fea5 	bl	80020b4 <ADC_Disable>
 800236a:	4603      	mov	r3, r0
 800236c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d136      	bne.n	80023e2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002378:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800237c:	f023 0302 	bic.w	r3, r3, #2
 8002380:	f043 0202 	orr.w	r2, r3, #2
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6839      	ldr	r1, [r7, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff ff96 	bl	80022c0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002394:	e014      	b.n	80023c0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	3301      	adds	r3, #1
 800239a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80023a2:	d30d      	bcc.n	80023c0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a8:	f023 0312 	bic.w	r3, r3, #18
 80023ac:	f043 0210 	orr.w	r2, r3, #16
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e01b      	b.n	80023f8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff94 	bl	80022f2 <LL_ADC_IsCalibrationOnGoing>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1e2      	bne.n	8002396 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d4:	f023 0303 	bic.w	r3, r3, #3
 80023d8:	f043 0201 	orr.w	r2, r3, #1
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	655a      	str	r2, [r3, #84]	; 0x54
 80023e0:	e005      	b.n	80023ee <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e6:	f043 0210 	orr.w	r2, r3, #16
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002400:	b590      	push	{r4, r7, lr}
 8002402:	b09f      	sub	sp, #124	; 0x7c
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800240a:	2300      	movs	r3, #0
 800240c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002416:	2b01      	cmp	r3, #1
 8002418:	d101      	bne.n	800241e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800241a:	2302      	movs	r3, #2
 800241c:	e093      	b.n	8002546 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002426:	2300      	movs	r3, #0
 8002428:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800242a:	2300      	movs	r3, #0
 800242c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a47      	ldr	r2, [pc, #284]	; (8002550 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d102      	bne.n	800243e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002438:	4b46      	ldr	r3, [pc, #280]	; (8002554 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	e001      	b.n	8002442 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800243e:	2300      	movs	r3, #0
 8002440:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10b      	bne.n	8002460 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244c:	f043 0220 	orr.w	r2, r3, #32
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e072      	b.n	8002546 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff ff59 	bl	800231a <LL_ADC_REG_IsConversionOngoing>
 8002468:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff ff53 	bl	800231a <LL_ADC_REG_IsConversionOngoing>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d154      	bne.n	8002524 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800247a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800247c:	2b00      	cmp	r3, #0
 800247e:	d151      	bne.n	8002524 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002480:	4b35      	ldr	r3, [pc, #212]	; (8002558 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002482:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d02c      	beq.n	80024e6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800248c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	6859      	ldr	r1, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800249e:	035b      	lsls	r3, r3, #13
 80024a0:	430b      	orrs	r3, r1
 80024a2:	431a      	orrs	r2, r3
 80024a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024a6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024a8:	4829      	ldr	r0, [pc, #164]	; (8002550 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80024aa:	f7ff fef6 	bl	800229a <LL_ADC_IsEnabled>
 80024ae:	4604      	mov	r4, r0
 80024b0:	4828      	ldr	r0, [pc, #160]	; (8002554 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80024b2:	f7ff fef2 	bl	800229a <LL_ADC_IsEnabled>
 80024b6:	4603      	mov	r3, r0
 80024b8:	431c      	orrs	r4, r3
 80024ba:	4828      	ldr	r0, [pc, #160]	; (800255c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80024bc:	f7ff feed 	bl	800229a <LL_ADC_IsEnabled>
 80024c0:	4603      	mov	r3, r0
 80024c2:	4323      	orrs	r3, r4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d137      	bne.n	8002538 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80024c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024d0:	f023 030f 	bic.w	r3, r3, #15
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	6811      	ldr	r1, [r2, #0]
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	6892      	ldr	r2, [r2, #8]
 80024dc:	430a      	orrs	r2, r1
 80024de:	431a      	orrs	r2, r3
 80024e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024e2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024e4:	e028      	b.n	8002538 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80024e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024f0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024f2:	4817      	ldr	r0, [pc, #92]	; (8002550 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80024f4:	f7ff fed1 	bl	800229a <LL_ADC_IsEnabled>
 80024f8:	4604      	mov	r4, r0
 80024fa:	4816      	ldr	r0, [pc, #88]	; (8002554 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80024fc:	f7ff fecd 	bl	800229a <LL_ADC_IsEnabled>
 8002500:	4603      	mov	r3, r0
 8002502:	431c      	orrs	r4, r3
 8002504:	4815      	ldr	r0, [pc, #84]	; (800255c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002506:	f7ff fec8 	bl	800229a <LL_ADC_IsEnabled>
 800250a:	4603      	mov	r3, r0
 800250c:	4323      	orrs	r3, r4
 800250e:	2b00      	cmp	r3, #0
 8002510:	d112      	bne.n	8002538 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800251a:	f023 030f 	bic.w	r3, r3, #15
 800251e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002520:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002522:	e009      	b.n	8002538 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002528:	f043 0220 	orr.w	r2, r3, #32
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002536:	e000      	b.n	800253a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002538:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002542:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002546:	4618      	mov	r0, r3
 8002548:	377c      	adds	r7, #124	; 0x7c
 800254a:	46bd      	mov	sp, r7
 800254c:	bd90      	pop	{r4, r7, pc}
 800254e:	bf00      	nop
 8002550:	50040000 	.word	0x50040000
 8002554:	50040100 	.word	0x50040100
 8002558:	50040300 	.word	0x50040300
 800255c:	50040200 	.word	0x50040200

08002560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002570:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800257c:	4013      	ands	r3, r2
 800257e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800258c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002592:	4a04      	ldr	r2, [pc, #16]	; (80025a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	60d3      	str	r3, [r2, #12]
}
 8002598:	bf00      	nop
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025ac:	4b04      	ldr	r3, [pc, #16]	; (80025c0 <__NVIC_GetPriorityGrouping+0x18>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	0a1b      	lsrs	r3, r3, #8
 80025b2:	f003 0307 	and.w	r3, r3, #7
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	db0b      	blt.n	80025ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	f003 021f 	and.w	r2, r3, #31
 80025dc:	4907      	ldr	r1, [pc, #28]	; (80025fc <__NVIC_EnableIRQ+0x38>)
 80025de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e2:	095b      	lsrs	r3, r3, #5
 80025e4:	2001      	movs	r0, #1
 80025e6:	fa00 f202 	lsl.w	r2, r0, r2
 80025ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	e000e100 	.word	0xe000e100

08002600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	6039      	str	r1, [r7, #0]
 800260a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800260c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002610:	2b00      	cmp	r3, #0
 8002612:	db0a      	blt.n	800262a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	b2da      	uxtb	r2, r3
 8002618:	490c      	ldr	r1, [pc, #48]	; (800264c <__NVIC_SetPriority+0x4c>)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	0112      	lsls	r2, r2, #4
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	440b      	add	r3, r1
 8002624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002628:	e00a      	b.n	8002640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	b2da      	uxtb	r2, r3
 800262e:	4908      	ldr	r1, [pc, #32]	; (8002650 <__NVIC_SetPriority+0x50>)
 8002630:	79fb      	ldrb	r3, [r7, #7]
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	3b04      	subs	r3, #4
 8002638:	0112      	lsls	r2, r2, #4
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	440b      	add	r3, r1
 800263e:	761a      	strb	r2, [r3, #24]
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	e000e100 	.word	0xe000e100
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002654:	b480      	push	{r7}
 8002656:	b089      	sub	sp, #36	; 0x24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f1c3 0307 	rsb	r3, r3, #7
 800266e:	2b04      	cmp	r3, #4
 8002670:	bf28      	it	cs
 8002672:	2304      	movcs	r3, #4
 8002674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	3304      	adds	r3, #4
 800267a:	2b06      	cmp	r3, #6
 800267c:	d902      	bls.n	8002684 <NVIC_EncodePriority+0x30>
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	3b03      	subs	r3, #3
 8002682:	e000      	b.n	8002686 <NVIC_EncodePriority+0x32>
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002688:	f04f 32ff 	mov.w	r2, #4294967295
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43da      	mvns	r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	401a      	ands	r2, r3
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800269c:	f04f 31ff 	mov.w	r1, #4294967295
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	fa01 f303 	lsl.w	r3, r1, r3
 80026a6:	43d9      	mvns	r1, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ac:	4313      	orrs	r3, r2
         );
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3724      	adds	r7, #36	; 0x24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
	...

080026bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026cc:	d301      	bcc.n	80026d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ce:	2301      	movs	r3, #1
 80026d0:	e00f      	b.n	80026f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026d2:	4a0a      	ldr	r2, [pc, #40]	; (80026fc <SysTick_Config+0x40>)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026da:	210f      	movs	r1, #15
 80026dc:	f04f 30ff 	mov.w	r0, #4294967295
 80026e0:	f7ff ff8e 	bl	8002600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026e4:	4b05      	ldr	r3, [pc, #20]	; (80026fc <SysTick_Config+0x40>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ea:	4b04      	ldr	r3, [pc, #16]	; (80026fc <SysTick_Config+0x40>)
 80026ec:	2207      	movs	r2, #7
 80026ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	e000e010 	.word	0xe000e010

08002700 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff ff29 	bl	8002560 <__NVIC_SetPriorityGrouping>
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b086      	sub	sp, #24
 800271a:	af00      	add	r7, sp, #0
 800271c:	4603      	mov	r3, r0
 800271e:	60b9      	str	r1, [r7, #8]
 8002720:	607a      	str	r2, [r7, #4]
 8002722:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002728:	f7ff ff3e 	bl	80025a8 <__NVIC_GetPriorityGrouping>
 800272c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	68b9      	ldr	r1, [r7, #8]
 8002732:	6978      	ldr	r0, [r7, #20]
 8002734:	f7ff ff8e 	bl	8002654 <NVIC_EncodePriority>
 8002738:	4602      	mov	r2, r0
 800273a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800273e:	4611      	mov	r1, r2
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff ff5d 	bl	8002600 <__NVIC_SetPriority>
}
 8002746:	bf00      	nop
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	4603      	mov	r3, r0
 8002756:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff ff31 	bl	80025c4 <__NVIC_EnableIRQ>
}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff ffa2 	bl	80026bc <SysTick_Config>
 8002778:	4603      	mov	r3, r0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e014      	b.n	80027be <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	791b      	ldrb	r3, [r3, #4]
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d105      	bne.n	80027aa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7fe f9e1 	bl	8000b6c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2202      	movs	r2, #2
 80027ae:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	795b      	ldrb	r3, [r3, #5]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d101      	bne.n	80027e6 <HAL_DAC_Start_DMA+0x1e>
 80027e2:	2302      	movs	r3, #2
 80027e4:	e0ab      	b.n	800293e <HAL_DAC_Start_DMA+0x176>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2201      	movs	r2, #1
 80027ea:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2202      	movs	r2, #2
 80027f0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d12f      	bne.n	8002858 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	4a52      	ldr	r2, [pc, #328]	; (8002948 <HAL_DAC_Start_DMA+0x180>)
 80027fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	4a51      	ldr	r2, [pc, #324]	; (800294c <HAL_DAC_Start_DMA+0x184>)
 8002806:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	4a50      	ldr	r2, [pc, #320]	; (8002950 <HAL_DAC_Start_DMA+0x188>)
 800280e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800281e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	2b08      	cmp	r3, #8
 8002824:	d013      	beq.n	800284e <HAL_DAC_Start_DMA+0x86>
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	2b08      	cmp	r3, #8
 800282a:	d845      	bhi.n	80028b8 <HAL_DAC_Start_DMA+0xf0>
 800282c:	6a3b      	ldr	r3, [r7, #32]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_DAC_Start_DMA+0x72>
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	2b04      	cmp	r3, #4
 8002836:	d005      	beq.n	8002844 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002838:	e03e      	b.n	80028b8 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	3308      	adds	r3, #8
 8002840:	613b      	str	r3, [r7, #16]
        break;
 8002842:	e03c      	b.n	80028be <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	330c      	adds	r3, #12
 800284a:	613b      	str	r3, [r7, #16]
        break;
 800284c:	e037      	b.n	80028be <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	3310      	adds	r3, #16
 8002854:	613b      	str	r3, [r7, #16]
        break;
 8002856:	e032      	b.n	80028be <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	4a3d      	ldr	r2, [pc, #244]	; (8002954 <HAL_DAC_Start_DMA+0x18c>)
 800285e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	4a3c      	ldr	r2, [pc, #240]	; (8002958 <HAL_DAC_Start_DMA+0x190>)
 8002866:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	4a3b      	ldr	r2, [pc, #236]	; (800295c <HAL_DAC_Start_DMA+0x194>)
 800286e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800287e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	2b08      	cmp	r3, #8
 8002884:	d013      	beq.n	80028ae <HAL_DAC_Start_DMA+0xe6>
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	2b08      	cmp	r3, #8
 800288a:	d817      	bhi.n	80028bc <HAL_DAC_Start_DMA+0xf4>
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_DAC_Start_DMA+0xd2>
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	2b04      	cmp	r3, #4
 8002896:	d005      	beq.n	80028a4 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002898:	e010      	b.n	80028bc <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	3314      	adds	r3, #20
 80028a0:	613b      	str	r3, [r7, #16]
        break;
 80028a2:	e00c      	b.n	80028be <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	3318      	adds	r3, #24
 80028aa:	613b      	str	r3, [r7, #16]
        break;
 80028ac:	e007      	b.n	80028be <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	331c      	adds	r3, #28
 80028b4:	613b      	str	r3, [r7, #16]
        break;
 80028b6:	e002      	b.n	80028be <HAL_DAC_Start_DMA+0xf6>
        break;
 80028b8:	bf00      	nop
 80028ba:	e000      	b.n	80028be <HAL_DAC_Start_DMA+0xf6>
        break;
 80028bc:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d111      	bne.n	80028e8 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028d2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6898      	ldr	r0, [r3, #8]
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	f000 fab9 	bl	8002e54 <HAL_DMA_Start_IT>
 80028e2:	4603      	mov	r3, r0
 80028e4:	75fb      	strb	r3, [r7, #23]
 80028e6:	e010      	b.n	800290a <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80028f6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	68d8      	ldr	r0, [r3, #12]
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	f000 faa7 	bl	8002e54 <HAL_DMA_Start_IT>
 8002906:	4603      	mov	r3, r0
 8002908:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002910:	7dfb      	ldrb	r3, [r7, #23]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10c      	bne.n	8002930 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6819      	ldr	r1, [r3, #0]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	f003 0310 	and.w	r3, r3, #16
 8002922:	2201      	movs	r2, #1
 8002924:	409a      	lsls	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	430a      	orrs	r2, r1
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	e005      	b.n	800293c <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	f043 0204 	orr.w	r2, r3, #4
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800293c:	7dfb      	ldrb	r3, [r7, #23]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	08002bd1 	.word	0x08002bd1
 800294c:	08002bf3 	.word	0x08002bf3
 8002950:	08002c0f 	.word	0x08002c0f
 8002954:	08002c79 	.word	0x08002c79
 8002958:	08002c9b 	.word	0x08002c9b
 800295c:	08002cb7 	.word	0x08002cb7

08002960 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b088      	sub	sp, #32
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	795b      	ldrb	r3, [r3, #5]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d101      	bne.n	80029b8 <HAL_DAC_ConfigChannel+0x1c>
 80029b4:	2302      	movs	r3, #2
 80029b6:	e107      	b.n	8002bc8 <HAL_DAC_ConfigChannel+0x22c>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2201      	movs	r2, #1
 80029bc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2202      	movs	r2, #2
 80029c2:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d174      	bne.n	8002ab6 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80029cc:	f7fe faa0 	bl	8000f10 <HAL_GetTick>
 80029d0:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d134      	bne.n	8002a42 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80029d8:	e011      	b.n	80029fe <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80029da:	f7fe fa99 	bl	8000f10 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d90a      	bls.n	80029fe <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	f043 0208 	orr.w	r2, r3, #8
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2203      	movs	r2, #3
 80029f8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e0e4      	b.n	8002bc8 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1e6      	bne.n	80029da <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002a0c:	2001      	movs	r0, #1
 8002a0e:	f7fe fa8b 	bl	8000f28 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	6992      	ldr	r2, [r2, #24]
 8002a1a:	641a      	str	r2, [r3, #64]	; 0x40
 8002a1c:	e01e      	b.n	8002a5c <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002a1e:	f7fe fa77 	bl	8000f10 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d90a      	bls.n	8002a42 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	f043 0208 	orr.w	r2, r3, #8
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e0c2      	b.n	8002bc8 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	dbe8      	blt.n	8002a1e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002a4c:	2001      	movs	r0, #1
 8002a4e:	f7fe fa6b 	bl	8000f28 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	6992      	ldr	r2, [r2, #24]
 8002a5a:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f003 0310 	and.w	r3, r3, #16
 8002a68:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	ea02 0103 	and.w	r1, r2, r3
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	69da      	ldr	r2, [r3, #28]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f003 0310 	and.w	r3, r3, #16
 8002a80:	409a      	lsls	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f003 0310 	and.w	r3, r3, #16
 8002a96:	21ff      	movs	r1, #255	; 0xff
 8002a98:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	ea02 0103 	and.w	r1, r2, r3
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	6a1a      	ldr	r2, [r3, #32]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f003 0310 	and.w	r3, r3, #16
 8002aac:	409a      	lsls	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d11d      	bne.n	8002afa <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac4:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f003 0310 	and.w	r3, r3, #16
 8002acc:	221f      	movs	r2, #31
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f003 0310 	and.w	r3, r3, #16
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b00:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f003 0310 	and.w	r3, r3, #16
 8002b08:	2207      	movs	r2, #7
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4013      	ands	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f003 0310 	and.w	r3, r3, #16
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6819      	ldr	r1, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f003 0310 	and.w	r3, r3, #16
 8002b4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43da      	mvns	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	400a      	ands	r2, r1
 8002b5e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f003 0310 	and.w	r3, r3, #16
 8002b6e:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43db      	mvns	r3, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f003 0310 	and.w	r3, r3, #16
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6819      	ldr	r1, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f003 0310 	and.w	r3, r3, #16
 8002baa:	22c0      	movs	r2, #192	; 0xc0
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43da      	mvns	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	400a      	ands	r2, r1
 8002bb8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3720      	adds	r7, #32
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bdc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f7ff febe 	bl	8002960 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2201      	movs	r2, #1
 8002be8:	711a      	strb	r2, [r3, #4]
}
 8002bea:	bf00      	nop
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b084      	sub	sp, #16
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfe:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f7ff feb7 	bl	8002974 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002c06:	bf00      	nop
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b084      	sub	sp, #16
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	f043 0204 	orr.w	r2, r3, #4
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f7ff fead 	bl	8002988 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2201      	movs	r2, #1
 8002c32:	711a      	strb	r2, [r3, #4]
}
 8002c34:	bf00      	nop
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c84:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f7ff ffd8 	bl	8002c3c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	711a      	strb	r2, [r3, #4]
}
 8002c92:	bf00      	nop
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b084      	sub	sp, #16
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f7ff ffd1 	bl	8002c50 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002cae:	bf00      	nop
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b084      	sub	sp, #16
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	f043 0204 	orr.w	r2, r3, #4
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f7ff ffc7 	bl	8002c64 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	711a      	strb	r2, [r3, #4]
}
 8002cdc:	bf00      	nop
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e098      	b.n	8002e28 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	4b4d      	ldr	r3, [pc, #308]	; (8002e34 <HAL_DMA_Init+0x150>)
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d80f      	bhi.n	8002d22 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	4b4b      	ldr	r3, [pc, #300]	; (8002e38 <HAL_DMA_Init+0x154>)
 8002d0a:	4413      	add	r3, r2
 8002d0c:	4a4b      	ldr	r2, [pc, #300]	; (8002e3c <HAL_DMA_Init+0x158>)
 8002d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d12:	091b      	lsrs	r3, r3, #4
 8002d14:	009a      	lsls	r2, r3, #2
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a48      	ldr	r2, [pc, #288]	; (8002e40 <HAL_DMA_Init+0x15c>)
 8002d1e:	641a      	str	r2, [r3, #64]	; 0x40
 8002d20:	e00e      	b.n	8002d40 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	4b46      	ldr	r3, [pc, #280]	; (8002e44 <HAL_DMA_Init+0x160>)
 8002d2a:	4413      	add	r3, r2
 8002d2c:	4a43      	ldr	r2, [pc, #268]	; (8002e3c <HAL_DMA_Init+0x158>)
 8002d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d32:	091b      	lsrs	r3, r3, #4
 8002d34:	009a      	lsls	r2, r3, #2
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a42      	ldr	r2, [pc, #264]	; (8002e48 <HAL_DMA_Init+0x164>)
 8002d3e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d5a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002d64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d9a:	d039      	beq.n	8002e10 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	4a27      	ldr	r2, [pc, #156]	; (8002e40 <HAL_DMA_Init+0x15c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d11a      	bne.n	8002ddc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002da6:	4b29      	ldr	r3, [pc, #164]	; (8002e4c <HAL_DMA_Init+0x168>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dae:	f003 031c 	and.w	r3, r3, #28
 8002db2:	210f      	movs	r1, #15
 8002db4:	fa01 f303 	lsl.w	r3, r1, r3
 8002db8:	43db      	mvns	r3, r3
 8002dba:	4924      	ldr	r1, [pc, #144]	; (8002e4c <HAL_DMA_Init+0x168>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002dc0:	4b22      	ldr	r3, [pc, #136]	; (8002e4c <HAL_DMA_Init+0x168>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6859      	ldr	r1, [r3, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dcc:	f003 031c 	and.w	r3, r3, #28
 8002dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd4:	491d      	ldr	r1, [pc, #116]	; (8002e4c <HAL_DMA_Init+0x168>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	600b      	str	r3, [r1, #0]
 8002dda:	e019      	b.n	8002e10 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ddc:	4b1c      	ldr	r3, [pc, #112]	; (8002e50 <HAL_DMA_Init+0x16c>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de4:	f003 031c 	and.w	r3, r3, #28
 8002de8:	210f      	movs	r1, #15
 8002dea:	fa01 f303 	lsl.w	r3, r1, r3
 8002dee:	43db      	mvns	r3, r3
 8002df0:	4917      	ldr	r1, [pc, #92]	; (8002e50 <HAL_DMA_Init+0x16c>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002df6:	4b16      	ldr	r3, [pc, #88]	; (8002e50 <HAL_DMA_Init+0x16c>)
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6859      	ldr	r1, [r3, #4]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e02:	f003 031c 	and.w	r3, r3, #28
 8002e06:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0a:	4911      	ldr	r1, [pc, #68]	; (8002e50 <HAL_DMA_Init+0x16c>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	40020407 	.word	0x40020407
 8002e38:	bffdfff8 	.word	0xbffdfff8
 8002e3c:	cccccccd 	.word	0xcccccccd
 8002e40:	40020000 	.word	0x40020000
 8002e44:	bffdfbf8 	.word	0xbffdfbf8
 8002e48:	40020400 	.word	0x40020400
 8002e4c:	400200a8 	.word	0x400200a8
 8002e50:	400204a8 	.word	0x400204a8

08002e54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
 8002e60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <HAL_DMA_Start_IT+0x20>
 8002e70:	2302      	movs	r3, #2
 8002e72:	e04b      	b.n	8002f0c <HAL_DMA_Start_IT+0xb8>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d13a      	bne.n	8002efe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0201 	bic.w	r2, r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	68b9      	ldr	r1, [r7, #8]
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 f8e0 	bl	8003072 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d008      	beq.n	8002ecc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f042 020e 	orr.w	r2, r2, #14
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	e00f      	b.n	8002eec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0204 	bic.w	r2, r2, #4
 8002eda:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 020a 	orr.w	r2, r2, #10
 8002eea:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0201 	orr.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	e005      	b.n	8002f0a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f06:	2302      	movs	r3, #2
 8002f08:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f30:	f003 031c 	and.w	r3, r3, #28
 8002f34:	2204      	movs	r2, #4
 8002f36:	409a      	lsls	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d026      	beq.n	8002f8e <HAL_DMA_IRQHandler+0x7a>
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d021      	beq.n	8002f8e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0320 	and.w	r3, r3, #32
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d107      	bne.n	8002f68 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0204 	bic.w	r2, r2, #4
 8002f66:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6c:	f003 021c 	and.w	r2, r3, #28
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	2104      	movs	r1, #4
 8002f76:	fa01 f202 	lsl.w	r2, r1, r2
 8002f7a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d071      	beq.n	8003068 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002f8c:	e06c      	b.n	8003068 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f92:	f003 031c 	and.w	r3, r3, #28
 8002f96:	2202      	movs	r2, #2
 8002f98:	409a      	lsls	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d02e      	beq.n	8003000 <HAL_DMA_IRQHandler+0xec>
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d029      	beq.n	8003000 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0320 	and.w	r3, r3, #32
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10b      	bne.n	8002fd2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 020a 	bic.w	r2, r2, #10
 8002fc8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	f003 021c 	and.w	r2, r3, #28
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	2102      	movs	r1, #2
 8002fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d038      	beq.n	8003068 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002ffe:	e033      	b.n	8003068 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003004:	f003 031c 	and.w	r3, r3, #28
 8003008:	2208      	movs	r2, #8
 800300a:	409a      	lsls	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4013      	ands	r3, r2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d02a      	beq.n	800306a <HAL_DMA_IRQHandler+0x156>
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b00      	cmp	r3, #0
 800301c:	d025      	beq.n	800306a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 020e 	bic.w	r2, r2, #14
 800302c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003032:	f003 021c 	and.w	r2, r3, #28
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	2101      	movs	r1, #1
 800303c:	fa01 f202 	lsl.w	r2, r1, r2
 8003040:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305c:	2b00      	cmp	r3, #0
 800305e:	d004      	beq.n	800306a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003068:	bf00      	nop
 800306a:	bf00      	nop
}
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003072:	b480      	push	{r7}
 8003074:	b085      	sub	sp, #20
 8003076:	af00      	add	r7, sp, #0
 8003078:	60f8      	str	r0, [r7, #12]
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607a      	str	r2, [r7, #4]
 800307e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003084:	f003 021c 	and.w	r2, r3, #28
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	2101      	movs	r1, #1
 800308e:	fa01 f202 	lsl.w	r2, r1, r2
 8003092:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	2b10      	cmp	r3, #16
 80030a2:	d108      	bne.n	80030b6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80030b4:	e007      	b.n	80030c6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	60da      	str	r2, [r3, #12]
}
 80030c6:	bf00      	nop
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
	...

080030d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030de:	2300      	movs	r3, #0
 80030e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030e2:	e17f      	b.n	80033e4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	2101      	movs	r1, #1
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	fa01 f303 	lsl.w	r3, r1, r3
 80030f0:	4013      	ands	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 8171 	beq.w	80033de <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f003 0303 	and.w	r3, r3, #3
 8003104:	2b01      	cmp	r3, #1
 8003106:	d005      	beq.n	8003114 <HAL_GPIO_Init+0x40>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f003 0303 	and.w	r3, r3, #3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d130      	bne.n	8003176 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	2203      	movs	r2, #3
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	4013      	ands	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	4313      	orrs	r3, r2
 800313c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800314a:	2201      	movs	r2, #1
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	43db      	mvns	r3, r3
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	4013      	ands	r3, r2
 8003158:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	091b      	lsrs	r3, r3, #4
 8003160:	f003 0201 	and.w	r2, r3, #1
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	4313      	orrs	r3, r2
 800316e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	2b03      	cmp	r3, #3
 8003180:	d118      	bne.n	80031b4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003188:	2201      	movs	r2, #1
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	43db      	mvns	r3, r3
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	4013      	ands	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	08db      	lsrs	r3, r3, #3
 800319e:	f003 0201 	and.w	r2, r3, #1
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f003 0303 	and.w	r3, r3, #3
 80031bc:	2b03      	cmp	r3, #3
 80031be:	d017      	beq.n	80031f0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	2203      	movs	r2, #3
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	43db      	mvns	r3, r3
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4013      	ands	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f003 0303 	and.w	r3, r3, #3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d123      	bne.n	8003244 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	08da      	lsrs	r2, r3, #3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3208      	adds	r2, #8
 8003204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003208:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	220f      	movs	r2, #15
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	43db      	mvns	r3, r3
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4013      	ands	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	4313      	orrs	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	08da      	lsrs	r2, r3, #3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	3208      	adds	r2, #8
 800323e:	6939      	ldr	r1, [r7, #16]
 8003240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	2203      	movs	r2, #3
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4013      	ands	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f003 0203 	and.w	r2, r3, #3
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	4313      	orrs	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 80ac 	beq.w	80033de <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003286:	4b5f      	ldr	r3, [pc, #380]	; (8003404 <HAL_GPIO_Init+0x330>)
 8003288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800328a:	4a5e      	ldr	r2, [pc, #376]	; (8003404 <HAL_GPIO_Init+0x330>)
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	6613      	str	r3, [r2, #96]	; 0x60
 8003292:	4b5c      	ldr	r3, [pc, #368]	; (8003404 <HAL_GPIO_Init+0x330>)
 8003294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	60bb      	str	r3, [r7, #8]
 800329c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800329e:	4a5a      	ldr	r2, [pc, #360]	; (8003408 <HAL_GPIO_Init+0x334>)
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	089b      	lsrs	r3, r3, #2
 80032a4:	3302      	adds	r3, #2
 80032a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	220f      	movs	r2, #15
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	43db      	mvns	r3, r3
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	4013      	ands	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032c8:	d025      	beq.n	8003316 <HAL_GPIO_Init+0x242>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a4f      	ldr	r2, [pc, #316]	; (800340c <HAL_GPIO_Init+0x338>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d01f      	beq.n	8003312 <HAL_GPIO_Init+0x23e>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a4e      	ldr	r2, [pc, #312]	; (8003410 <HAL_GPIO_Init+0x33c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d019      	beq.n	800330e <HAL_GPIO_Init+0x23a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a4d      	ldr	r2, [pc, #308]	; (8003414 <HAL_GPIO_Init+0x340>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d013      	beq.n	800330a <HAL_GPIO_Init+0x236>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a4c      	ldr	r2, [pc, #304]	; (8003418 <HAL_GPIO_Init+0x344>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00d      	beq.n	8003306 <HAL_GPIO_Init+0x232>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a4b      	ldr	r2, [pc, #300]	; (800341c <HAL_GPIO_Init+0x348>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d007      	beq.n	8003302 <HAL_GPIO_Init+0x22e>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a4a      	ldr	r2, [pc, #296]	; (8003420 <HAL_GPIO_Init+0x34c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d101      	bne.n	80032fe <HAL_GPIO_Init+0x22a>
 80032fa:	2306      	movs	r3, #6
 80032fc:	e00c      	b.n	8003318 <HAL_GPIO_Init+0x244>
 80032fe:	2307      	movs	r3, #7
 8003300:	e00a      	b.n	8003318 <HAL_GPIO_Init+0x244>
 8003302:	2305      	movs	r3, #5
 8003304:	e008      	b.n	8003318 <HAL_GPIO_Init+0x244>
 8003306:	2304      	movs	r3, #4
 8003308:	e006      	b.n	8003318 <HAL_GPIO_Init+0x244>
 800330a:	2303      	movs	r3, #3
 800330c:	e004      	b.n	8003318 <HAL_GPIO_Init+0x244>
 800330e:	2302      	movs	r3, #2
 8003310:	e002      	b.n	8003318 <HAL_GPIO_Init+0x244>
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <HAL_GPIO_Init+0x244>
 8003316:	2300      	movs	r3, #0
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	f002 0203 	and.w	r2, r2, #3
 800331e:	0092      	lsls	r2, r2, #2
 8003320:	4093      	lsls	r3, r2
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	4313      	orrs	r3, r2
 8003326:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003328:	4937      	ldr	r1, [pc, #220]	; (8003408 <HAL_GPIO_Init+0x334>)
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	089b      	lsrs	r3, r3, #2
 800332e:	3302      	adds	r3, #2
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003336:	4b3b      	ldr	r3, [pc, #236]	; (8003424 <HAL_GPIO_Init+0x350>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	43db      	mvns	r3, r3
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4013      	ands	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4313      	orrs	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800335a:	4a32      	ldr	r2, [pc, #200]	; (8003424 <HAL_GPIO_Init+0x350>)
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003360:	4b30      	ldr	r3, [pc, #192]	; (8003424 <HAL_GPIO_Init+0x350>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	43db      	mvns	r3, r3
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4013      	ands	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d003      	beq.n	8003384 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	4313      	orrs	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003384:	4a27      	ldr	r2, [pc, #156]	; (8003424 <HAL_GPIO_Init+0x350>)
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800338a:	4b26      	ldr	r3, [pc, #152]	; (8003424 <HAL_GPIO_Init+0x350>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	43db      	mvns	r3, r3
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4013      	ands	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033ae:	4a1d      	ldr	r2, [pc, #116]	; (8003424 <HAL_GPIO_Init+0x350>)
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80033b4:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <HAL_GPIO_Init+0x350>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	43db      	mvns	r3, r3
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	4013      	ands	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d003      	beq.n	80033d8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033d8:	4a12      	ldr	r2, [pc, #72]	; (8003424 <HAL_GPIO_Init+0x350>)
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	3301      	adds	r3, #1
 80033e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	fa22 f303 	lsr.w	r3, r2, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f47f ae78 	bne.w	80030e4 <HAL_GPIO_Init+0x10>
  }
}
 80033f4:	bf00      	nop
 80033f6:	bf00      	nop
 80033f8:	371c      	adds	r7, #28
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40021000 	.word	0x40021000
 8003408:	40010000 	.word	0x40010000
 800340c:	48000400 	.word	0x48000400
 8003410:	48000800 	.word	0x48000800
 8003414:	48000c00 	.word	0x48000c00
 8003418:	48001000 	.word	0x48001000
 800341c:	48001400 	.word	0x48001400
 8003420:	48001800 	.word	0x48001800
 8003424:	40010400 	.word	0x40010400

08003428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	460b      	mov	r3, r1
 8003432:	807b      	strh	r3, [r7, #2]
 8003434:	4613      	mov	r3, r2
 8003436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003438:	787b      	ldrb	r3, [r7, #1]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800343e:	887a      	ldrh	r2, [r7, #2]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003444:	e002      	b.n	800344c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003446:	887a      	ldrh	r2, [r7, #2]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800345c:	4b04      	ldr	r3, [pc, #16]	; (8003470 <HAL_PWREx_GetVoltageRange+0x18>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003464:	4618      	mov	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	40007000 	.word	0x40007000

08003474 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003482:	d130      	bne.n	80034e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003484:	4b23      	ldr	r3, [pc, #140]	; (8003514 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800348c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003490:	d038      	beq.n	8003504 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003492:	4b20      	ldr	r3, [pc, #128]	; (8003514 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800349a:	4a1e      	ldr	r2, [pc, #120]	; (8003514 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800349c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034a2:	4b1d      	ldr	r3, [pc, #116]	; (8003518 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2232      	movs	r2, #50	; 0x32
 80034a8:	fb02 f303 	mul.w	r3, r2, r3
 80034ac:	4a1b      	ldr	r2, [pc, #108]	; (800351c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034ae:	fba2 2303 	umull	r2, r3, r2, r3
 80034b2:	0c9b      	lsrs	r3, r3, #18
 80034b4:	3301      	adds	r3, #1
 80034b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034b8:	e002      	b.n	80034c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	3b01      	subs	r3, #1
 80034be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034c0:	4b14      	ldr	r3, [pc, #80]	; (8003514 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034cc:	d102      	bne.n	80034d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1f2      	bne.n	80034ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034d4:	4b0f      	ldr	r3, [pc, #60]	; (8003514 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e0:	d110      	bne.n	8003504 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e00f      	b.n	8003506 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80034e6:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f2:	d007      	beq.n	8003504 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034f4:	4b07      	ldr	r3, [pc, #28]	; (8003514 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034fc:	4a05      	ldr	r2, [pc, #20]	; (8003514 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003502:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	40007000 	.word	0x40007000
 8003518:	20000000 	.word	0x20000000
 800351c:	431bde83 	.word	0x431bde83

08003520 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b088      	sub	sp, #32
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e3ca      	b.n	8003cc8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003532:	4b97      	ldr	r3, [pc, #604]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 030c 	and.w	r3, r3, #12
 800353a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800353c:	4b94      	ldr	r3, [pc, #592]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f003 0303 	and.w	r3, r3, #3
 8003544:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0310 	and.w	r3, r3, #16
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 80e4 	beq.w	800371c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d007      	beq.n	800356a <HAL_RCC_OscConfig+0x4a>
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	2b0c      	cmp	r3, #12
 800355e:	f040 808b 	bne.w	8003678 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2b01      	cmp	r3, #1
 8003566:	f040 8087 	bne.w	8003678 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800356a:	4b89      	ldr	r3, [pc, #548]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d005      	beq.n	8003582 <HAL_RCC_OscConfig+0x62>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e3a2      	b.n	8003cc8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1a      	ldr	r2, [r3, #32]
 8003586:	4b82      	ldr	r3, [pc, #520]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d004      	beq.n	800359c <HAL_RCC_OscConfig+0x7c>
 8003592:	4b7f      	ldr	r3, [pc, #508]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800359a:	e005      	b.n	80035a8 <HAL_RCC_OscConfig+0x88>
 800359c:	4b7c      	ldr	r3, [pc, #496]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 800359e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035a2:	091b      	lsrs	r3, r3, #4
 80035a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d223      	bcs.n	80035f4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 fd55 	bl	8004060 <RCC_SetFlashLatencyFromMSIRange>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e383      	b.n	8003cc8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035c0:	4b73      	ldr	r3, [pc, #460]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a72      	ldr	r2, [pc, #456]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 80035c6:	f043 0308 	orr.w	r3, r3, #8
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	4b70      	ldr	r3, [pc, #448]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	496d      	ldr	r1, [pc, #436]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035de:	4b6c      	ldr	r3, [pc, #432]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	021b      	lsls	r3, r3, #8
 80035ec:	4968      	ldr	r1, [pc, #416]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	604b      	str	r3, [r1, #4]
 80035f2:	e025      	b.n	8003640 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035f4:	4b66      	ldr	r3, [pc, #408]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a65      	ldr	r2, [pc, #404]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 80035fa:	f043 0308 	orr.w	r3, r3, #8
 80035fe:	6013      	str	r3, [r2, #0]
 8003600:	4b63      	ldr	r3, [pc, #396]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	4960      	ldr	r1, [pc, #384]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 800360e:	4313      	orrs	r3, r2
 8003610:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003612:	4b5f      	ldr	r3, [pc, #380]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	021b      	lsls	r3, r3, #8
 8003620:	495b      	ldr	r1, [pc, #364]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 8003622:	4313      	orrs	r3, r2
 8003624:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d109      	bne.n	8003640 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	4618      	mov	r0, r3
 8003632:	f000 fd15 	bl	8004060 <RCC_SetFlashLatencyFromMSIRange>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e343      	b.n	8003cc8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003640:	f000 fc4a 	bl	8003ed8 <HAL_RCC_GetSysClockFreq>
 8003644:	4602      	mov	r2, r0
 8003646:	4b52      	ldr	r3, [pc, #328]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	091b      	lsrs	r3, r3, #4
 800364c:	f003 030f 	and.w	r3, r3, #15
 8003650:	4950      	ldr	r1, [pc, #320]	; (8003794 <HAL_RCC_OscConfig+0x274>)
 8003652:	5ccb      	ldrb	r3, [r1, r3]
 8003654:	f003 031f 	and.w	r3, r3, #31
 8003658:	fa22 f303 	lsr.w	r3, r2, r3
 800365c:	4a4e      	ldr	r2, [pc, #312]	; (8003798 <HAL_RCC_OscConfig+0x278>)
 800365e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003660:	4b4e      	ldr	r3, [pc, #312]	; (800379c <HAL_RCC_OscConfig+0x27c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f7fd fc03 	bl	8000e70 <HAL_InitTick>
 800366a:	4603      	mov	r3, r0
 800366c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800366e:	7bfb      	ldrb	r3, [r7, #15]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d052      	beq.n	800371a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003674:	7bfb      	ldrb	r3, [r7, #15]
 8003676:	e327      	b.n	8003cc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d032      	beq.n	80036e6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003680:	4b43      	ldr	r3, [pc, #268]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a42      	ldr	r2, [pc, #264]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 8003686:	f043 0301 	orr.w	r3, r3, #1
 800368a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800368c:	f7fd fc40 	bl	8000f10 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003694:	f7fd fc3c 	bl	8000f10 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e310      	b.n	8003cc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036a6:	4b3a      	ldr	r3, [pc, #232]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d0f0      	beq.n	8003694 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036b2:	4b37      	ldr	r3, [pc, #220]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a36      	ldr	r2, [pc, #216]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 80036b8:	f043 0308 	orr.w	r3, r3, #8
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	4b34      	ldr	r3, [pc, #208]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	4931      	ldr	r1, [pc, #196]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036d0:	4b2f      	ldr	r3, [pc, #188]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	021b      	lsls	r3, r3, #8
 80036de:	492c      	ldr	r1, [pc, #176]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	604b      	str	r3, [r1, #4]
 80036e4:	e01a      	b.n	800371c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036e6:	4b2a      	ldr	r3, [pc, #168]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a29      	ldr	r2, [pc, #164]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 80036ec:	f023 0301 	bic.w	r3, r3, #1
 80036f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036f2:	f7fd fc0d 	bl	8000f10 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036fa:	f7fd fc09 	bl	8000f10 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e2dd      	b.n	8003cc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800370c:	4b20      	ldr	r3, [pc, #128]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1f0      	bne.n	80036fa <HAL_RCC_OscConfig+0x1da>
 8003718:	e000      	b.n	800371c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800371a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b00      	cmp	r3, #0
 8003726:	d074      	beq.n	8003812 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	2b08      	cmp	r3, #8
 800372c:	d005      	beq.n	800373a <HAL_RCC_OscConfig+0x21a>
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	2b0c      	cmp	r3, #12
 8003732:	d10e      	bne.n	8003752 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	2b03      	cmp	r3, #3
 8003738:	d10b      	bne.n	8003752 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800373a:	4b15      	ldr	r3, [pc, #84]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d064      	beq.n	8003810 <HAL_RCC_OscConfig+0x2f0>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d160      	bne.n	8003810 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e2ba      	b.n	8003cc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800375a:	d106      	bne.n	800376a <HAL_RCC_OscConfig+0x24a>
 800375c:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a0b      	ldr	r2, [pc, #44]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 8003762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003766:	6013      	str	r3, [r2, #0]
 8003768:	e026      	b.n	80037b8 <HAL_RCC_OscConfig+0x298>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003772:	d115      	bne.n	80037a0 <HAL_RCC_OscConfig+0x280>
 8003774:	4b06      	ldr	r3, [pc, #24]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a05      	ldr	r2, [pc, #20]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 800377a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800377e:	6013      	str	r3, [r2, #0]
 8003780:	4b03      	ldr	r3, [pc, #12]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a02      	ldr	r2, [pc, #8]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 8003786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800378a:	6013      	str	r3, [r2, #0]
 800378c:	e014      	b.n	80037b8 <HAL_RCC_OscConfig+0x298>
 800378e:	bf00      	nop
 8003790:	40021000 	.word	0x40021000
 8003794:	08005d9c 	.word	0x08005d9c
 8003798:	20000000 	.word	0x20000000
 800379c:	20000004 	.word	0x20000004
 80037a0:	4ba0      	ldr	r3, [pc, #640]	; (8003a24 <HAL_RCC_OscConfig+0x504>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a9f      	ldr	r2, [pc, #636]	; (8003a24 <HAL_RCC_OscConfig+0x504>)
 80037a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037aa:	6013      	str	r3, [r2, #0]
 80037ac:	4b9d      	ldr	r3, [pc, #628]	; (8003a24 <HAL_RCC_OscConfig+0x504>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a9c      	ldr	r2, [pc, #624]	; (8003a24 <HAL_RCC_OscConfig+0x504>)
 80037b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d013      	beq.n	80037e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c0:	f7fd fba6 	bl	8000f10 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037c8:	f7fd fba2 	bl	8000f10 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b64      	cmp	r3, #100	; 0x64
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e276      	b.n	8003cc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037da:	4b92      	ldr	r3, [pc, #584]	; (8003a24 <HAL_RCC_OscConfig+0x504>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d0f0      	beq.n	80037c8 <HAL_RCC_OscConfig+0x2a8>
 80037e6:	e014      	b.n	8003812 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e8:	f7fd fb92 	bl	8000f10 <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037f0:	f7fd fb8e 	bl	8000f10 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b64      	cmp	r3, #100	; 0x64
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e262      	b.n	8003cc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003802:	4b88      	ldr	r3, [pc, #544]	; (8003a24 <HAL_RCC_OscConfig+0x504>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1f0      	bne.n	80037f0 <HAL_RCC_OscConfig+0x2d0>
 800380e:	e000      	b.n	8003812 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d060      	beq.n	80038e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	2b04      	cmp	r3, #4
 8003822:	d005      	beq.n	8003830 <HAL_RCC_OscConfig+0x310>
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	2b0c      	cmp	r3, #12
 8003828:	d119      	bne.n	800385e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2b02      	cmp	r3, #2
 800382e:	d116      	bne.n	800385e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003830:	4b7c      	ldr	r3, [pc, #496]	; (8003a24 <HAL_RCC_OscConfig+0x504>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003838:	2b00      	cmp	r3, #0
 800383a:	d005      	beq.n	8003848 <HAL_RCC_OscConfig+0x328>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e23f      	b.n	8003cc8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003848:	4b76      	ldr	r3, [pc, #472]	; (8003a24 <HAL_RCC_OscConfig+0x504>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	061b      	lsls	r3, r3, #24
 8003856:	4973      	ldr	r1, [pc, #460]	; (8003a24 <HAL_RCC_OscConfig+0x504>)
 8003858:	4313      	orrs	r3, r2
 800385a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800385c:	e040      	b.n	80038e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d023      	beq.n	80038ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003866:	4b6f      	ldr	r3, [pc, #444]	; (8003a24 <HAL_RCC_OscConfig+0x504>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a6e      	ldr	r2, [pc, #440]	; (8003a24 <HAL_RCC_OscConfig+0x504>)
 800386c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003872:	f7fd fb4d 	bl	8000f10 <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003878:	e008      	b.n	800388c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800387a:	f7fd fb49 	bl	8000f10 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d901      	bls.n	800388c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e21d      	b.n	8003cc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800388c:	4b65      	ldr	r3, [pc, #404]	; (8003a24 <HAL_RCC_OscConfig+0x504>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0f0      	beq.n	800387a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003898:	4b62      	ldr	r3, [pc, #392]	; (8003a24 <HAL_RCC_OscConfig+0x504>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	061b      	lsls	r3, r3, #24
 80038a6:	495f      	ldr	r1, [pc, #380]	; (8003a24 <HAL_RCC_OscConfig+0x504>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	604b      	str	r3, [r1, #4]
 80038ac:	e018      	b.n	80038e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ae:	4b5d      	ldr	r3, [pc, #372]	; (8003a24 <HAL_RCC_OscConfig+0x504>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a5c      	ldr	r2, [pc, #368]	; (8003a24 <HAL_RCC_OscConfig+0x504>)
 80038b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ba:	f7fd fb29 	bl	8000f10 <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038c0:	e008      	b.n	80038d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038c2:	f7fd fb25 	bl	8000f10 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e1f9      	b.n	8003cc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038d4:	4b53      	ldr	r3, [pc, #332]	; (8003a24 <HAL_RCC_OscConfig+0x504>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1f0      	bne.n	80038c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0308 	and.w	r3, r3, #8
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d03c      	beq.n	8003966 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d01c      	beq.n	800392e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038f4:	4b4b      	ldr	r3, [pc, #300]	; (8003a24 <HAL_RCC_OscConfig+0x504>)
 80038f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038fa:	4a4a      	ldr	r2, [pc, #296]	; (8003a24 <HAL_RCC_OscConfig+0x504>)
 80038fc:	f043 0301 	orr.w	r3, r3, #1
 8003900:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003904:	f7fd fb04 	bl	8000f10 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800390c:	f7fd fb00 	bl	8000f10 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e1d4      	b.n	8003cc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800391e:	4b41      	ldr	r3, [pc, #260]	; (8003a24 <HAL_RCC_OscConfig+0x504>)
 8003920:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d0ef      	beq.n	800390c <HAL_RCC_OscConfig+0x3ec>
 800392c:	e01b      	b.n	8003966 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800392e:	4b3d      	ldr	r3, [pc, #244]	; (8003a24 <HAL_RCC_OscConfig+0x504>)
 8003930:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003934:	4a3b      	ldr	r2, [pc, #236]	; (8003a24 <HAL_RCC_OscConfig+0x504>)
 8003936:	f023 0301 	bic.w	r3, r3, #1
 800393a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393e:	f7fd fae7 	bl	8000f10 <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003944:	e008      	b.n	8003958 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003946:	f7fd fae3 	bl	8000f10 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e1b7      	b.n	8003cc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003958:	4b32      	ldr	r3, [pc, #200]	; (8003a24 <HAL_RCC_OscConfig+0x504>)
 800395a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1ef      	bne.n	8003946 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0304 	and.w	r3, r3, #4
 800396e:	2b00      	cmp	r3, #0
 8003970:	f000 80a6 	beq.w	8003ac0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003974:	2300      	movs	r3, #0
 8003976:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003978:	4b2a      	ldr	r3, [pc, #168]	; (8003a24 <HAL_RCC_OscConfig+0x504>)
 800397a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10d      	bne.n	80039a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003984:	4b27      	ldr	r3, [pc, #156]	; (8003a24 <HAL_RCC_OscConfig+0x504>)
 8003986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003988:	4a26      	ldr	r2, [pc, #152]	; (8003a24 <HAL_RCC_OscConfig+0x504>)
 800398a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800398e:	6593      	str	r3, [r2, #88]	; 0x58
 8003990:	4b24      	ldr	r3, [pc, #144]	; (8003a24 <HAL_RCC_OscConfig+0x504>)
 8003992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003998:	60bb      	str	r3, [r7, #8]
 800399a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800399c:	2301      	movs	r3, #1
 800399e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039a0:	4b21      	ldr	r3, [pc, #132]	; (8003a28 <HAL_RCC_OscConfig+0x508>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d118      	bne.n	80039de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039ac:	4b1e      	ldr	r3, [pc, #120]	; (8003a28 <HAL_RCC_OscConfig+0x508>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a1d      	ldr	r2, [pc, #116]	; (8003a28 <HAL_RCC_OscConfig+0x508>)
 80039b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039b8:	f7fd faaa 	bl	8000f10 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039c0:	f7fd faa6 	bl	8000f10 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e17a      	b.n	8003cc8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039d2:	4b15      	ldr	r3, [pc, #84]	; (8003a28 <HAL_RCC_OscConfig+0x508>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0f0      	beq.n	80039c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d108      	bne.n	80039f8 <HAL_RCC_OscConfig+0x4d8>
 80039e6:	4b0f      	ldr	r3, [pc, #60]	; (8003a24 <HAL_RCC_OscConfig+0x504>)
 80039e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ec:	4a0d      	ldr	r2, [pc, #52]	; (8003a24 <HAL_RCC_OscConfig+0x504>)
 80039ee:	f043 0301 	orr.w	r3, r3, #1
 80039f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039f6:	e029      	b.n	8003a4c <HAL_RCC_OscConfig+0x52c>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	2b05      	cmp	r3, #5
 80039fe:	d115      	bne.n	8003a2c <HAL_RCC_OscConfig+0x50c>
 8003a00:	4b08      	ldr	r3, [pc, #32]	; (8003a24 <HAL_RCC_OscConfig+0x504>)
 8003a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a06:	4a07      	ldr	r2, [pc, #28]	; (8003a24 <HAL_RCC_OscConfig+0x504>)
 8003a08:	f043 0304 	orr.w	r3, r3, #4
 8003a0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a10:	4b04      	ldr	r3, [pc, #16]	; (8003a24 <HAL_RCC_OscConfig+0x504>)
 8003a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a16:	4a03      	ldr	r2, [pc, #12]	; (8003a24 <HAL_RCC_OscConfig+0x504>)
 8003a18:	f043 0301 	orr.w	r3, r3, #1
 8003a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a20:	e014      	b.n	8003a4c <HAL_RCC_OscConfig+0x52c>
 8003a22:	bf00      	nop
 8003a24:	40021000 	.word	0x40021000
 8003a28:	40007000 	.word	0x40007000
 8003a2c:	4b9c      	ldr	r3, [pc, #624]	; (8003ca0 <HAL_RCC_OscConfig+0x780>)
 8003a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a32:	4a9b      	ldr	r2, [pc, #620]	; (8003ca0 <HAL_RCC_OscConfig+0x780>)
 8003a34:	f023 0301 	bic.w	r3, r3, #1
 8003a38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a3c:	4b98      	ldr	r3, [pc, #608]	; (8003ca0 <HAL_RCC_OscConfig+0x780>)
 8003a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a42:	4a97      	ldr	r2, [pc, #604]	; (8003ca0 <HAL_RCC_OscConfig+0x780>)
 8003a44:	f023 0304 	bic.w	r3, r3, #4
 8003a48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d016      	beq.n	8003a82 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a54:	f7fd fa5c 	bl	8000f10 <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a5a:	e00a      	b.n	8003a72 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a5c:	f7fd fa58 	bl	8000f10 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e12a      	b.n	8003cc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a72:	4b8b      	ldr	r3, [pc, #556]	; (8003ca0 <HAL_RCC_OscConfig+0x780>)
 8003a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0ed      	beq.n	8003a5c <HAL_RCC_OscConfig+0x53c>
 8003a80:	e015      	b.n	8003aae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a82:	f7fd fa45 	bl	8000f10 <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a88:	e00a      	b.n	8003aa0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a8a:	f7fd fa41 	bl	8000f10 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e113      	b.n	8003cc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003aa0:	4b7f      	ldr	r3, [pc, #508]	; (8003ca0 <HAL_RCC_OscConfig+0x780>)
 8003aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1ed      	bne.n	8003a8a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aae:	7ffb      	ldrb	r3, [r7, #31]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d105      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab4:	4b7a      	ldr	r3, [pc, #488]	; (8003ca0 <HAL_RCC_OscConfig+0x780>)
 8003ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab8:	4a79      	ldr	r2, [pc, #484]	; (8003ca0 <HAL_RCC_OscConfig+0x780>)
 8003aba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003abe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 80fe 	beq.w	8003cc6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	f040 80d0 	bne.w	8003c74 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ad4:	4b72      	ldr	r3, [pc, #456]	; (8003ca0 <HAL_RCC_OscConfig+0x780>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f003 0203 	and.w	r2, r3, #3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d130      	bne.n	8003b4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	3b01      	subs	r3, #1
 8003af4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d127      	bne.n	8003b4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b04:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d11f      	bne.n	8003b4a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b14:	2a07      	cmp	r2, #7
 8003b16:	bf14      	ite	ne
 8003b18:	2201      	movne	r2, #1
 8003b1a:	2200      	moveq	r2, #0
 8003b1c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d113      	bne.n	8003b4a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2c:	085b      	lsrs	r3, r3, #1
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d109      	bne.n	8003b4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b40:	085b      	lsrs	r3, r3, #1
 8003b42:	3b01      	subs	r3, #1
 8003b44:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d06e      	beq.n	8003c28 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	2b0c      	cmp	r3, #12
 8003b4e:	d069      	beq.n	8003c24 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b50:	4b53      	ldr	r3, [pc, #332]	; (8003ca0 <HAL_RCC_OscConfig+0x780>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d105      	bne.n	8003b68 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003b5c:	4b50      	ldr	r3, [pc, #320]	; (8003ca0 <HAL_RCC_OscConfig+0x780>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e0ad      	b.n	8003cc8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b6c:	4b4c      	ldr	r3, [pc, #304]	; (8003ca0 <HAL_RCC_OscConfig+0x780>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a4b      	ldr	r2, [pc, #300]	; (8003ca0 <HAL_RCC_OscConfig+0x780>)
 8003b72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b76:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b78:	f7fd f9ca 	bl	8000f10 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b80:	f7fd f9c6 	bl	8000f10 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e09a      	b.n	8003cc8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b92:	4b43      	ldr	r3, [pc, #268]	; (8003ca0 <HAL_RCC_OscConfig+0x780>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f0      	bne.n	8003b80 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b9e:	4b40      	ldr	r3, [pc, #256]	; (8003ca0 <HAL_RCC_OscConfig+0x780>)
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	4b40      	ldr	r3, [pc, #256]	; (8003ca4 <HAL_RCC_OscConfig+0x784>)
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003bae:	3a01      	subs	r2, #1
 8003bb0:	0112      	lsls	r2, r2, #4
 8003bb2:	4311      	orrs	r1, r2
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003bb8:	0212      	lsls	r2, r2, #8
 8003bba:	4311      	orrs	r1, r2
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003bc0:	0852      	lsrs	r2, r2, #1
 8003bc2:	3a01      	subs	r2, #1
 8003bc4:	0552      	lsls	r2, r2, #21
 8003bc6:	4311      	orrs	r1, r2
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003bcc:	0852      	lsrs	r2, r2, #1
 8003bce:	3a01      	subs	r2, #1
 8003bd0:	0652      	lsls	r2, r2, #25
 8003bd2:	4311      	orrs	r1, r2
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bd8:	0912      	lsrs	r2, r2, #4
 8003bda:	0452      	lsls	r2, r2, #17
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	4930      	ldr	r1, [pc, #192]	; (8003ca0 <HAL_RCC_OscConfig+0x780>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003be4:	4b2e      	ldr	r3, [pc, #184]	; (8003ca0 <HAL_RCC_OscConfig+0x780>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a2d      	ldr	r2, [pc, #180]	; (8003ca0 <HAL_RCC_OscConfig+0x780>)
 8003bea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bf0:	4b2b      	ldr	r3, [pc, #172]	; (8003ca0 <HAL_RCC_OscConfig+0x780>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	4a2a      	ldr	r2, [pc, #168]	; (8003ca0 <HAL_RCC_OscConfig+0x780>)
 8003bf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bfa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bfc:	f7fd f988 	bl	8000f10 <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c04:	f7fd f984 	bl	8000f10 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e058      	b.n	8003cc8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c16:	4b22      	ldr	r3, [pc, #136]	; (8003ca0 <HAL_RCC_OscConfig+0x780>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0f0      	beq.n	8003c04 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c22:	e050      	b.n	8003cc6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e04f      	b.n	8003cc8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c28:	4b1d      	ldr	r3, [pc, #116]	; (8003ca0 <HAL_RCC_OscConfig+0x780>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d148      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c34:	4b1a      	ldr	r3, [pc, #104]	; (8003ca0 <HAL_RCC_OscConfig+0x780>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a19      	ldr	r2, [pc, #100]	; (8003ca0 <HAL_RCC_OscConfig+0x780>)
 8003c3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c40:	4b17      	ldr	r3, [pc, #92]	; (8003ca0 <HAL_RCC_OscConfig+0x780>)
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	4a16      	ldr	r2, [pc, #88]	; (8003ca0 <HAL_RCC_OscConfig+0x780>)
 8003c46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c4c:	f7fd f960 	bl	8000f10 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c54:	f7fd f95c 	bl	8000f10 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e030      	b.n	8003cc8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c66:	4b0e      	ldr	r3, [pc, #56]	; (8003ca0 <HAL_RCC_OscConfig+0x780>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0f0      	beq.n	8003c54 <HAL_RCC_OscConfig+0x734>
 8003c72:	e028      	b.n	8003cc6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	2b0c      	cmp	r3, #12
 8003c78:	d023      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c7a:	4b09      	ldr	r3, [pc, #36]	; (8003ca0 <HAL_RCC_OscConfig+0x780>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a08      	ldr	r2, [pc, #32]	; (8003ca0 <HAL_RCC_OscConfig+0x780>)
 8003c80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c86:	f7fd f943 	bl	8000f10 <HAL_GetTick>
 8003c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c8c:	e00c      	b.n	8003ca8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c8e:	f7fd f93f 	bl	8000f10 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d905      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e013      	b.n	8003cc8 <HAL_RCC_OscConfig+0x7a8>
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ca8:	4b09      	ldr	r3, [pc, #36]	; (8003cd0 <HAL_RCC_OscConfig+0x7b0>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1ec      	bne.n	8003c8e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003cb4:	4b06      	ldr	r3, [pc, #24]	; (8003cd0 <HAL_RCC_OscConfig+0x7b0>)
 8003cb6:	68da      	ldr	r2, [r3, #12]
 8003cb8:	4905      	ldr	r1, [pc, #20]	; (8003cd0 <HAL_RCC_OscConfig+0x7b0>)
 8003cba:	4b06      	ldr	r3, [pc, #24]	; (8003cd4 <HAL_RCC_OscConfig+0x7b4>)
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	60cb      	str	r3, [r1, #12]
 8003cc0:	e001      	b.n	8003cc6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e000      	b.n	8003cc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3720      	adds	r7, #32
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	feeefffc 	.word	0xfeeefffc

08003cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d101      	bne.n	8003cec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e0e7      	b.n	8003ebc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cec:	4b75      	ldr	r3, [pc, #468]	; (8003ec4 <HAL_RCC_ClockConfig+0x1ec>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d910      	bls.n	8003d1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cfa:	4b72      	ldr	r3, [pc, #456]	; (8003ec4 <HAL_RCC_ClockConfig+0x1ec>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f023 0207 	bic.w	r2, r3, #7
 8003d02:	4970      	ldr	r1, [pc, #448]	; (8003ec4 <HAL_RCC_ClockConfig+0x1ec>)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d0a:	4b6e      	ldr	r3, [pc, #440]	; (8003ec4 <HAL_RCC_ClockConfig+0x1ec>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d001      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e0cf      	b.n	8003ebc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d010      	beq.n	8003d4a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	4b66      	ldr	r3, [pc, #408]	; (8003ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d908      	bls.n	8003d4a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d38:	4b63      	ldr	r3, [pc, #396]	; (8003ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	4960      	ldr	r1, [pc, #384]	; (8003ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d04c      	beq.n	8003df0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2b03      	cmp	r3, #3
 8003d5c:	d107      	bne.n	8003d6e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d5e:	4b5a      	ldr	r3, [pc, #360]	; (8003ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d121      	bne.n	8003dae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e0a6      	b.n	8003ebc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d107      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d76:	4b54      	ldr	r3, [pc, #336]	; (8003ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d115      	bne.n	8003dae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e09a      	b.n	8003ebc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d107      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d8e:	4b4e      	ldr	r3, [pc, #312]	; (8003ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d109      	bne.n	8003dae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e08e      	b.n	8003ebc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d9e:	4b4a      	ldr	r3, [pc, #296]	; (8003ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e086      	b.n	8003ebc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003dae:	4b46      	ldr	r3, [pc, #280]	; (8003ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f023 0203 	bic.w	r2, r3, #3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	4943      	ldr	r1, [pc, #268]	; (8003ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dc0:	f7fd f8a6 	bl	8000f10 <HAL_GetTick>
 8003dc4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dc6:	e00a      	b.n	8003dde <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc8:	f7fd f8a2 	bl	8000f10 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e06e      	b.n	8003ebc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dde:	4b3a      	ldr	r3, [pc, #232]	; (8003ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 020c 	and.w	r2, r3, #12
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d1eb      	bne.n	8003dc8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d010      	beq.n	8003e1e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	4b31      	ldr	r3, [pc, #196]	; (8003ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d208      	bcs.n	8003e1e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e0c:	4b2e      	ldr	r3, [pc, #184]	; (8003ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	492b      	ldr	r1, [pc, #172]	; (8003ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e1e:	4b29      	ldr	r3, [pc, #164]	; (8003ec4 <HAL_RCC_ClockConfig+0x1ec>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0307 	and.w	r3, r3, #7
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d210      	bcs.n	8003e4e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e2c:	4b25      	ldr	r3, [pc, #148]	; (8003ec4 <HAL_RCC_ClockConfig+0x1ec>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f023 0207 	bic.w	r2, r3, #7
 8003e34:	4923      	ldr	r1, [pc, #140]	; (8003ec4 <HAL_RCC_ClockConfig+0x1ec>)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e3c:	4b21      	ldr	r3, [pc, #132]	; (8003ec4 <HAL_RCC_ClockConfig+0x1ec>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d001      	beq.n	8003e4e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e036      	b.n	8003ebc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0304 	and.w	r3, r3, #4
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d008      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e5a:	4b1b      	ldr	r3, [pc, #108]	; (8003ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	4918      	ldr	r1, [pc, #96]	; (8003ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d009      	beq.n	8003e8c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e78:	4b13      	ldr	r3, [pc, #76]	; (8003ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	4910      	ldr	r1, [pc, #64]	; (8003ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e8c:	f000 f824 	bl	8003ed8 <HAL_RCC_GetSysClockFreq>
 8003e90:	4602      	mov	r2, r0
 8003e92:	4b0d      	ldr	r3, [pc, #52]	; (8003ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	091b      	lsrs	r3, r3, #4
 8003e98:	f003 030f 	and.w	r3, r3, #15
 8003e9c:	490b      	ldr	r1, [pc, #44]	; (8003ecc <HAL_RCC_ClockConfig+0x1f4>)
 8003e9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ea0:	f003 031f 	and.w	r3, r3, #31
 8003ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ea8:	4a09      	ldr	r2, [pc, #36]	; (8003ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8003eaa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003eac:	4b09      	ldr	r3, [pc, #36]	; (8003ed4 <HAL_RCC_ClockConfig+0x1fc>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7fc ffdd 	bl	8000e70 <HAL_InitTick>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	72fb      	strb	r3, [r7, #11]

  return status;
 8003eba:	7afb      	ldrb	r3, [r7, #11]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40022000 	.word	0x40022000
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	08005d9c 	.word	0x08005d9c
 8003ed0:	20000000 	.word	0x20000000
 8003ed4:	20000004 	.word	0x20000004

08003ed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b089      	sub	sp, #36	; 0x24
 8003edc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	61fb      	str	r3, [r7, #28]
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ee6:	4b3e      	ldr	r3, [pc, #248]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 030c 	and.w	r3, r3, #12
 8003eee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ef0:	4b3b      	ldr	r3, [pc, #236]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f003 0303 	and.w	r3, r3, #3
 8003ef8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d005      	beq.n	8003f0c <HAL_RCC_GetSysClockFreq+0x34>
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	2b0c      	cmp	r3, #12
 8003f04:	d121      	bne.n	8003f4a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d11e      	bne.n	8003f4a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f0c:	4b34      	ldr	r3, [pc, #208]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0308 	and.w	r3, r3, #8
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d107      	bne.n	8003f28 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f18:	4b31      	ldr	r3, [pc, #196]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f1e:	0a1b      	lsrs	r3, r3, #8
 8003f20:	f003 030f 	and.w	r3, r3, #15
 8003f24:	61fb      	str	r3, [r7, #28]
 8003f26:	e005      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f28:	4b2d      	ldr	r3, [pc, #180]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	091b      	lsrs	r3, r3, #4
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f34:	4a2b      	ldr	r2, [pc, #172]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f3c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10d      	bne.n	8003f60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f48:	e00a      	b.n	8003f60 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	2b04      	cmp	r3, #4
 8003f4e:	d102      	bne.n	8003f56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f50:	4b25      	ldr	r3, [pc, #148]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f52:	61bb      	str	r3, [r7, #24]
 8003f54:	e004      	b.n	8003f60 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	2b08      	cmp	r3, #8
 8003f5a:	d101      	bne.n	8003f60 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f5c:	4b23      	ldr	r3, [pc, #140]	; (8003fec <HAL_RCC_GetSysClockFreq+0x114>)
 8003f5e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	2b0c      	cmp	r3, #12
 8003f64:	d134      	bne.n	8003fd0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f66:	4b1e      	ldr	r3, [pc, #120]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f003 0303 	and.w	r3, r3, #3
 8003f6e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d003      	beq.n	8003f7e <HAL_RCC_GetSysClockFreq+0xa6>
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	2b03      	cmp	r3, #3
 8003f7a:	d003      	beq.n	8003f84 <HAL_RCC_GetSysClockFreq+0xac>
 8003f7c:	e005      	b.n	8003f8a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f7e:	4b1a      	ldr	r3, [pc, #104]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f80:	617b      	str	r3, [r7, #20]
      break;
 8003f82:	e005      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f84:	4b19      	ldr	r3, [pc, #100]	; (8003fec <HAL_RCC_GetSysClockFreq+0x114>)
 8003f86:	617b      	str	r3, [r7, #20]
      break;
 8003f88:	e002      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	617b      	str	r3, [r7, #20]
      break;
 8003f8e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f90:	4b13      	ldr	r3, [pc, #76]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	091b      	lsrs	r3, r3, #4
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f9e:	4b10      	ldr	r3, [pc, #64]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	0a1b      	lsrs	r3, r3, #8
 8003fa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	fb03 f202 	mul.w	r2, r3, r2
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fb6:	4b0a      	ldr	r3, [pc, #40]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	0e5b      	lsrs	r3, r3, #25
 8003fbc:	f003 0303 	and.w	r3, r3, #3
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003fd0:	69bb      	ldr	r3, [r7, #24]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3724      	adds	r7, #36	; 0x24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	08005db4 	.word	0x08005db4
 8003fe8:	00f42400 	.word	0x00f42400
 8003fec:	007a1200 	.word	0x007a1200

08003ff0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ff4:	4b03      	ldr	r3, [pc, #12]	; (8004004 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	20000000 	.word	0x20000000

08004008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800400c:	f7ff fff0 	bl	8003ff0 <HAL_RCC_GetHCLKFreq>
 8004010:	4602      	mov	r2, r0
 8004012:	4b06      	ldr	r3, [pc, #24]	; (800402c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	0a1b      	lsrs	r3, r3, #8
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	4904      	ldr	r1, [pc, #16]	; (8004030 <HAL_RCC_GetPCLK1Freq+0x28>)
 800401e:	5ccb      	ldrb	r3, [r1, r3]
 8004020:	f003 031f 	and.w	r3, r3, #31
 8004024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004028:	4618      	mov	r0, r3
 800402a:	bd80      	pop	{r7, pc}
 800402c:	40021000 	.word	0x40021000
 8004030:	08005dac 	.word	0x08005dac

08004034 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004038:	f7ff ffda 	bl	8003ff0 <HAL_RCC_GetHCLKFreq>
 800403c:	4602      	mov	r2, r0
 800403e:	4b06      	ldr	r3, [pc, #24]	; (8004058 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	0adb      	lsrs	r3, r3, #11
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	4904      	ldr	r1, [pc, #16]	; (800405c <HAL_RCC_GetPCLK2Freq+0x28>)
 800404a:	5ccb      	ldrb	r3, [r1, r3]
 800404c:	f003 031f 	and.w	r3, r3, #31
 8004050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004054:	4618      	mov	r0, r3
 8004056:	bd80      	pop	{r7, pc}
 8004058:	40021000 	.word	0x40021000
 800405c:	08005dac 	.word	0x08005dac

08004060 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004068:	2300      	movs	r3, #0
 800406a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800406c:	4b2a      	ldr	r3, [pc, #168]	; (8004118 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800406e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d003      	beq.n	8004080 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004078:	f7ff f9ee 	bl	8003458 <HAL_PWREx_GetVoltageRange>
 800407c:	6178      	str	r0, [r7, #20]
 800407e:	e014      	b.n	80040aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004080:	4b25      	ldr	r3, [pc, #148]	; (8004118 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004084:	4a24      	ldr	r2, [pc, #144]	; (8004118 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800408a:	6593      	str	r3, [r2, #88]	; 0x58
 800408c:	4b22      	ldr	r3, [pc, #136]	; (8004118 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800408e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004098:	f7ff f9de 	bl	8003458 <HAL_PWREx_GetVoltageRange>
 800409c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800409e:	4b1e      	ldr	r3, [pc, #120]	; (8004118 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a2:	4a1d      	ldr	r2, [pc, #116]	; (8004118 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040a8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040b0:	d10b      	bne.n	80040ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b80      	cmp	r3, #128	; 0x80
 80040b6:	d919      	bls.n	80040ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2ba0      	cmp	r3, #160	; 0xa0
 80040bc:	d902      	bls.n	80040c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040be:	2302      	movs	r3, #2
 80040c0:	613b      	str	r3, [r7, #16]
 80040c2:	e013      	b.n	80040ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040c4:	2301      	movs	r3, #1
 80040c6:	613b      	str	r3, [r7, #16]
 80040c8:	e010      	b.n	80040ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b80      	cmp	r3, #128	; 0x80
 80040ce:	d902      	bls.n	80040d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80040d0:	2303      	movs	r3, #3
 80040d2:	613b      	str	r3, [r7, #16]
 80040d4:	e00a      	b.n	80040ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b80      	cmp	r3, #128	; 0x80
 80040da:	d102      	bne.n	80040e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040dc:	2302      	movs	r3, #2
 80040de:	613b      	str	r3, [r7, #16]
 80040e0:	e004      	b.n	80040ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b70      	cmp	r3, #112	; 0x70
 80040e6:	d101      	bne.n	80040ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040e8:	2301      	movs	r3, #1
 80040ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80040ec:	4b0b      	ldr	r3, [pc, #44]	; (800411c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f023 0207 	bic.w	r2, r3, #7
 80040f4:	4909      	ldr	r1, [pc, #36]	; (800411c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80040fc:	4b07      	ldr	r3, [pc, #28]	; (800411c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	429a      	cmp	r2, r3
 8004108:	d001      	beq.n	800410e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e000      	b.n	8004110 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3718      	adds	r7, #24
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40021000 	.word	0x40021000
 800411c:	40022000 	.word	0x40022000

08004120 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004128:	2300      	movs	r3, #0
 800412a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800412c:	2300      	movs	r3, #0
 800412e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004138:	2b00      	cmp	r3, #0
 800413a:	d041      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004140:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004144:	d02a      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004146:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800414a:	d824      	bhi.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800414c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004150:	d008      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004152:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004156:	d81e      	bhi.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00a      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800415c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004160:	d010      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004162:	e018      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004164:	4b86      	ldr	r3, [pc, #536]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	4a85      	ldr	r2, [pc, #532]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800416a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800416e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004170:	e015      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	3304      	adds	r3, #4
 8004176:	2100      	movs	r1, #0
 8004178:	4618      	mov	r0, r3
 800417a:	f000 fabb 	bl	80046f4 <RCCEx_PLLSAI1_Config>
 800417e:	4603      	mov	r3, r0
 8004180:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004182:	e00c      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	3320      	adds	r3, #32
 8004188:	2100      	movs	r1, #0
 800418a:	4618      	mov	r0, r3
 800418c:	f000 fba6 	bl	80048dc <RCCEx_PLLSAI2_Config>
 8004190:	4603      	mov	r3, r0
 8004192:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004194:	e003      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	74fb      	strb	r3, [r7, #19]
      break;
 800419a:	e000      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800419c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800419e:	7cfb      	ldrb	r3, [r7, #19]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10b      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041a4:	4b76      	ldr	r3, [pc, #472]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041b2:	4973      	ldr	r1, [pc, #460]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80041ba:	e001      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041bc:	7cfb      	ldrb	r3, [r7, #19]
 80041be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d041      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80041d4:	d02a      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80041d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80041da:	d824      	bhi.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80041dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041e0:	d008      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80041e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041e6:	d81e      	bhi.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00a      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80041ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041f0:	d010      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80041f2:	e018      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041f4:	4b62      	ldr	r3, [pc, #392]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	4a61      	ldr	r2, [pc, #388]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041fe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004200:	e015      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	3304      	adds	r3, #4
 8004206:	2100      	movs	r1, #0
 8004208:	4618      	mov	r0, r3
 800420a:	f000 fa73 	bl	80046f4 <RCCEx_PLLSAI1_Config>
 800420e:	4603      	mov	r3, r0
 8004210:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004212:	e00c      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3320      	adds	r3, #32
 8004218:	2100      	movs	r1, #0
 800421a:	4618      	mov	r0, r3
 800421c:	f000 fb5e 	bl	80048dc <RCCEx_PLLSAI2_Config>
 8004220:	4603      	mov	r3, r0
 8004222:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004224:	e003      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	74fb      	strb	r3, [r7, #19]
      break;
 800422a:	e000      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800422c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800422e:	7cfb      	ldrb	r3, [r7, #19]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10b      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004234:	4b52      	ldr	r3, [pc, #328]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004242:	494f      	ldr	r1, [pc, #316]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004244:	4313      	orrs	r3, r2
 8004246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800424a:	e001      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800424c:	7cfb      	ldrb	r3, [r7, #19]
 800424e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 80a0 	beq.w	800439e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800425e:	2300      	movs	r3, #0
 8004260:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004262:	4b47      	ldr	r3, [pc, #284]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800426e:	2301      	movs	r3, #1
 8004270:	e000      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004272:	2300      	movs	r3, #0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00d      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004278:	4b41      	ldr	r3, [pc, #260]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800427a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427c:	4a40      	ldr	r2, [pc, #256]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800427e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004282:	6593      	str	r3, [r2, #88]	; 0x58
 8004284:	4b3e      	ldr	r3, [pc, #248]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800428c:	60bb      	str	r3, [r7, #8]
 800428e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004290:	2301      	movs	r3, #1
 8004292:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004294:	4b3b      	ldr	r3, [pc, #236]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a3a      	ldr	r2, [pc, #232]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800429a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800429e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042a0:	f7fc fe36 	bl	8000f10 <HAL_GetTick>
 80042a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042a6:	e009      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042a8:	f7fc fe32 	bl	8000f10 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d902      	bls.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	74fb      	strb	r3, [r7, #19]
        break;
 80042ba:	e005      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042bc:	4b31      	ldr	r3, [pc, #196]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0ef      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80042c8:	7cfb      	ldrb	r3, [r7, #19]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d15c      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042ce:	4b2c      	ldr	r3, [pc, #176]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d01f      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d019      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042ec:	4b24      	ldr	r3, [pc, #144]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042f8:	4b21      	ldr	r3, [pc, #132]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fe:	4a20      	ldr	r2, [pc, #128]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004304:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004308:	4b1d      	ldr	r3, [pc, #116]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800430a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430e:	4a1c      	ldr	r2, [pc, #112]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004314:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004318:	4a19      	ldr	r2, [pc, #100]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d016      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800432a:	f7fc fdf1 	bl	8000f10 <HAL_GetTick>
 800432e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004330:	e00b      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004332:	f7fc fded 	bl	8000f10 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004340:	4293      	cmp	r3, r2
 8004342:	d902      	bls.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	74fb      	strb	r3, [r7, #19]
            break;
 8004348:	e006      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800434a:	4b0d      	ldr	r3, [pc, #52]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800434c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0ec      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004358:	7cfb      	ldrb	r3, [r7, #19]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10c      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800435e:	4b08      	ldr	r3, [pc, #32]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004364:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800436e:	4904      	ldr	r1, [pc, #16]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004370:	4313      	orrs	r3, r2
 8004372:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004376:	e009      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004378:	7cfb      	ldrb	r3, [r7, #19]
 800437a:	74bb      	strb	r3, [r7, #18]
 800437c:	e006      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800437e:	bf00      	nop
 8004380:	40021000 	.word	0x40021000
 8004384:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004388:	7cfb      	ldrb	r3, [r7, #19]
 800438a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800438c:	7c7b      	ldrb	r3, [r7, #17]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d105      	bne.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004392:	4b9e      	ldr	r3, [pc, #632]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004396:	4a9d      	ldr	r2, [pc, #628]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004398:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800439c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043aa:	4b98      	ldr	r3, [pc, #608]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b0:	f023 0203 	bic.w	r2, r3, #3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b8:	4994      	ldr	r1, [pc, #592]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00a      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043cc:	4b8f      	ldr	r3, [pc, #572]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d2:	f023 020c 	bic.w	r2, r3, #12
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043da:	498c      	ldr	r1, [pc, #560]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0304 	and.w	r3, r3, #4
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00a      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043ee:	4b87      	ldr	r3, [pc, #540]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fc:	4983      	ldr	r1, [pc, #524]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0308 	and.w	r3, r3, #8
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00a      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004410:	4b7e      	ldr	r3, [pc, #504]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004416:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441e:	497b      	ldr	r1, [pc, #492]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004420:	4313      	orrs	r3, r2
 8004422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0310 	and.w	r3, r3, #16
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004432:	4b76      	ldr	r3, [pc, #472]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004438:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004440:	4972      	ldr	r1, [pc, #456]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004442:	4313      	orrs	r3, r2
 8004444:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0320 	and.w	r3, r3, #32
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00a      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004454:	4b6d      	ldr	r3, [pc, #436]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004462:	496a      	ldr	r1, [pc, #424]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00a      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004476:	4b65      	ldr	r3, [pc, #404]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004484:	4961      	ldr	r1, [pc, #388]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004486:	4313      	orrs	r3, r2
 8004488:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00a      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004498:	4b5c      	ldr	r3, [pc, #368]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800449a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a6:	4959      	ldr	r1, [pc, #356]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00a      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044ba:	4b54      	ldr	r3, [pc, #336]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c8:	4950      	ldr	r1, [pc, #320]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00a      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044dc:	4b4b      	ldr	r3, [pc, #300]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ea:	4948      	ldr	r1, [pc, #288]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00a      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044fe:	4b43      	ldr	r3, [pc, #268]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004504:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800450c:	493f      	ldr	r1, [pc, #252]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800450e:	4313      	orrs	r3, r2
 8004510:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d028      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004520:	4b3a      	ldr	r3, [pc, #232]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004526:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800452e:	4937      	ldr	r1, [pc, #220]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004530:	4313      	orrs	r3, r2
 8004532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800453a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800453e:	d106      	bne.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004540:	4b32      	ldr	r3, [pc, #200]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	4a31      	ldr	r2, [pc, #196]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004546:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800454a:	60d3      	str	r3, [r2, #12]
 800454c:	e011      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004552:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004556:	d10c      	bne.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3304      	adds	r3, #4
 800455c:	2101      	movs	r1, #1
 800455e:	4618      	mov	r0, r3
 8004560:	f000 f8c8 	bl	80046f4 <RCCEx_PLLSAI1_Config>
 8004564:	4603      	mov	r3, r0
 8004566:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004568:	7cfb      	ldrb	r3, [r7, #19]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800456e:	7cfb      	ldrb	r3, [r7, #19]
 8004570:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d028      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800457e:	4b23      	ldr	r3, [pc, #140]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004584:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458c:	491f      	ldr	r1, [pc, #124]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800458e:	4313      	orrs	r3, r2
 8004590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004598:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800459c:	d106      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800459e:	4b1b      	ldr	r3, [pc, #108]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	4a1a      	ldr	r2, [pc, #104]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045a8:	60d3      	str	r3, [r2, #12]
 80045aa:	e011      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045b4:	d10c      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	3304      	adds	r3, #4
 80045ba:	2101      	movs	r1, #1
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 f899 	bl	80046f4 <RCCEx_PLLSAI1_Config>
 80045c2:	4603      	mov	r3, r0
 80045c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045c6:	7cfb      	ldrb	r3, [r7, #19]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80045cc:	7cfb      	ldrb	r3, [r7, #19]
 80045ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d02b      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045dc:	4b0b      	ldr	r3, [pc, #44]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ea:	4908      	ldr	r1, [pc, #32]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045fa:	d109      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045fc:	4b03      	ldr	r3, [pc, #12]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	4a02      	ldr	r2, [pc, #8]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004602:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004606:	60d3      	str	r3, [r2, #12]
 8004608:	e014      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800460a:	bf00      	nop
 800460c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004614:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004618:	d10c      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	3304      	adds	r3, #4
 800461e:	2101      	movs	r1, #1
 8004620:	4618      	mov	r0, r3
 8004622:	f000 f867 	bl	80046f4 <RCCEx_PLLSAI1_Config>
 8004626:	4603      	mov	r3, r0
 8004628:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800462a:	7cfb      	ldrb	r3, [r7, #19]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004630:	7cfb      	ldrb	r3, [r7, #19]
 8004632:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d02f      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004640:	4b2b      	ldr	r3, [pc, #172]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004646:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800464e:	4928      	ldr	r1, [pc, #160]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004650:	4313      	orrs	r3, r2
 8004652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800465a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800465e:	d10d      	bne.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3304      	adds	r3, #4
 8004664:	2102      	movs	r1, #2
 8004666:	4618      	mov	r0, r3
 8004668:	f000 f844 	bl	80046f4 <RCCEx_PLLSAI1_Config>
 800466c:	4603      	mov	r3, r0
 800466e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004670:	7cfb      	ldrb	r3, [r7, #19]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d014      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004676:	7cfb      	ldrb	r3, [r7, #19]
 8004678:	74bb      	strb	r3, [r7, #18]
 800467a:	e011      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004680:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004684:	d10c      	bne.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	3320      	adds	r3, #32
 800468a:	2102      	movs	r1, #2
 800468c:	4618      	mov	r0, r3
 800468e:	f000 f925 	bl	80048dc <RCCEx_PLLSAI2_Config>
 8004692:	4603      	mov	r3, r0
 8004694:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004696:	7cfb      	ldrb	r3, [r7, #19]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d001      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800469c:	7cfb      	ldrb	r3, [r7, #19]
 800469e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00a      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046ac:	4b10      	ldr	r3, [pc, #64]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046ba:	490d      	ldr	r1, [pc, #52]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00b      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046ce:	4b08      	ldr	r3, [pc, #32]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046de:	4904      	ldr	r1, [pc, #16]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80046e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40021000 	.word	0x40021000

080046f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046fe:	2300      	movs	r3, #0
 8004700:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004702:	4b75      	ldr	r3, [pc, #468]	; (80048d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f003 0303 	and.w	r3, r3, #3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d018      	beq.n	8004740 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800470e:	4b72      	ldr	r3, [pc, #456]	; (80048d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	f003 0203 	and.w	r2, r3, #3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	429a      	cmp	r2, r3
 800471c:	d10d      	bne.n	800473a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
       ||
 8004722:	2b00      	cmp	r3, #0
 8004724:	d009      	beq.n	800473a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004726:	4b6c      	ldr	r3, [pc, #432]	; (80048d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	091b      	lsrs	r3, r3, #4
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	1c5a      	adds	r2, r3, #1
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
       ||
 8004736:	429a      	cmp	r2, r3
 8004738:	d047      	beq.n	80047ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	73fb      	strb	r3, [r7, #15]
 800473e:	e044      	b.n	80047ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b03      	cmp	r3, #3
 8004746:	d018      	beq.n	800477a <RCCEx_PLLSAI1_Config+0x86>
 8004748:	2b03      	cmp	r3, #3
 800474a:	d825      	bhi.n	8004798 <RCCEx_PLLSAI1_Config+0xa4>
 800474c:	2b01      	cmp	r3, #1
 800474e:	d002      	beq.n	8004756 <RCCEx_PLLSAI1_Config+0x62>
 8004750:	2b02      	cmp	r3, #2
 8004752:	d009      	beq.n	8004768 <RCCEx_PLLSAI1_Config+0x74>
 8004754:	e020      	b.n	8004798 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004756:	4b60      	ldr	r3, [pc, #384]	; (80048d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d11d      	bne.n	800479e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004766:	e01a      	b.n	800479e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004768:	4b5b      	ldr	r3, [pc, #364]	; (80048d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004770:	2b00      	cmp	r3, #0
 8004772:	d116      	bne.n	80047a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004778:	e013      	b.n	80047a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800477a:	4b57      	ldr	r3, [pc, #348]	; (80048d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10f      	bne.n	80047a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004786:	4b54      	ldr	r3, [pc, #336]	; (80048d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d109      	bne.n	80047a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004796:	e006      	b.n	80047a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	73fb      	strb	r3, [r7, #15]
      break;
 800479c:	e004      	b.n	80047a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800479e:	bf00      	nop
 80047a0:	e002      	b.n	80047a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047a2:	bf00      	nop
 80047a4:	e000      	b.n	80047a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10d      	bne.n	80047ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80047ae:	4b4a      	ldr	r3, [pc, #296]	; (80048d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6819      	ldr	r1, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	3b01      	subs	r3, #1
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	430b      	orrs	r3, r1
 80047c4:	4944      	ldr	r1, [pc, #272]	; (80048d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80047ca:	7bfb      	ldrb	r3, [r7, #15]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d17d      	bne.n	80048cc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80047d0:	4b41      	ldr	r3, [pc, #260]	; (80048d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a40      	ldr	r2, [pc, #256]	; (80048d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047dc:	f7fc fb98 	bl	8000f10 <HAL_GetTick>
 80047e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047e2:	e009      	b.n	80047f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047e4:	f7fc fb94 	bl	8000f10 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d902      	bls.n	80047f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	73fb      	strb	r3, [r7, #15]
        break;
 80047f6:	e005      	b.n	8004804 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047f8:	4b37      	ldr	r3, [pc, #220]	; (80048d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1ef      	bne.n	80047e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004804:	7bfb      	ldrb	r3, [r7, #15]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d160      	bne.n	80048cc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d111      	bne.n	8004834 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004810:	4b31      	ldr	r3, [pc, #196]	; (80048d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6892      	ldr	r2, [r2, #8]
 8004820:	0211      	lsls	r1, r2, #8
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	68d2      	ldr	r2, [r2, #12]
 8004826:	0912      	lsrs	r2, r2, #4
 8004828:	0452      	lsls	r2, r2, #17
 800482a:	430a      	orrs	r2, r1
 800482c:	492a      	ldr	r1, [pc, #168]	; (80048d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800482e:	4313      	orrs	r3, r2
 8004830:	610b      	str	r3, [r1, #16]
 8004832:	e027      	b.n	8004884 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d112      	bne.n	8004860 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800483a:	4b27      	ldr	r3, [pc, #156]	; (80048d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004842:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	6892      	ldr	r2, [r2, #8]
 800484a:	0211      	lsls	r1, r2, #8
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6912      	ldr	r2, [r2, #16]
 8004850:	0852      	lsrs	r2, r2, #1
 8004852:	3a01      	subs	r2, #1
 8004854:	0552      	lsls	r2, r2, #21
 8004856:	430a      	orrs	r2, r1
 8004858:	491f      	ldr	r1, [pc, #124]	; (80048d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800485a:	4313      	orrs	r3, r2
 800485c:	610b      	str	r3, [r1, #16]
 800485e:	e011      	b.n	8004884 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004860:	4b1d      	ldr	r3, [pc, #116]	; (80048d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004868:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	6892      	ldr	r2, [r2, #8]
 8004870:	0211      	lsls	r1, r2, #8
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	6952      	ldr	r2, [r2, #20]
 8004876:	0852      	lsrs	r2, r2, #1
 8004878:	3a01      	subs	r2, #1
 800487a:	0652      	lsls	r2, r2, #25
 800487c:	430a      	orrs	r2, r1
 800487e:	4916      	ldr	r1, [pc, #88]	; (80048d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004880:	4313      	orrs	r3, r2
 8004882:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004884:	4b14      	ldr	r3, [pc, #80]	; (80048d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a13      	ldr	r2, [pc, #76]	; (80048d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800488a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800488e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004890:	f7fc fb3e 	bl	8000f10 <HAL_GetTick>
 8004894:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004896:	e009      	b.n	80048ac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004898:	f7fc fb3a 	bl	8000f10 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d902      	bls.n	80048ac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	73fb      	strb	r3, [r7, #15]
          break;
 80048aa:	e005      	b.n	80048b8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048ac:	4b0a      	ldr	r3, [pc, #40]	; (80048d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0ef      	beq.n	8004898 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d106      	bne.n	80048cc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048be:	4b06      	ldr	r3, [pc, #24]	; (80048d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048c0:	691a      	ldr	r2, [r3, #16]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	4904      	ldr	r1, [pc, #16]	; (80048d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80048cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	40021000 	.word	0x40021000

080048dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048e6:	2300      	movs	r3, #0
 80048e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048ea:	4b6a      	ldr	r3, [pc, #424]	; (8004a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d018      	beq.n	8004928 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80048f6:	4b67      	ldr	r3, [pc, #412]	; (8004a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	f003 0203 	and.w	r2, r3, #3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	429a      	cmp	r2, r3
 8004904:	d10d      	bne.n	8004922 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
       ||
 800490a:	2b00      	cmp	r3, #0
 800490c:	d009      	beq.n	8004922 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800490e:	4b61      	ldr	r3, [pc, #388]	; (8004a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	091b      	lsrs	r3, r3, #4
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
       ||
 800491e:	429a      	cmp	r2, r3
 8004920:	d047      	beq.n	80049b2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	73fb      	strb	r3, [r7, #15]
 8004926:	e044      	b.n	80049b2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b03      	cmp	r3, #3
 800492e:	d018      	beq.n	8004962 <RCCEx_PLLSAI2_Config+0x86>
 8004930:	2b03      	cmp	r3, #3
 8004932:	d825      	bhi.n	8004980 <RCCEx_PLLSAI2_Config+0xa4>
 8004934:	2b01      	cmp	r3, #1
 8004936:	d002      	beq.n	800493e <RCCEx_PLLSAI2_Config+0x62>
 8004938:	2b02      	cmp	r3, #2
 800493a:	d009      	beq.n	8004950 <RCCEx_PLLSAI2_Config+0x74>
 800493c:	e020      	b.n	8004980 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800493e:	4b55      	ldr	r3, [pc, #340]	; (8004a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d11d      	bne.n	8004986 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800494e:	e01a      	b.n	8004986 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004950:	4b50      	ldr	r3, [pc, #320]	; (8004a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004958:	2b00      	cmp	r3, #0
 800495a:	d116      	bne.n	800498a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004960:	e013      	b.n	800498a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004962:	4b4c      	ldr	r3, [pc, #304]	; (8004a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10f      	bne.n	800498e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800496e:	4b49      	ldr	r3, [pc, #292]	; (8004a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d109      	bne.n	800498e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800497e:	e006      	b.n	800498e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	73fb      	strb	r3, [r7, #15]
      break;
 8004984:	e004      	b.n	8004990 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004986:	bf00      	nop
 8004988:	e002      	b.n	8004990 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800498a:	bf00      	nop
 800498c:	e000      	b.n	8004990 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800498e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004990:	7bfb      	ldrb	r3, [r7, #15]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10d      	bne.n	80049b2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004996:	4b3f      	ldr	r3, [pc, #252]	; (8004a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6819      	ldr	r1, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	3b01      	subs	r3, #1
 80049a8:	011b      	lsls	r3, r3, #4
 80049aa:	430b      	orrs	r3, r1
 80049ac:	4939      	ldr	r1, [pc, #228]	; (8004a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049b2:	7bfb      	ldrb	r3, [r7, #15]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d167      	bne.n	8004a88 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80049b8:	4b36      	ldr	r3, [pc, #216]	; (8004a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a35      	ldr	r2, [pc, #212]	; (8004a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049c4:	f7fc faa4 	bl	8000f10 <HAL_GetTick>
 80049c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049ca:	e009      	b.n	80049e0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049cc:	f7fc faa0 	bl	8000f10 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d902      	bls.n	80049e0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	73fb      	strb	r3, [r7, #15]
        break;
 80049de:	e005      	b.n	80049ec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049e0:	4b2c      	ldr	r3, [pc, #176]	; (8004a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1ef      	bne.n	80049cc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d14a      	bne.n	8004a88 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d111      	bne.n	8004a1c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049f8:	4b26      	ldr	r3, [pc, #152]	; (8004a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004a00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	6892      	ldr	r2, [r2, #8]
 8004a08:	0211      	lsls	r1, r2, #8
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	68d2      	ldr	r2, [r2, #12]
 8004a0e:	0912      	lsrs	r2, r2, #4
 8004a10:	0452      	lsls	r2, r2, #17
 8004a12:	430a      	orrs	r2, r1
 8004a14:	491f      	ldr	r1, [pc, #124]	; (8004a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	614b      	str	r3, [r1, #20]
 8004a1a:	e011      	b.n	8004a40 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a1c:	4b1d      	ldr	r3, [pc, #116]	; (8004a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6892      	ldr	r2, [r2, #8]
 8004a2c:	0211      	lsls	r1, r2, #8
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	6912      	ldr	r2, [r2, #16]
 8004a32:	0852      	lsrs	r2, r2, #1
 8004a34:	3a01      	subs	r2, #1
 8004a36:	0652      	lsls	r2, r2, #25
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	4916      	ldr	r1, [pc, #88]	; (8004a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a40:	4b14      	ldr	r3, [pc, #80]	; (8004a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a13      	ldr	r2, [pc, #76]	; (8004a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a4c:	f7fc fa60 	bl	8000f10 <HAL_GetTick>
 8004a50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a52:	e009      	b.n	8004a68 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a54:	f7fc fa5c 	bl	8000f10 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d902      	bls.n	8004a68 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	73fb      	strb	r3, [r7, #15]
          break;
 8004a66:	e005      	b.n	8004a74 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a68:	4b0a      	ldr	r3, [pc, #40]	; (8004a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d0ef      	beq.n	8004a54 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d106      	bne.n	8004a88 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004a7a:	4b06      	ldr	r3, [pc, #24]	; (8004a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a7c:	695a      	ldr	r2, [r3, #20]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	4904      	ldr	r1, [pc, #16]	; (8004a94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	40021000 	.word	0x40021000

08004a98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e049      	b.n	8004b3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d106      	bne.n	8004ac4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7fc f8c2 	bl	8000c48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	4610      	mov	r0, r2
 8004ad8:	f000 f968 	bl	8004dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
	...

08004b48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d001      	beq.n	8004b60 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e047      	b.n	8004bf0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a23      	ldr	r2, [pc, #140]	; (8004bfc <HAL_TIM_Base_Start+0xb4>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d01d      	beq.n	8004bae <HAL_TIM_Base_Start+0x66>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b7a:	d018      	beq.n	8004bae <HAL_TIM_Base_Start+0x66>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a1f      	ldr	r2, [pc, #124]	; (8004c00 <HAL_TIM_Base_Start+0xb8>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d013      	beq.n	8004bae <HAL_TIM_Base_Start+0x66>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a1e      	ldr	r2, [pc, #120]	; (8004c04 <HAL_TIM_Base_Start+0xbc>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d00e      	beq.n	8004bae <HAL_TIM_Base_Start+0x66>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a1c      	ldr	r2, [pc, #112]	; (8004c08 <HAL_TIM_Base_Start+0xc0>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d009      	beq.n	8004bae <HAL_TIM_Base_Start+0x66>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a1b      	ldr	r2, [pc, #108]	; (8004c0c <HAL_TIM_Base_Start+0xc4>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d004      	beq.n	8004bae <HAL_TIM_Base_Start+0x66>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a19      	ldr	r2, [pc, #100]	; (8004c10 <HAL_TIM_Base_Start+0xc8>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d115      	bne.n	8004bda <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	4b17      	ldr	r3, [pc, #92]	; (8004c14 <HAL_TIM_Base_Start+0xcc>)
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2b06      	cmp	r3, #6
 8004bbe:	d015      	beq.n	8004bec <HAL_TIM_Base_Start+0xa4>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc6:	d011      	beq.n	8004bec <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f042 0201 	orr.w	r2, r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd8:	e008      	b.n	8004bec <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f042 0201 	orr.w	r2, r2, #1
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	e000      	b.n	8004bee <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3714      	adds	r7, #20
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	40012c00 	.word	0x40012c00
 8004c00:	40000400 	.word	0x40000400
 8004c04:	40000800 	.word	0x40000800
 8004c08:	40000c00 	.word	0x40000c00
 8004c0c:	40013400 	.word	0x40013400
 8004c10:	40014000 	.word	0x40014000
 8004c14:	00010007 	.word	0x00010007

08004c18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c22:	2300      	movs	r3, #0
 8004c24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d101      	bne.n	8004c34 <HAL_TIM_ConfigClockSource+0x1c>
 8004c30:	2302      	movs	r3, #2
 8004c32:	e0b6      	b.n	8004da2 <HAL_TIM_ConfigClockSource+0x18a>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c70:	d03e      	beq.n	8004cf0 <HAL_TIM_ConfigClockSource+0xd8>
 8004c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c76:	f200 8087 	bhi.w	8004d88 <HAL_TIM_ConfigClockSource+0x170>
 8004c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c7e:	f000 8086 	beq.w	8004d8e <HAL_TIM_ConfigClockSource+0x176>
 8004c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c86:	d87f      	bhi.n	8004d88 <HAL_TIM_ConfigClockSource+0x170>
 8004c88:	2b70      	cmp	r3, #112	; 0x70
 8004c8a:	d01a      	beq.n	8004cc2 <HAL_TIM_ConfigClockSource+0xaa>
 8004c8c:	2b70      	cmp	r3, #112	; 0x70
 8004c8e:	d87b      	bhi.n	8004d88 <HAL_TIM_ConfigClockSource+0x170>
 8004c90:	2b60      	cmp	r3, #96	; 0x60
 8004c92:	d050      	beq.n	8004d36 <HAL_TIM_ConfigClockSource+0x11e>
 8004c94:	2b60      	cmp	r3, #96	; 0x60
 8004c96:	d877      	bhi.n	8004d88 <HAL_TIM_ConfigClockSource+0x170>
 8004c98:	2b50      	cmp	r3, #80	; 0x50
 8004c9a:	d03c      	beq.n	8004d16 <HAL_TIM_ConfigClockSource+0xfe>
 8004c9c:	2b50      	cmp	r3, #80	; 0x50
 8004c9e:	d873      	bhi.n	8004d88 <HAL_TIM_ConfigClockSource+0x170>
 8004ca0:	2b40      	cmp	r3, #64	; 0x40
 8004ca2:	d058      	beq.n	8004d56 <HAL_TIM_ConfigClockSource+0x13e>
 8004ca4:	2b40      	cmp	r3, #64	; 0x40
 8004ca6:	d86f      	bhi.n	8004d88 <HAL_TIM_ConfigClockSource+0x170>
 8004ca8:	2b30      	cmp	r3, #48	; 0x30
 8004caa:	d064      	beq.n	8004d76 <HAL_TIM_ConfigClockSource+0x15e>
 8004cac:	2b30      	cmp	r3, #48	; 0x30
 8004cae:	d86b      	bhi.n	8004d88 <HAL_TIM_ConfigClockSource+0x170>
 8004cb0:	2b20      	cmp	r3, #32
 8004cb2:	d060      	beq.n	8004d76 <HAL_TIM_ConfigClockSource+0x15e>
 8004cb4:	2b20      	cmp	r3, #32
 8004cb6:	d867      	bhi.n	8004d88 <HAL_TIM_ConfigClockSource+0x170>
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d05c      	beq.n	8004d76 <HAL_TIM_ConfigClockSource+0x15e>
 8004cbc:	2b10      	cmp	r3, #16
 8004cbe:	d05a      	beq.n	8004d76 <HAL_TIM_ConfigClockSource+0x15e>
 8004cc0:	e062      	b.n	8004d88 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6818      	ldr	r0, [r3, #0]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	6899      	ldr	r1, [r3, #8]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f000 f97f 	bl	8004fd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ce4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	609a      	str	r2, [r3, #8]
      break;
 8004cee:	e04f      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6818      	ldr	r0, [r3, #0]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	6899      	ldr	r1, [r3, #8]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f000 f968 	bl	8004fd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689a      	ldr	r2, [r3, #8]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d12:	609a      	str	r2, [r3, #8]
      break;
 8004d14:	e03c      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6818      	ldr	r0, [r3, #0]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	6859      	ldr	r1, [r3, #4]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	461a      	mov	r2, r3
 8004d24:	f000 f8dc 	bl	8004ee0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2150      	movs	r1, #80	; 0x50
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 f935 	bl	8004f9e <TIM_ITRx_SetConfig>
      break;
 8004d34:	e02c      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6818      	ldr	r0, [r3, #0]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	6859      	ldr	r1, [r3, #4]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	461a      	mov	r2, r3
 8004d44:	f000 f8fb 	bl	8004f3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2160      	movs	r1, #96	; 0x60
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 f925 	bl	8004f9e <TIM_ITRx_SetConfig>
      break;
 8004d54:	e01c      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6818      	ldr	r0, [r3, #0]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	6859      	ldr	r1, [r3, #4]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	461a      	mov	r2, r3
 8004d64:	f000 f8bc 	bl	8004ee0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2140      	movs	r1, #64	; 0x40
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 f915 	bl	8004f9e <TIM_ITRx_SetConfig>
      break;
 8004d74:	e00c      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4619      	mov	r1, r3
 8004d80:	4610      	mov	r0, r2
 8004d82:	f000 f90c 	bl	8004f9e <TIM_ITRx_SetConfig>
      break;
 8004d86:	e003      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d8c:	e000      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004d8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
	...

08004dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a40      	ldr	r2, [pc, #256]	; (8004ec0 <TIM_Base_SetConfig+0x114>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d013      	beq.n	8004dec <TIM_Base_SetConfig+0x40>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dca:	d00f      	beq.n	8004dec <TIM_Base_SetConfig+0x40>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a3d      	ldr	r2, [pc, #244]	; (8004ec4 <TIM_Base_SetConfig+0x118>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d00b      	beq.n	8004dec <TIM_Base_SetConfig+0x40>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a3c      	ldr	r2, [pc, #240]	; (8004ec8 <TIM_Base_SetConfig+0x11c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d007      	beq.n	8004dec <TIM_Base_SetConfig+0x40>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a3b      	ldr	r2, [pc, #236]	; (8004ecc <TIM_Base_SetConfig+0x120>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d003      	beq.n	8004dec <TIM_Base_SetConfig+0x40>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a3a      	ldr	r2, [pc, #232]	; (8004ed0 <TIM_Base_SetConfig+0x124>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d108      	bne.n	8004dfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a2f      	ldr	r2, [pc, #188]	; (8004ec0 <TIM_Base_SetConfig+0x114>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d01f      	beq.n	8004e46 <TIM_Base_SetConfig+0x9a>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e0c:	d01b      	beq.n	8004e46 <TIM_Base_SetConfig+0x9a>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a2c      	ldr	r2, [pc, #176]	; (8004ec4 <TIM_Base_SetConfig+0x118>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d017      	beq.n	8004e46 <TIM_Base_SetConfig+0x9a>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a2b      	ldr	r2, [pc, #172]	; (8004ec8 <TIM_Base_SetConfig+0x11c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d013      	beq.n	8004e46 <TIM_Base_SetConfig+0x9a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a2a      	ldr	r2, [pc, #168]	; (8004ecc <TIM_Base_SetConfig+0x120>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d00f      	beq.n	8004e46 <TIM_Base_SetConfig+0x9a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a29      	ldr	r2, [pc, #164]	; (8004ed0 <TIM_Base_SetConfig+0x124>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d00b      	beq.n	8004e46 <TIM_Base_SetConfig+0x9a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a28      	ldr	r2, [pc, #160]	; (8004ed4 <TIM_Base_SetConfig+0x128>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d007      	beq.n	8004e46 <TIM_Base_SetConfig+0x9a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a27      	ldr	r2, [pc, #156]	; (8004ed8 <TIM_Base_SetConfig+0x12c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d003      	beq.n	8004e46 <TIM_Base_SetConfig+0x9a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a26      	ldr	r2, [pc, #152]	; (8004edc <TIM_Base_SetConfig+0x130>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d108      	bne.n	8004e58 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a10      	ldr	r2, [pc, #64]	; (8004ec0 <TIM_Base_SetConfig+0x114>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d00f      	beq.n	8004ea4 <TIM_Base_SetConfig+0xf8>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a12      	ldr	r2, [pc, #72]	; (8004ed0 <TIM_Base_SetConfig+0x124>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d00b      	beq.n	8004ea4 <TIM_Base_SetConfig+0xf8>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a11      	ldr	r2, [pc, #68]	; (8004ed4 <TIM_Base_SetConfig+0x128>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d007      	beq.n	8004ea4 <TIM_Base_SetConfig+0xf8>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a10      	ldr	r2, [pc, #64]	; (8004ed8 <TIM_Base_SetConfig+0x12c>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d003      	beq.n	8004ea4 <TIM_Base_SetConfig+0xf8>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a0f      	ldr	r2, [pc, #60]	; (8004edc <TIM_Base_SetConfig+0x130>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d103      	bne.n	8004eac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	691a      	ldr	r2, [r3, #16]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	615a      	str	r2, [r3, #20]
}
 8004eb2:	bf00      	nop
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	40012c00 	.word	0x40012c00
 8004ec4:	40000400 	.word	0x40000400
 8004ec8:	40000800 	.word	0x40000800
 8004ecc:	40000c00 	.word	0x40000c00
 8004ed0:	40013400 	.word	0x40013400
 8004ed4:	40014000 	.word	0x40014000
 8004ed8:	40014400 	.word	0x40014400
 8004edc:	40014800 	.word	0x40014800

08004ee0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	f023 0201 	bic.w	r2, r3, #1
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	011b      	lsls	r3, r3, #4
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f023 030a 	bic.w	r3, r3, #10
 8004f1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	621a      	str	r2, [r3, #32]
}
 8004f32:	bf00      	nop
 8004f34:	371c      	adds	r7, #28
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b087      	sub	sp, #28
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	60f8      	str	r0, [r7, #12]
 8004f46:	60b9      	str	r1, [r7, #8]
 8004f48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	f023 0210 	bic.w	r2, r3, #16
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	031b      	lsls	r3, r3, #12
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	011b      	lsls	r3, r3, #4
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	621a      	str	r2, [r3, #32]
}
 8004f92:	bf00      	nop
 8004f94:	371c      	adds	r7, #28
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b085      	sub	sp, #20
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
 8004fa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fb6:	683a      	ldr	r2, [r7, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	f043 0307 	orr.w	r3, r3, #7
 8004fc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	609a      	str	r2, [r3, #8]
}
 8004fc8:	bf00      	nop
 8004fca:	3714      	adds	r7, #20
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
 8004fe0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	021a      	lsls	r2, r3, #8
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	609a      	str	r2, [r3, #8]
}
 8005008:	bf00      	nop
 800500a:	371c      	adds	r7, #28
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005024:	2b01      	cmp	r3, #1
 8005026:	d101      	bne.n	800502c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005028:	2302      	movs	r3, #2
 800502a:	e068      	b.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a2e      	ldr	r2, [pc, #184]	; (800510c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d004      	beq.n	8005060 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a2d      	ldr	r2, [pc, #180]	; (8005110 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d108      	bne.n	8005072 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005066:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	4313      	orrs	r3, r2
 8005070:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005078:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	4313      	orrs	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a1e      	ldr	r2, [pc, #120]	; (800510c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d01d      	beq.n	80050d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800509e:	d018      	beq.n	80050d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a1b      	ldr	r2, [pc, #108]	; (8005114 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d013      	beq.n	80050d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a1a      	ldr	r2, [pc, #104]	; (8005118 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d00e      	beq.n	80050d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a18      	ldr	r2, [pc, #96]	; (800511c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d009      	beq.n	80050d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a13      	ldr	r2, [pc, #76]	; (8005110 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d004      	beq.n	80050d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a14      	ldr	r2, [pc, #80]	; (8005120 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d10c      	bne.n	80050ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	40012c00 	.word	0x40012c00
 8005110:	40013400 	.word	0x40013400
 8005114:	40000400 	.word	0x40000400
 8005118:	40000800 	.word	0x40000800
 800511c:	40000c00 	.word	0x40000c00
 8005120:	40014000 	.word	0x40014000

08005124 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e040      	b.n	80051b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800513a:	2b00      	cmp	r3, #0
 800513c:	d106      	bne.n	800514c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f7fb fd9c 	bl	8000c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2224      	movs	r2, #36	; 0x24
 8005150:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0201 	bic.w	r2, r2, #1
 8005160:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f82c 	bl	80051c0 <UART_SetConfig>
 8005168:	4603      	mov	r3, r0
 800516a:	2b01      	cmp	r3, #1
 800516c:	d101      	bne.n	8005172 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e022      	b.n	80051b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005176:	2b00      	cmp	r3, #0
 8005178:	d002      	beq.n	8005180 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 fad8 	bl	8005730 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800518e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689a      	ldr	r2, [r3, #8]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800519e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f042 0201 	orr.w	r2, r2, #1
 80051ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 fb5f 	bl	8005874 <UART_CheckIdleState>
 80051b6:	4603      	mov	r3, r0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3708      	adds	r7, #8
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051c4:	b08a      	sub	sp, #40	; 0x28
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	431a      	orrs	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	431a      	orrs	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	69db      	ldr	r3, [r3, #28]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	4ba4      	ldr	r3, [pc, #656]	; (8005480 <UART_SetConfig+0x2c0>)
 80051f0:	4013      	ands	r3, r2
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	6812      	ldr	r2, [r2, #0]
 80051f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051f8:	430b      	orrs	r3, r1
 80051fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	68da      	ldr	r2, [r3, #12]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a99      	ldr	r2, [pc, #612]	; (8005484 <UART_SetConfig+0x2c4>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d004      	beq.n	800522c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005228:	4313      	orrs	r3, r2
 800522a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800523c:	430a      	orrs	r2, r1
 800523e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a90      	ldr	r2, [pc, #576]	; (8005488 <UART_SetConfig+0x2c8>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d126      	bne.n	8005298 <UART_SetConfig+0xd8>
 800524a:	4b90      	ldr	r3, [pc, #576]	; (800548c <UART_SetConfig+0x2cc>)
 800524c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005250:	f003 0303 	and.w	r3, r3, #3
 8005254:	2b03      	cmp	r3, #3
 8005256:	d81b      	bhi.n	8005290 <UART_SetConfig+0xd0>
 8005258:	a201      	add	r2, pc, #4	; (adr r2, 8005260 <UART_SetConfig+0xa0>)
 800525a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525e:	bf00      	nop
 8005260:	08005271 	.word	0x08005271
 8005264:	08005281 	.word	0x08005281
 8005268:	08005279 	.word	0x08005279
 800526c:	08005289 	.word	0x08005289
 8005270:	2301      	movs	r3, #1
 8005272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005276:	e116      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005278:	2302      	movs	r3, #2
 800527a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800527e:	e112      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005280:	2304      	movs	r3, #4
 8005282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005286:	e10e      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005288:	2308      	movs	r3, #8
 800528a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800528e:	e10a      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005290:	2310      	movs	r3, #16
 8005292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005296:	e106      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a7c      	ldr	r2, [pc, #496]	; (8005490 <UART_SetConfig+0x2d0>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d138      	bne.n	8005314 <UART_SetConfig+0x154>
 80052a2:	4b7a      	ldr	r3, [pc, #488]	; (800548c <UART_SetConfig+0x2cc>)
 80052a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a8:	f003 030c 	and.w	r3, r3, #12
 80052ac:	2b0c      	cmp	r3, #12
 80052ae:	d82d      	bhi.n	800530c <UART_SetConfig+0x14c>
 80052b0:	a201      	add	r2, pc, #4	; (adr r2, 80052b8 <UART_SetConfig+0xf8>)
 80052b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b6:	bf00      	nop
 80052b8:	080052ed 	.word	0x080052ed
 80052bc:	0800530d 	.word	0x0800530d
 80052c0:	0800530d 	.word	0x0800530d
 80052c4:	0800530d 	.word	0x0800530d
 80052c8:	080052fd 	.word	0x080052fd
 80052cc:	0800530d 	.word	0x0800530d
 80052d0:	0800530d 	.word	0x0800530d
 80052d4:	0800530d 	.word	0x0800530d
 80052d8:	080052f5 	.word	0x080052f5
 80052dc:	0800530d 	.word	0x0800530d
 80052e0:	0800530d 	.word	0x0800530d
 80052e4:	0800530d 	.word	0x0800530d
 80052e8:	08005305 	.word	0x08005305
 80052ec:	2300      	movs	r3, #0
 80052ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052f2:	e0d8      	b.n	80054a6 <UART_SetConfig+0x2e6>
 80052f4:	2302      	movs	r3, #2
 80052f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052fa:	e0d4      	b.n	80054a6 <UART_SetConfig+0x2e6>
 80052fc:	2304      	movs	r3, #4
 80052fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005302:	e0d0      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005304:	2308      	movs	r3, #8
 8005306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800530a:	e0cc      	b.n	80054a6 <UART_SetConfig+0x2e6>
 800530c:	2310      	movs	r3, #16
 800530e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005312:	e0c8      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a5e      	ldr	r2, [pc, #376]	; (8005494 <UART_SetConfig+0x2d4>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d125      	bne.n	800536a <UART_SetConfig+0x1aa>
 800531e:	4b5b      	ldr	r3, [pc, #364]	; (800548c <UART_SetConfig+0x2cc>)
 8005320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005324:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005328:	2b30      	cmp	r3, #48	; 0x30
 800532a:	d016      	beq.n	800535a <UART_SetConfig+0x19a>
 800532c:	2b30      	cmp	r3, #48	; 0x30
 800532e:	d818      	bhi.n	8005362 <UART_SetConfig+0x1a2>
 8005330:	2b20      	cmp	r3, #32
 8005332:	d00a      	beq.n	800534a <UART_SetConfig+0x18a>
 8005334:	2b20      	cmp	r3, #32
 8005336:	d814      	bhi.n	8005362 <UART_SetConfig+0x1a2>
 8005338:	2b00      	cmp	r3, #0
 800533a:	d002      	beq.n	8005342 <UART_SetConfig+0x182>
 800533c:	2b10      	cmp	r3, #16
 800533e:	d008      	beq.n	8005352 <UART_SetConfig+0x192>
 8005340:	e00f      	b.n	8005362 <UART_SetConfig+0x1a2>
 8005342:	2300      	movs	r3, #0
 8005344:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005348:	e0ad      	b.n	80054a6 <UART_SetConfig+0x2e6>
 800534a:	2302      	movs	r3, #2
 800534c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005350:	e0a9      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005352:	2304      	movs	r3, #4
 8005354:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005358:	e0a5      	b.n	80054a6 <UART_SetConfig+0x2e6>
 800535a:	2308      	movs	r3, #8
 800535c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005360:	e0a1      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005362:	2310      	movs	r3, #16
 8005364:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005368:	e09d      	b.n	80054a6 <UART_SetConfig+0x2e6>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a4a      	ldr	r2, [pc, #296]	; (8005498 <UART_SetConfig+0x2d8>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d125      	bne.n	80053c0 <UART_SetConfig+0x200>
 8005374:	4b45      	ldr	r3, [pc, #276]	; (800548c <UART_SetConfig+0x2cc>)
 8005376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800537e:	2bc0      	cmp	r3, #192	; 0xc0
 8005380:	d016      	beq.n	80053b0 <UART_SetConfig+0x1f0>
 8005382:	2bc0      	cmp	r3, #192	; 0xc0
 8005384:	d818      	bhi.n	80053b8 <UART_SetConfig+0x1f8>
 8005386:	2b80      	cmp	r3, #128	; 0x80
 8005388:	d00a      	beq.n	80053a0 <UART_SetConfig+0x1e0>
 800538a:	2b80      	cmp	r3, #128	; 0x80
 800538c:	d814      	bhi.n	80053b8 <UART_SetConfig+0x1f8>
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <UART_SetConfig+0x1d8>
 8005392:	2b40      	cmp	r3, #64	; 0x40
 8005394:	d008      	beq.n	80053a8 <UART_SetConfig+0x1e8>
 8005396:	e00f      	b.n	80053b8 <UART_SetConfig+0x1f8>
 8005398:	2300      	movs	r3, #0
 800539a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800539e:	e082      	b.n	80054a6 <UART_SetConfig+0x2e6>
 80053a0:	2302      	movs	r3, #2
 80053a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053a6:	e07e      	b.n	80054a6 <UART_SetConfig+0x2e6>
 80053a8:	2304      	movs	r3, #4
 80053aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ae:	e07a      	b.n	80054a6 <UART_SetConfig+0x2e6>
 80053b0:	2308      	movs	r3, #8
 80053b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053b6:	e076      	b.n	80054a6 <UART_SetConfig+0x2e6>
 80053b8:	2310      	movs	r3, #16
 80053ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053be:	e072      	b.n	80054a6 <UART_SetConfig+0x2e6>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a35      	ldr	r2, [pc, #212]	; (800549c <UART_SetConfig+0x2dc>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d12a      	bne.n	8005420 <UART_SetConfig+0x260>
 80053ca:	4b30      	ldr	r3, [pc, #192]	; (800548c <UART_SetConfig+0x2cc>)
 80053cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053d8:	d01a      	beq.n	8005410 <UART_SetConfig+0x250>
 80053da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053de:	d81b      	bhi.n	8005418 <UART_SetConfig+0x258>
 80053e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053e4:	d00c      	beq.n	8005400 <UART_SetConfig+0x240>
 80053e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053ea:	d815      	bhi.n	8005418 <UART_SetConfig+0x258>
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d003      	beq.n	80053f8 <UART_SetConfig+0x238>
 80053f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053f4:	d008      	beq.n	8005408 <UART_SetConfig+0x248>
 80053f6:	e00f      	b.n	8005418 <UART_SetConfig+0x258>
 80053f8:	2300      	movs	r3, #0
 80053fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053fe:	e052      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005400:	2302      	movs	r3, #2
 8005402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005406:	e04e      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005408:	2304      	movs	r3, #4
 800540a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800540e:	e04a      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005410:	2308      	movs	r3, #8
 8005412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005416:	e046      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005418:	2310      	movs	r3, #16
 800541a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800541e:	e042      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a17      	ldr	r2, [pc, #92]	; (8005484 <UART_SetConfig+0x2c4>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d13a      	bne.n	80054a0 <UART_SetConfig+0x2e0>
 800542a:	4b18      	ldr	r3, [pc, #96]	; (800548c <UART_SetConfig+0x2cc>)
 800542c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005430:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005434:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005438:	d01a      	beq.n	8005470 <UART_SetConfig+0x2b0>
 800543a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800543e:	d81b      	bhi.n	8005478 <UART_SetConfig+0x2b8>
 8005440:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005444:	d00c      	beq.n	8005460 <UART_SetConfig+0x2a0>
 8005446:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800544a:	d815      	bhi.n	8005478 <UART_SetConfig+0x2b8>
 800544c:	2b00      	cmp	r3, #0
 800544e:	d003      	beq.n	8005458 <UART_SetConfig+0x298>
 8005450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005454:	d008      	beq.n	8005468 <UART_SetConfig+0x2a8>
 8005456:	e00f      	b.n	8005478 <UART_SetConfig+0x2b8>
 8005458:	2300      	movs	r3, #0
 800545a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800545e:	e022      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005460:	2302      	movs	r3, #2
 8005462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005466:	e01e      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005468:	2304      	movs	r3, #4
 800546a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800546e:	e01a      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005470:	2308      	movs	r3, #8
 8005472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005476:	e016      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005478:	2310      	movs	r3, #16
 800547a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800547e:	e012      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005480:	efff69f3 	.word	0xefff69f3
 8005484:	40008000 	.word	0x40008000
 8005488:	40013800 	.word	0x40013800
 800548c:	40021000 	.word	0x40021000
 8005490:	40004400 	.word	0x40004400
 8005494:	40004800 	.word	0x40004800
 8005498:	40004c00 	.word	0x40004c00
 800549c:	40005000 	.word	0x40005000
 80054a0:	2310      	movs	r3, #16
 80054a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a9f      	ldr	r2, [pc, #636]	; (8005728 <UART_SetConfig+0x568>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d17a      	bne.n	80055a6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054b4:	2b08      	cmp	r3, #8
 80054b6:	d824      	bhi.n	8005502 <UART_SetConfig+0x342>
 80054b8:	a201      	add	r2, pc, #4	; (adr r2, 80054c0 <UART_SetConfig+0x300>)
 80054ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054be:	bf00      	nop
 80054c0:	080054e5 	.word	0x080054e5
 80054c4:	08005503 	.word	0x08005503
 80054c8:	080054ed 	.word	0x080054ed
 80054cc:	08005503 	.word	0x08005503
 80054d0:	080054f3 	.word	0x080054f3
 80054d4:	08005503 	.word	0x08005503
 80054d8:	08005503 	.word	0x08005503
 80054dc:	08005503 	.word	0x08005503
 80054e0:	080054fb 	.word	0x080054fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054e4:	f7fe fd90 	bl	8004008 <HAL_RCC_GetPCLK1Freq>
 80054e8:	61f8      	str	r0, [r7, #28]
        break;
 80054ea:	e010      	b.n	800550e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054ec:	4b8f      	ldr	r3, [pc, #572]	; (800572c <UART_SetConfig+0x56c>)
 80054ee:	61fb      	str	r3, [r7, #28]
        break;
 80054f0:	e00d      	b.n	800550e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054f2:	f7fe fcf1 	bl	8003ed8 <HAL_RCC_GetSysClockFreq>
 80054f6:	61f8      	str	r0, [r7, #28]
        break;
 80054f8:	e009      	b.n	800550e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054fe:	61fb      	str	r3, [r7, #28]
        break;
 8005500:	e005      	b.n	800550e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005502:	2300      	movs	r3, #0
 8005504:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800550c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	2b00      	cmp	r3, #0
 8005512:	f000 80fb 	beq.w	800570c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	4613      	mov	r3, r2
 800551c:	005b      	lsls	r3, r3, #1
 800551e:	4413      	add	r3, r2
 8005520:	69fa      	ldr	r2, [r7, #28]
 8005522:	429a      	cmp	r2, r3
 8005524:	d305      	bcc.n	8005532 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800552c:	69fa      	ldr	r2, [r7, #28]
 800552e:	429a      	cmp	r2, r3
 8005530:	d903      	bls.n	800553a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005538:	e0e8      	b.n	800570c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	2200      	movs	r2, #0
 800553e:	461c      	mov	r4, r3
 8005540:	4615      	mov	r5, r2
 8005542:	f04f 0200 	mov.w	r2, #0
 8005546:	f04f 0300 	mov.w	r3, #0
 800554a:	022b      	lsls	r3, r5, #8
 800554c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005550:	0222      	lsls	r2, r4, #8
 8005552:	68f9      	ldr	r1, [r7, #12]
 8005554:	6849      	ldr	r1, [r1, #4]
 8005556:	0849      	lsrs	r1, r1, #1
 8005558:	2000      	movs	r0, #0
 800555a:	4688      	mov	r8, r1
 800555c:	4681      	mov	r9, r0
 800555e:	eb12 0a08 	adds.w	sl, r2, r8
 8005562:	eb43 0b09 	adc.w	fp, r3, r9
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	603b      	str	r3, [r7, #0]
 800556e:	607a      	str	r2, [r7, #4]
 8005570:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005574:	4650      	mov	r0, sl
 8005576:	4659      	mov	r1, fp
 8005578:	f7fa fe26 	bl	80001c8 <__aeabi_uldivmod>
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	4613      	mov	r3, r2
 8005582:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800558a:	d308      	bcc.n	800559e <UART_SetConfig+0x3de>
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005592:	d204      	bcs.n	800559e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	60da      	str	r2, [r3, #12]
 800559c:	e0b6      	b.n	800570c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80055a4:	e0b2      	b.n	800570c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ae:	d15e      	bne.n	800566e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80055b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055b4:	2b08      	cmp	r3, #8
 80055b6:	d828      	bhi.n	800560a <UART_SetConfig+0x44a>
 80055b8:	a201      	add	r2, pc, #4	; (adr r2, 80055c0 <UART_SetConfig+0x400>)
 80055ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055be:	bf00      	nop
 80055c0:	080055e5 	.word	0x080055e5
 80055c4:	080055ed 	.word	0x080055ed
 80055c8:	080055f5 	.word	0x080055f5
 80055cc:	0800560b 	.word	0x0800560b
 80055d0:	080055fb 	.word	0x080055fb
 80055d4:	0800560b 	.word	0x0800560b
 80055d8:	0800560b 	.word	0x0800560b
 80055dc:	0800560b 	.word	0x0800560b
 80055e0:	08005603 	.word	0x08005603
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055e4:	f7fe fd10 	bl	8004008 <HAL_RCC_GetPCLK1Freq>
 80055e8:	61f8      	str	r0, [r7, #28]
        break;
 80055ea:	e014      	b.n	8005616 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055ec:	f7fe fd22 	bl	8004034 <HAL_RCC_GetPCLK2Freq>
 80055f0:	61f8      	str	r0, [r7, #28]
        break;
 80055f2:	e010      	b.n	8005616 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055f4:	4b4d      	ldr	r3, [pc, #308]	; (800572c <UART_SetConfig+0x56c>)
 80055f6:	61fb      	str	r3, [r7, #28]
        break;
 80055f8:	e00d      	b.n	8005616 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055fa:	f7fe fc6d 	bl	8003ed8 <HAL_RCC_GetSysClockFreq>
 80055fe:	61f8      	str	r0, [r7, #28]
        break;
 8005600:	e009      	b.n	8005616 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005606:	61fb      	str	r3, [r7, #28]
        break;
 8005608:	e005      	b.n	8005616 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800560a:	2300      	movs	r3, #0
 800560c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005614:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d077      	beq.n	800570c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	005a      	lsls	r2, r3, #1
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	085b      	lsrs	r3, r3, #1
 8005626:	441a      	add	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005630:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	2b0f      	cmp	r3, #15
 8005636:	d916      	bls.n	8005666 <UART_SetConfig+0x4a6>
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800563e:	d212      	bcs.n	8005666 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	b29b      	uxth	r3, r3
 8005644:	f023 030f 	bic.w	r3, r3, #15
 8005648:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	085b      	lsrs	r3, r3, #1
 800564e:	b29b      	uxth	r3, r3
 8005650:	f003 0307 	and.w	r3, r3, #7
 8005654:	b29a      	uxth	r2, r3
 8005656:	8afb      	ldrh	r3, [r7, #22]
 8005658:	4313      	orrs	r3, r2
 800565a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	8afa      	ldrh	r2, [r7, #22]
 8005662:	60da      	str	r2, [r3, #12]
 8005664:	e052      	b.n	800570c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800566c:	e04e      	b.n	800570c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800566e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005672:	2b08      	cmp	r3, #8
 8005674:	d827      	bhi.n	80056c6 <UART_SetConfig+0x506>
 8005676:	a201      	add	r2, pc, #4	; (adr r2, 800567c <UART_SetConfig+0x4bc>)
 8005678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567c:	080056a1 	.word	0x080056a1
 8005680:	080056a9 	.word	0x080056a9
 8005684:	080056b1 	.word	0x080056b1
 8005688:	080056c7 	.word	0x080056c7
 800568c:	080056b7 	.word	0x080056b7
 8005690:	080056c7 	.word	0x080056c7
 8005694:	080056c7 	.word	0x080056c7
 8005698:	080056c7 	.word	0x080056c7
 800569c:	080056bf 	.word	0x080056bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056a0:	f7fe fcb2 	bl	8004008 <HAL_RCC_GetPCLK1Freq>
 80056a4:	61f8      	str	r0, [r7, #28]
        break;
 80056a6:	e014      	b.n	80056d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056a8:	f7fe fcc4 	bl	8004034 <HAL_RCC_GetPCLK2Freq>
 80056ac:	61f8      	str	r0, [r7, #28]
        break;
 80056ae:	e010      	b.n	80056d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056b0:	4b1e      	ldr	r3, [pc, #120]	; (800572c <UART_SetConfig+0x56c>)
 80056b2:	61fb      	str	r3, [r7, #28]
        break;
 80056b4:	e00d      	b.n	80056d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056b6:	f7fe fc0f 	bl	8003ed8 <HAL_RCC_GetSysClockFreq>
 80056ba:	61f8      	str	r0, [r7, #28]
        break;
 80056bc:	e009      	b.n	80056d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056c2:	61fb      	str	r3, [r7, #28]
        break;
 80056c4:	e005      	b.n	80056d2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80056c6:	2300      	movs	r3, #0
 80056c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80056d0:	bf00      	nop
    }

    if (pclk != 0U)
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d019      	beq.n	800570c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	085a      	lsrs	r2, r3, #1
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	441a      	add	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	2b0f      	cmp	r3, #15
 80056f0:	d909      	bls.n	8005706 <UART_SetConfig+0x546>
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056f8:	d205      	bcs.n	8005706 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	60da      	str	r2, [r3, #12]
 8005704:	e002      	b.n	800570c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005718:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800571c:	4618      	mov	r0, r3
 800571e:	3728      	adds	r7, #40	; 0x28
 8005720:	46bd      	mov	sp, r7
 8005722:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005726:	bf00      	nop
 8005728:	40008000 	.word	0x40008000
 800572c:	00f42400 	.word	0x00f42400

08005730 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00a      	beq.n	800575a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	430a      	orrs	r2, r1
 8005758:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00a      	beq.n	800577c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	430a      	orrs	r2, r1
 800577a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	f003 0304 	and.w	r3, r3, #4
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00a      	beq.n	800579e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	f003 0308 	and.w	r3, r3, #8
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00a      	beq.n	80057c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	430a      	orrs	r2, r1
 80057be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c4:	f003 0310 	and.w	r3, r3, #16
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00a      	beq.n	80057e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	f003 0320 	and.w	r3, r3, #32
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00a      	beq.n	8005804 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580c:	2b00      	cmp	r3, #0
 800580e:	d01a      	beq.n	8005846 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800582e:	d10a      	bne.n	8005846 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00a      	beq.n	8005868 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	430a      	orrs	r2, r1
 8005866:	605a      	str	r2, [r3, #4]
  }
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b086      	sub	sp, #24
 8005878:	af02      	add	r7, sp, #8
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005884:	f7fb fb44 	bl	8000f10 <HAL_GetTick>
 8005888:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0308 	and.w	r3, r3, #8
 8005894:	2b08      	cmp	r3, #8
 8005896:	d10e      	bne.n	80058b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005898:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f82d 	bl	8005906 <UART_WaitOnFlagUntilTimeout>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e023      	b.n	80058fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0304 	and.w	r3, r3, #4
 80058c0:	2b04      	cmp	r3, #4
 80058c2:	d10e      	bne.n	80058e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f817 	bl	8005906 <UART_WaitOnFlagUntilTimeout>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e00d      	b.n	80058fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2220      	movs	r2, #32
 80058e6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2220      	movs	r2, #32
 80058ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b09c      	sub	sp, #112	; 0x70
 800590a:	af00      	add	r7, sp, #0
 800590c:	60f8      	str	r0, [r7, #12]
 800590e:	60b9      	str	r1, [r7, #8]
 8005910:	603b      	str	r3, [r7, #0]
 8005912:	4613      	mov	r3, r2
 8005914:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005916:	e0a5      	b.n	8005a64 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005918:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800591a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591e:	f000 80a1 	beq.w	8005a64 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005922:	f7fb faf5 	bl	8000f10 <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800592e:	429a      	cmp	r2, r3
 8005930:	d302      	bcc.n	8005938 <UART_WaitOnFlagUntilTimeout+0x32>
 8005932:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005934:	2b00      	cmp	r3, #0
 8005936:	d13e      	bne.n	80059b6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005940:	e853 3f00 	ldrex	r3, [r3]
 8005944:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005948:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800594c:	667b      	str	r3, [r7, #100]	; 0x64
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	461a      	mov	r2, r3
 8005954:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005956:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005958:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800595c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800595e:	e841 2300 	strex	r3, r2, [r1]
 8005962:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1e6      	bne.n	8005938 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	3308      	adds	r3, #8
 8005970:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005974:	e853 3f00 	ldrex	r3, [r3]
 8005978:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800597a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597c:	f023 0301 	bic.w	r3, r3, #1
 8005980:	663b      	str	r3, [r7, #96]	; 0x60
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	3308      	adds	r3, #8
 8005988:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800598a:	64ba      	str	r2, [r7, #72]	; 0x48
 800598c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005990:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005992:	e841 2300 	strex	r3, r2, [r1]
 8005996:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005998:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1e5      	bne.n	800596a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2220      	movs	r2, #32
 80059a2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2220      	movs	r2, #32
 80059a8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e067      	b.n	8005a86 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d04f      	beq.n	8005a64 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059d2:	d147      	bne.n	8005a64 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059dc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e6:	e853 3f00 	ldrex	r3, [r3]
 80059ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	461a      	mov	r2, r3
 80059fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059fc:	637b      	str	r3, [r7, #52]	; 0x34
 80059fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a04:	e841 2300 	strex	r3, r2, [r1]
 8005a08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1e6      	bne.n	80059de <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	3308      	adds	r3, #8
 8005a16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	e853 3f00 	ldrex	r3, [r3]
 8005a1e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	f023 0301 	bic.w	r3, r3, #1
 8005a26:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	3308      	adds	r3, #8
 8005a2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a30:	623a      	str	r2, [r7, #32]
 8005a32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a34:	69f9      	ldr	r1, [r7, #28]
 8005a36:	6a3a      	ldr	r2, [r7, #32]
 8005a38:	e841 2300 	strex	r3, r2, [r1]
 8005a3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1e5      	bne.n	8005a10 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2220      	movs	r2, #32
 8005a48:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2220      	movs	r2, #32
 8005a54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e010      	b.n	8005a86 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	69da      	ldr	r2, [r3, #28]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	bf0c      	ite	eq
 8005a74:	2301      	moveq	r3, #1
 8005a76:	2300      	movne	r3, #0
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	79fb      	ldrb	r3, [r7, #7]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	f43f af4a 	beq.w	8005918 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3770      	adds	r7, #112	; 0x70
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
	...

08005a90 <__libc_init_array>:
 8005a90:	b570      	push	{r4, r5, r6, lr}
 8005a92:	4d0d      	ldr	r5, [pc, #52]	; (8005ac8 <__libc_init_array+0x38>)
 8005a94:	4c0d      	ldr	r4, [pc, #52]	; (8005acc <__libc_init_array+0x3c>)
 8005a96:	1b64      	subs	r4, r4, r5
 8005a98:	10a4      	asrs	r4, r4, #2
 8005a9a:	2600      	movs	r6, #0
 8005a9c:	42a6      	cmp	r6, r4
 8005a9e:	d109      	bne.n	8005ab4 <__libc_init_array+0x24>
 8005aa0:	4d0b      	ldr	r5, [pc, #44]	; (8005ad0 <__libc_init_array+0x40>)
 8005aa2:	4c0c      	ldr	r4, [pc, #48]	; (8005ad4 <__libc_init_array+0x44>)
 8005aa4:	f000 f82e 	bl	8005b04 <_init>
 8005aa8:	1b64      	subs	r4, r4, r5
 8005aaa:	10a4      	asrs	r4, r4, #2
 8005aac:	2600      	movs	r6, #0
 8005aae:	42a6      	cmp	r6, r4
 8005ab0:	d105      	bne.n	8005abe <__libc_init_array+0x2e>
 8005ab2:	bd70      	pop	{r4, r5, r6, pc}
 8005ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ab8:	4798      	blx	r3
 8005aba:	3601      	adds	r6, #1
 8005abc:	e7ee      	b.n	8005a9c <__libc_init_array+0xc>
 8005abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ac2:	4798      	blx	r3
 8005ac4:	3601      	adds	r6, #1
 8005ac6:	e7f2      	b.n	8005aae <__libc_init_array+0x1e>
 8005ac8:	08005dec 	.word	0x08005dec
 8005acc:	08005dec 	.word	0x08005dec
 8005ad0:	08005dec 	.word	0x08005dec
 8005ad4:	08005df0 	.word	0x08005df0

08005ad8 <memcpy>:
 8005ad8:	440a      	add	r2, r1
 8005ada:	4291      	cmp	r1, r2
 8005adc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ae0:	d100      	bne.n	8005ae4 <memcpy+0xc>
 8005ae2:	4770      	bx	lr
 8005ae4:	b510      	push	{r4, lr}
 8005ae6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005aea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005aee:	4291      	cmp	r1, r2
 8005af0:	d1f9      	bne.n	8005ae6 <memcpy+0xe>
 8005af2:	bd10      	pop	{r4, pc}

08005af4 <memset>:
 8005af4:	4402      	add	r2, r0
 8005af6:	4603      	mov	r3, r0
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d100      	bne.n	8005afe <memset+0xa>
 8005afc:	4770      	bx	lr
 8005afe:	f803 1b01 	strb.w	r1, [r3], #1
 8005b02:	e7f9      	b.n	8005af8 <memset+0x4>

08005b04 <_init>:
 8005b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b06:	bf00      	nop
 8005b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b0a:	bc08      	pop	{r3}
 8005b0c:	469e      	mov	lr, r3
 8005b0e:	4770      	bx	lr

08005b10 <_fini>:
 8005b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b12:	bf00      	nop
 8005b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b16:	bc08      	pop	{r3}
 8005b18:	469e      	mov	lr, r3
 8005b1a:	4770      	bx	lr
